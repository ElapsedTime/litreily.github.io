<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python之pypcap库的安装及简单抓包工具的实现]]></title>
      <url>http://www.litreily.top/2018/12/31/pypcap-install/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/pynetwork/pypcap" target="_blank" rel="noopener">pypcap</a>是一个对<code>libpcap</code>C库进行封装和简化的面向对象的抓包工具库，可以非常方便的用于抓包和过滤，结合<code>dpkt</code>解析库可以完成许多网络数据包的抓取和分析。本文讲述的就是如何使用<code>pypcap</code>及<code>dpkt</code>库实现简单抓包工具，也称为嗅探器(sniffer).</p>
<h2 id="Linux-端安装-pypcap"><a href="#Linux-端安装-pypcap" class="headerlink" title="Linux 端安装 pypcap"></a>Linux 端安装 pypcap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcap-dev</span><br><span class="line">sudo pip install pypcap</span><br></pre></td></tr></table></figure>
<p>这里有个问题,如果使用<code>Anaconda</code>目录的<code>pip</code>安装则可能失败,目前原因未明,但官方的<code>python3</code>对应的<code>pip3</code>及<code>python2</code>对应的<code>pip</code>均无此问题.</p>
<a id="more"></a>
<h2 id="Windows-端安装-pypcap"><a href="#Windows-端安装-pypcap" class="headerlink" title="Windows 端安装 pypcap"></a>Windows 端安装 pypcap</h2><p>根据<code>pypcap</code>官方说明：</p>
<blockquote>
<p>WinPcap has compatibility issues with Windows 10, therefore it’s recommended to use Npcap (Nmap’s packet sniffing library for Windows, based on the WinPcap/Libpcap libraries, but with improved speed, portability, security, and efficiency). Please enable WinPcap API-compatible mode during the library installation.</p>
</blockquote>
<p>这里提到<code>winpcap</code>与<code>win10</code>间存在兼容性问题，具体什么问题我也没搞清楚，之前使用<code>wireshark</code>抓包一直用的<code>winpcap</code>也没问题。不过我估计和后面要用到的<code>npcap sdk</code>有关吧。既如此，就需要在安装<code>pypcap</code>前安装好<code>Npcap</code>，并下载好<code>Npcap SDK</code>。</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><ol>
<li><a href="https://github.com/pynetwork/pypcap/releases" target="_blank" rel="noopener">pypcap 源码</a></li>
<li><a href="https://nmap.org/npcap/#download" target="_blank" rel="noopener">Npcap</a></li>
<li><a href="https://nmap.org/npcap/#download" target="_blank" rel="noopener">Npcap SDK</a></li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>安装Npcap</li>
</ul>
<p>安装下载后的Npcap安装包，如果电脑带有无线网卡，记得勾选“support raw 802.11 traffic(and monitor mode) for wireless adapters”。需要注意的是，如果电脑已经安装过<code>winpcap</code>软件，在安装<code>Npcap</code>时会弹窗提示卸载<code>Winpcap</code>,此时需要关闭wireshark或是其它相关的软件</p>
<ul>
<li>安装pypcap</li>
</ul>
<ol>
<li>将<code>Npcap SDK</code>文件夹和<code>pypcap</code>源码文件夹放在一个目录下</li>
<li>将<code>Npcap SDK</code>文件夹名称修改为<code>wpdpack</code></li>
<li>进入<code>pypcap</code>源码目录，执行<code>python setup.py install</code>即可完成安装</li>
</ol>
<p>在第三步需要注意的是，如果Python版本为3.7.2（其它大于3.7的版本没试过）有可能编译失败，因为有个头文件<code>pystate.h</code>在高版本会有更新，导致结构体<code>_ts PyThreadState</code>中的某些参数不识别，从而提示错误<code>pcap.c(22849): error C2039: &#39;exc_value&#39;: is not a member of &#39;_ts&#39;</code>等。之后我将版本换至3.6.6后便正常编译了。</p>
<p>安装完成后，可以进入<code>python</code>执行<code>import pcap</code>查看是否已经可以正常导入。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pcap</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all of the Internet devices</span></span><br><span class="line">devs = pcap.findalldevs()</span><br><span class="line">print(*devs, sep=<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">pc = pcap.pcap(devs[<span class="number">3</span>], promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># fiter http pcakets</span></span><br><span class="line">pc.setfilter(<span class="string">'tcp port 80'</span>)</span><br><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pc:</span><br><span class="line">    print(ptime, pdata)</span><br></pre></td></tr></table></figure>
<p>接下来简单解释下几个主要函数</p>
<h3 id="findalldevs"><a href="#findalldevs" class="headerlink" title="findalldevs"></a>findalldevs</h3><p><code>findalldevs</code>可以列出当前操作系统的所有网络接口,但是<code>windows</code>和<code>Linux</code>的输出风格不大一样,下面来看看.</p>
<p>Linux版输出简单明了,若我猜的不错,输出的首个接口便是电脑的有线接口(本人台式机,Ubuntu系统),至少在我这是适用的.</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜ python</span><br><span class="line">Python 3.6.7 (default, Oct 22 2018, 11:32:17)</span><br><span class="line">[GCC 8.2.0] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import pcap</span><br><span class="line">&gt;&gt;&gt; pcap.findalldevs()</span><br><span class="line">[<span class="string">'enp2s0'</span>, <span class="string">'any'</span>, <span class="string">'lo'</span>, <span class="string">'nflog'</span>, <span class="string">'nfqueue'</span>, <span class="string">'usbmon1'</span>, <span class="string">'usbmon2'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>ubuntu</code>及大部分Linux系统中,均可使用<code>ip route</code>或是<code>ifconfig</code>来获取接口名，据此甚至可以自动获取接口名．</p>
<p>Windows版则比较复杂，下面是某台电脑<code>win10</code>操作系统输出的结果，这个直接看是看不出什么的, 因为使用<code>cmd</code>指令<code>ipconfig /all</code>输出的接口信息并不包含以下内容，而是接口名称及描述信息等，如果想知道下面接口如何与接口名对应起来，可以参考后面抓包工具使用注册表来获取接口信息,或是打开<code>wireshark</code>抓包，每个报文的帧头都会显示当前接口的接口信息．</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pcap</span><br><span class="line">&gt;&gt;&gt; pcap.findalldevs()</span><br><span class="line">[<span class="string">'\Device\NPF_&#123;839768E4-726A-48BB-9CEC-BD6FD670CB8F&#125;'</span>, <span class="string">'\Device\NPF_&#123;C4D1AF17-C5C9-40C5-90F8-17781657FC9E&#125;'</span>, <span class="string">'\Device\NPF_&#123;26024876-9711-428F-89D3-B91D2C488AC5&#125;'</span>, <span class="string">'\Device\NPF_&#123;E26BFFEF-0644-4C13-8016-EB408AE1D471&#125;'</span>, <span class="string">'\Device\NPF_&#123;9ED3674C-211E-4A57-923A-F8DBE6E6B704&#125;'</span>, <span class="string">'\Device\NPF_&#123;A0B8B562-F309-44F3-95A1-BF34F5465925&#125;'</span>, <span class="string">'\Device\NPF_&#123;9D76B006-6946-4C88-AED2-7F7A9194303C&#125;'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="pcap-pcap"><a href="#pcap-pcap" class="headerlink" title="pcap.pcap"></a>pcap.pcap</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pc = pcap.pcap(devs[<span class="number">3</span>], promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>以上代码定义了一个pcap对象，首个参数<code>devs[3]</code>对应接口名，<code>promisc</code>为真代表打开混杂模式，<code>immediate</code>代表立即模式，启用将不缓存数据包,<code>timeout_ms</code>代表接收数据包的超时时间</p>
<h3 id="setfilter"><a href="#setfilter" class="headerlink" title="setfilter"></a>setfilter</h3><p><code>setfilter</code>用来设置数据包过滤器，比如只想抓<code>http</code>的包，那就通过<code>setfilter(tcp port 80)</code>实现，更加详细的过滤规则请自行谷歌．</p>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pc:</span><br><span class="line">    print(ptime, pdata)</span><br></pre></td></tr></table></figure>
<p><code>pcap.pcap</code>对象pc是个动态数据，通常结合for循环或是while循环不断读取数据包，数据包会返回时间戳及报文数据．</p>
<p>上面这个小例子就是简单的说明<code>pcap</code>常用库函数的使用方法．具体的数据包的存储及解析需要由解析库<code>dpkt</code>来完成．下面是一个更加详细的抓包工具实例，可以完成数据包的抓取、解析及存储.</p>
<h2 id="简易抓包工具"><a href="#简易抓包工具" class="headerlink" title="简易抓包工具"></a>简易抓包工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pcap</span><br><span class="line"><span class="keyword">import</span> dpkt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Windows'</span> <span class="keyword">in</span> platform.platform():</span><br><span class="line">    <span class="keyword">import</span> winreg <span class="keyword">as</span> wr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IF_REG = <span class="string">r'SYSTEM\CurrentControlSet\Control\Network\&#123;4d36e972-e325-11ce-bfc1-08002be10318&#125;'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInterfaceByName</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">'''Get guid of interface from regedit of windows system</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: interface name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        An valid guid value or None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string">        getInterfaceByName('eth0')</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    reg = wr.ConnectRegistry(<span class="keyword">None</span>, wr.HKEY_LOCAL_MACHINE)</span><br><span class="line">    reg_key = wr.OpenKey(reg, IF_REG)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(wr.QueryInfoKey(reg_key)[<span class="number">0</span>]):</span><br><span class="line">        subkey_name = wr.EnumKey(reg_key, i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            reg_subkey = wr.OpenKey(reg_key, subkey_name + <span class="string">r'\Connection'</span>)</span><br><span class="line">            Name = wr.QueryValueEx(reg_subkey, <span class="string">'Name'</span>)[<span class="number">0</span>]</span><br><span class="line">            wr.CloseKey(reg_subkey)</span><br><span class="line">            <span class="keyword">if</span> Name == name:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">r'\Device\NPF_'</span> + subkey_name</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mac_addr</span><span class="params">(mac)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%02x:%02x:%02x:%02x:%02x:%02x'</span>%tuple(mac)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_addr</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%d.%d.%d.%d'</span>%tuple(ip)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captureData</span><span class="params">(iface)</span>:</span></span><br><span class="line">    pkt = pcap.pcap(iface, promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># filter method</span></span><br><span class="line">    filters = &#123;</span><br><span class="line">        <span class="string">'DNS'</span>: <span class="string">'udp port 53'</span>,</span><br><span class="line">        <span class="string">'HTTP'</span>: <span class="string">'tcp port 80'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># pkt.setfilter(filters['HTTP'])</span></span><br><span class="line"></span><br><span class="line">    pcap_filepath = <span class="string">'pkts/pkts_&#123;&#125;.pcap'</span>.format(time.strftime(<span class="string">"%Y%m%d-%H%M%S"</span>,</span><br><span class="line">        time.localtime()))</span><br><span class="line">    pcap_file = open(pcap_filepath, <span class="string">'wb'</span>)</span><br><span class="line">    writer = dpkt.pcap.Writer(pcap_file)</span><br><span class="line">    print(<span class="string">'Start capture...'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkts_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pkt:</span><br><span class="line">            writer.writepkt(pdata, ptime)</span><br><span class="line">            <span class="comment"># anlysisData(pdata)</span></span><br><span class="line">            printRawPkt(ptime, pdata)</span><br><span class="line">            pkts_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">        writer.close()</span><br><span class="line">        pcap_file.close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pkts_count:</span><br><span class="line">            os.remove(pcap_filepath)</span><br><span class="line">        print(<span class="string">'%d packets received'</span>%(pkts_count))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printRawPkt</span><span class="params">(time, data)</span>:</span></span><br><span class="line">    eth = dpkt.ethernet.Ethernet(data)</span><br><span class="line">    print(<span class="string">'Timestamp: '</span>, str(datetime.datetime.utcfromtimestamp(time)))</span><br><span class="line">    print(<span class="string">'Ethernet Frame: '</span>, mac_addr(eth.src), mac_addr(eth.dst))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(eth.data, dpkt.ip.IP):</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ip = eth.data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get fragments info</span></span><br><span class="line">    do_not_fragment = bool(ip.off &amp; dpkt.ip.IP_DF)</span><br><span class="line">    more_fragments = bool(ip.off &amp; dpkt.ip.IP_MF)</span><br><span class="line">    fragment_offset = ip.off &amp; dpkt.ip.IP_OFFMASK</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'IP: %s -&gt; %s (len=%d ttl=%d DF=%d MF=%d offset=%d)\n'</span> % (</span><br><span class="line">        ip_addr(ip.src), ip_addr(ip.dst), ip.len, ip.ttl,</span><br><span class="line">        do_not_fragment, more_fragments, fragment_offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anlysisData</span><span class="params">(data)</span>:</span></span><br><span class="line">    packet = dpkt.ethernet.Ethernet(data)</span><br><span class="line">    <span class="keyword">if</span> isinstance(packet.data, dpkt.ip.IP):</span><br><span class="line">        ip = ip_addr(packet.data.dst)</span><br><span class="line">        <span class="keyword">if</span> packet.data.data.dport == <span class="number">80</span> <span class="keyword">or</span> packet.data.data.sport == <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(packet.data.data.data.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>))</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> uderr:</span><br><span class="line">                print(uderr.__str__())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'Windows'</span> <span class="keyword">in</span> platform.platform():</span><br><span class="line">        iface = getInterfaceByName(<span class="string">'Router'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        iface = <span class="string">'enp2s0'</span></span><br><span class="line">    captureData(iface)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><ul>
<li>获取接口</li>
</ul>
<p><code>getInterfaceByName</code>根据接口名称,通过查找注册表信息获取<code>pcap</code>所需的接口设备信息,适用于Windows系统.至于Linux系统,直接通过<code>ifconfig</code>获取即可,至于自动获取功能,目前还没写,以后再说吧.</p>
<ul>
<li>数据包存储</li>
</ul>
<p>为了将数据包存储到<code>.pcap</code>文件(此类文件可以使用wireshark打开)中,可以通过<code>dpkt.pcap.Writer</code>对象使用<code>writepkt</code>函数不断写入文件.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pcap_file = open(pcap_filepath, <span class="string">'wb'</span>)</span><br><span class="line">writer = dpkt.pcap.Writer(pcap_file)</span><br><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pkt:</span><br><span class="line">    writer.writepkt(pdata, ptime)</span><br></pre></td></tr></table></figure>
<ul>
<li>打印数据包基本信息</li>
</ul>
<p><code>printRawPkt</code>是个非常简单的打印数据包基本信息的函数,最多仅打印至<code>ip</code>信息,打印格式如下:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Timestamp:</span>  <span class="number">2018</span><span class="bullet">-12</span><span class="bullet">-31</span> <span class="number">13</span><span class="string">:58:39.850904</span></span><br><span class="line"><span class="string">Ethernet</span> <span class="attr">Frame:</span>  <span class="number">00</span><span class="string">:e0:4c:5a:0a:78</span> <span class="number">00</span><span class="string">:0f:e9:61:30:00</span></span><br><span class="line"><span class="attr">IP:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.76</span> <span class="bullet">-&gt;</span> <span class="number">59.111</span><span class="number">.160</span><span class="number">.197</span> <span class="string">(len=52</span> <span class="string">ttl=64</span> <span class="string">DF=1</span> <span class="string">MF=0</span> <span class="string">offset=0)</span></span><br></pre></td></tr></table></figure>
<p>信息包含时间戳,以太网帧的<code>MAC</code>地址,<code>IP</code>地址及分片信息等.</p>
<ul>
<li>解析http数据包</li>
</ul>
<p><code>anlysisData</code>函数目前只是简单的检测及打印解码后的<code>http</code>包,使用<code>dpkt.ethernet.Ethernet</code>可以将原始数据包封装成一个结构化的以太网帧,之后按照网络协议栈的顺序便可逐层解析出链路层、网络层、传输层直至应用层.以上代码先是判断是否为<code>IP</code>报文,之后根据端口号判断是否为http报文,然后将数据解码后输出.</p>
<p>这个例子也很简单,很多异常情况也没考虑,本文主要目的是描述<code>pypcap</code>和<code>dpkt</code>的常用方法以及抓包工具的实现过程,至于针对具体协议的解析则需继续学习.</p>
<h3 id="抓包测试"><a href="#抓包测试" class="headerlink" title="抓包测试"></a>抓包测试</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">➜ mkdir pkts</span><br><span class="line">➜ sudo ./pktcap.py</span><br><span class="line">Start capture...</span><br><span class="line">Timestamp:  2018-12-31 13:58:37.148964</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.148978</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.529024</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.809011</span><br><span class="line">Ethernet Frame:  98:e0:d9:a4:50:1d 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:39.850904</span><br><span class="line">Ethernet Frame:  00:e0:4c:5a:0a:78 00:0f:e9:61:30:00</span><br><span class="line">IP: 192.168.1.76 -&gt; 59.111.160.197 (len=52 ttl=64 DF=1 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:39.862890</span><br><span class="line">Ethernet Frame:  00:0f:e9:61:30:00 00:e0:4c:5a:0a:78</span><br><span class="line">IP: 59.111.160.197 -&gt; 192.168.1.76 (len=40 ttl=55 DF=1 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:40.289465</span><br><span class="line">Ethernet Frame:  b0:19:c6:17:0a:57 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:40.369068</span><br><span class="line">Ethernet Frame:  a4:d1:8c:0b:54:12 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:41.859034</span><br><span class="line">Ethernet Frame:  a0:4e:a7:e0:65:3d 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:42.079218</span><br><span class="line">Ethernet Frame:  8c:6d:50:7d:f9:<span class="built_in">fc</span> ff:ff:ff:ff:ff:ff</span><br><span class="line">IP: 0.0.0.0 -&gt; 255.255.255.255 (len=352 ttl=64 DF=0 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">^C10 packets received</span><br><span class="line">➜ <span class="built_in">cd</span> pkts</span><br><span class="line">➜ ls</span><br><span class="line">pkts_20181230-185017.pcap  pkts_20181231-203416.pcap  pkts_20181231-215837.pcap</span><br></pre></td></tr></table></figure>
<p>代码已上传至<a href="https://github.com/Litreily/Python-demos.git" target="_blank" rel="noopener">github Python-demos</a> <code>sniffer.py</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.cnblogs.com/jackadam/p/8279080.html" target="_blank" rel="noopener">windows 环境下python 安装 pypcap…</a></li>
<li><a href="https://www.cnblogs.com/xuanhun/p/5625186.html" target="_blank" rel="noopener">Python黑客编程3网络数据监听和过滤</a></li>
<li><a href="https://blog.csdn.net/weixin_39138707/article/details/74612637" target="_blank" rel="noopener">Mac下用python+pypcap+dpkt抓取IP数据包并分析</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pypcap </tag>
            
            <tag> dpkt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux中的文件I/O缓冲]]></title>
      <url>http://www.litreily.top/2018/10/25/io-cache/</url>
      <content type="html"><![CDATA[<p>近日阅读《Linux/UNIX系统编程手册》第13章 - 文件I/O缓冲，有些收获，是以此文以记之。以往只知道Linux的I/O操作有缓冲机制，但始终不知道具体的缓冲流程及使用方法。读完本章节后方才有种恍然大悟的感觉，久违的因读书而觉得舒爽的感觉。</p>
<p>好了，进入正题，下图摘自原文(13.4-I/O缓冲小结)，此图概括了<code>stdio</code>库及内核针对输出文件所用的缓冲以及各类缓冲的控制机制。本文依据此图逐步揭开文件I/O缓冲的面纱。</p>
<p><img src="/assets/linux/io_buffer.jpg" alt="I/O缓冲"></p>
<a id="more"></a>
<h2 id="I-O缓冲的类型"><a href="#I-O缓冲的类型" class="headerlink" title="I/O缓冲的类型"></a>I/O缓冲的类型</h2><p>在使用<code>stdio</code>库中文件写操作相关的函数（如:<code>printf</code>, <code>fputc</code>, <code>fputs</code>, <code>fwrite</code>）时，待写入数据从用户空间内存到内核空间内存、再到磁盘会经过以下3类缓冲</p>
<ol>
<li>stdio库的缓冲区</li>
<li>文件I/O的内核缓冲区的高速缓存</li>
<li>磁盘驱动器内置高速缓存</li>
</ol>
<p>下面逐一介绍。</p>
<h3 id="stdio库的缓冲"><a href="#stdio库的缓冲" class="headerlink" title="stdio库的缓冲"></a>stdio库的缓冲</h3><p><img src="/assets/linux/stdio_buffer.png" alt="stdio buffer"></p>
<p>如上图所示，<code>stdio</code>库实现的缓冲位于用户空间内存当中，该缓冲区A会缓冲大块的文件数据以减少系统调用（如: <code>read</code>, <code>write</code>）。</p>
<p>需要知道的是，<code>stdio</code>库函数内部会调用底层的系统调用，如<code>fgets</code>调用<code>read</code>，<code>fputs</code>调用<code>write</code>。但是在调用之前，</p>
<ul>
<li>对于读操作，库函数会先检查缓冲区A内是否已有所需数据，如果有则直接从缓冲区A读取；否则先执行系统调用<code>read</code>，从内核缓冲区B中读取数据到缓冲区A，然后从缓冲区A读取数据</li>
<li>对于写操作，库函数会先检查缓冲区A是否还有空闲，如果有则先存入缓冲区A；否则先执行库函数<code>fflush</code>，将缓冲区A中数据刷新至内核缓冲区B，然后将当前待写入数据写入缓冲区A</li>
</ul>
<p>对于<code>stdio</code>库的缓冲数据，在执行库函数之后的某一时刻，系统会通过<code>fflush</code>函数将数据刷新至内核缓冲区。当然，我们也可以手动执行<code>fflush</code>函数强制刷新数据至内核缓冲区。</p>
<p><code>fflush</code>定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>fflush(stdin)</code>会清空缓冲区内的标准输入数据</li>
<li><code>fflush(stdout)</code>会将缓冲区内的写入数据刷新至终端输出</li>
<li><code>stderr</code>默认不使用缓冲</li>
<li><code>fflush(stream)</code>将文件流<code>stream</code>的缓冲数据刷新至内核缓冲区</li>
</ul>
<h3 id="文件I-O的内核缓冲"><a href="#文件I-O的内核缓冲" class="headerlink" title="文件I/O的内核缓冲"></a>文件I/O的内核缓冲</h3><p>不管使不使用<code>stdio</code>库函数，最终都会直接或间接的调用<code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code>等系统调用读写文件I/O，那么系统就会在写操作后将数据存入内核缓冲区，但此时还并未存入磁盘。</p>
<p>也就是说，在执行<code>write</code>后，函数直接返回，但数据只是存在内核缓冲区中。当有新的读取请求时，会先在内核缓冲区中查找，如果有则直接返回；如果没有则先从磁盘读入大块数据至内核缓冲区，这样可以减少磁盘读写操作。毕竟，相比于系统调用和用户空间与内核空间之间的数据传输，磁盘读写所花费的时间要长得多。</p>
<blockquote>
<p>若内容发生变化的内核缓冲区在30s内未经显式方式同步到磁盘上，则一条长期运行的内核线程会确保将其刷新到磁盘上。</p>
</blockquote>
<p>不同版本的<code>linux</code>，其内核线程不一样，可以使用指令<code>ps aux |grep flush</code>粗略查看一下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内核线程刷新之前脏缓冲区必须达到的时间，单位：0.01s</span></span><br><span class="line">$ cat /proc/sys/vm/dirty_expire_centisecs</span><br><span class="line">3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核线程执行周期，单位：0.01s</span></span><br><span class="line">$ cat /proc/sys/vm/dirty_writeback_centisecs</span><br><span class="line">500</span><br></pre></td></tr></table></figure>
<h3 id="磁盘驱动器内置缓冲"><a href="#磁盘驱动器内置缓冲" class="headerlink" title="磁盘驱动器内置缓冲"></a>磁盘驱动器内置缓冲</h3><p>内核缓冲区的数据在真正存入物理磁盘前，会先存入磁盘驱动器内置的高速缓存，之后在某一时刻写入磁盘。具体过程没有深究过，目前只需知道还有这么一层缓冲区即可。</p>
<h2 id="控制文件I-O缓冲"><a href="#控制文件I-O缓冲" class="headerlink" title="控制文件I/O缓冲"></a>控制文件I/O缓冲</h2><p>通过某些方式，我们可以控制I/O缓冲机制，其中包括修改缓冲区大小、缓冲模式，禁用缓冲，强制刷新缓冲数据等。</p>
<h3 id="控制stdio库的缓冲"><a href="#控制stdio库的缓冲" class="headerlink" title="控制stdio库的缓冲"></a>控制stdio库的缓冲</h3><p>对于<code>stdio</code>库分配的缓冲区，在默认情况下会分配<code>BUFSIZ</code>大小的缓冲区，该参数值的大小说法不一，但据原文说明，在<code>glibc</code>中定义为<code>8192</code>字节。</p>
<p><code>stdio</code>流的缓冲模式分以下三类：</p>
<ul>
<li><code>_IONBF</code> - 不缓冲</li>
<li><code>_IOLBF</code> - 行缓冲，针对终端设备，在输出一个换行符前缓冲数据。对输入流，每次读取一行数据</li>
<li><code>_IOFBF</code> - 全缓冲，单词读、写数据(read, write)的大小与缓冲区大小一致，磁盘默认使用此模式</li>
</ul>
<p>我们可以通过库函数<code>setvbuf</code>, <code>setbuffer</code>, <code>setbuf</code>三者之一设置<code>stdio</code>流的缓冲模式。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuf</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuffer</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setvbuf</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf, <span class="keyword">int</span> mode, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>setvbuf</code>函数中的mode对应的就是缓冲模式，可选项为<code>_IONBF</code>, <code>_IOLBF</code>, <code>_IOFBF</code>，<code>buf</code>和<code>size</code>分别对应指定的缓冲区指针及缓冲区大小。当然，当为不缓冲模式时，函数将忽略<code>buf</code>，<code>size</code>这两个参数。示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 4096</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"test.txt"</span>, <span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">if</span>(setvbuf(fp, buf, _IOFBF, BUF_SIZE) !=<span class="number">0</span> )</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br></pre></td></tr></table></figure>
<p>从下面的<code>uClibc</code>源码可以看出，<code>setbuffer</code>, <code>setbuf</code>仅仅是对<code>setvbuf</code>的简单封装。但要注意的是，<code>SUSv3</code>标准并未对<code>setbuffer</code>函数加以定义，在使用时需要加上宏定义<code>_BSD_SOURCE</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuffer</span><span class="params">(FILE * __restrict stream, <span class="keyword">register</span> <span class="keyword">char</span> * __restrict buf, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDIO_BUFFERS</span></span><br><span class="line">    setvbuf(stream, buf, (buf ? _IOFBF : _IONBF), size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuf</span><span class="params">(FILE * __restrict stream, <span class="keyword">register</span> <span class="keyword">char</span> * __restrict buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDIO_BUFFERS</span></span><br><span class="line">    setvbuf(stream, buf, ((buf != <span class="literal">NULL</span>) ? _IOFBF : _IONBF), BUFSIZ);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要禁用缓冲，通常可以使用<code>setbuf(stream, NULL)</code>实现。但通常不推荐这么做，应该合理组织代码，在特定情况使用<code>fflush</code>刷新数据，这样可以在有效利用用户空间缓冲作用的同时，减少系统调用，适宜的存储数据至内核缓冲区。</p>
<h3 id="控制文件I-O的内核缓冲"><a href="#控制文件I-O的内核缓冲" class="headerlink" title="控制文件I/O的内核缓冲"></a>控制文件I/O的内核缓冲</h3><p>在某些情况下，我们可能需要强制将内核缓冲区内的数据刷新至磁盘，而不必等待内核线程等待特定时间后才写入。此时主要有两种选择</p>
<ol>
<li>使用<code>fsync</code>，<code>fdatasync</code>, <code>sync</code>系统调用中的某一个将内核缓冲区的数据强制写入磁盘</li>
<li>以<code>O_SYNC</code>同步方式调用<code>open</code>打开文件，此后每次读写操作都会自动立即写入磁盘</li>
</ol>
<h4 id="fsync"><a href="#fsync" class="headerlink" title="fsync"></a>fsync</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fsync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fdatasync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sync</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>fsync</code>保证<strong>同步I/O文件完整性</strong>，<code>fdatasync</code>保证<strong>同步I/O数据完整性</strong>。两个<strong>完整性</strong>的区别在于前者会将所有更新的文件元数据写入磁盘，后者不会传递所有经过修改的文件元数据属性（如：时间戳）。</p>
<p><code>fsync</code>与<code>fdatasync</code>均是刷新指定文件流数据，而<code>sync()</code>函数会更新所有内核缓冲区数据至磁盘，对应<code>shell</code>指令<code>sync</code>。</p>
<h4 id="O-SYNC"><a href="#O-SYNC" class="headerlink" title="O_SYNC"></a>O_SYNC</h4><p><code>fsync</code>等系统调用需要被手动调用，仅在被调用处起作用；而以<code>O_SYNC</code>方式<code>open</code>的文件流，后续所有写操作都将把数据直接写入磁盘。</p>
<p>不到万不得已还是不要以这种方式打开文件流，因为这将严重影响性能，当<code>write</code>缓冲区较小时尤为突出。</p>
<h3 id="禁用磁盘高速缓存"><a href="#禁用磁盘高速缓存" class="headerlink" title="禁用磁盘高速缓存"></a>禁用磁盘高速缓存</h3><p>按照书上描述，使用<code>hdparm -W0</code>可以禁用磁盘上的高速缓存，但我没有实际试过。</p>
<h3 id="直接I-O"><a href="#直接I-O" class="headerlink" title="直接I/O"></a>直接I/O</h3><p>当以<code>O_DIRECT</code>方式<code>open</code>文件流时，数据流会绕过内核缓冲区高速缓存，从用户空间直接传入文件或磁盘，此类过程称为<strong>直接I/O</strong>。</p>
<p>使用直接I/O对I/O操作有诸多对齐限制，主要保证读取和写入时，偏移量、数据长度以及内存边界需要是块设备基本单元(通常为512字节)的整数倍，否则会导致<code>EINVAL</code>错误。</p>
<p>使用直接I/O时，可以结合<code>memalign</code>函数动态分配内存。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用<code>stdio</code>库函数可以利用该库实现的用户空间缓冲区减少系统调用；<code>read</code>，<code>write</code>等系统调用默认不与磁盘直接传递数据，而是经过文件I/O的内核缓冲区作为中转，以此减少磁盘操作。</p>
<p>通过<code>fflush</code>函数可以将<code>stdio</code>流的缓冲区数据刷新至内核缓冲区；通过<code>fsync</code>, <code>fdatasync</code>函数可以将内核缓冲区数据刷新至磁盘。</p>
<p>使用<code>setvbuf</code>, <code>setbuf</code>等函数可以设置<code>stdio</code>流的缓冲模式，甚至禁用缓冲；以<code>O_SYNC</code>方式打开文件，可以在立即将数据同步至磁盘文件。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>《Linux/UNIX系统编程手册》 第13章 文件I/O缓冲</li>
<li><a href="http://www.pixelbeat.org/programming/stdio_buffering/" target="_blank" rel="noopener">buffering in standard streams</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> stdio </tag>
            
            <tag> cache </tag>
            
            <tag> buffer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux指令 - tee的实现]]></title>
      <url>http://www.litreily.top/2018/09/27/tee/</url>
      <content type="html"><![CDATA[<p>近日学习<a href="https://book.douban.com/subject/25809330/" target="_blank" rel="noopener">《Linux/UNIX 系统编程手册》</a>一书，巩固了C语言中一些常用库函数的使用，主要涉及基本IO操作相关的库函数。为了加深理解，手动实现了Linux系统中的<code>tee</code>指令的功能。借此文记述实现过程。</p>
<h2 id="tee功能简述"><a href="#tee功能简述" class="headerlink" title="tee功能简述"></a>tee功能简述</h2><p><code>tee</code>类似于一个单输入双输出的三通管道，将标准输入的数据输出到指定文件和标准输出中。为实现这个指令，主要考虑以下几点：</p>
<ol>
<li>解析<code>tee</code>包含的命令行参数</li>
<li>读取标准输入数据，并将数据写入标准输出和指定文件</li>
<li>若未指定文件，则仅将数据输出到标准输出</li>
</ol>
<p>下面逐步分析每个要点的实现方法。</p>
<h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><p><code>tee</code>包含以下可选项，本文实现仅考虑<code>-a</code>,<code>--version</code>,<code>--help</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Usage: tee [OPTION]... [FILE]...</span><br><span class="line">Copy standard input to each FILE, and also to standard output.</span><br><span class="line"></span><br><span class="line">  -a, --append              append to the given FILEs, <span class="keyword">do</span> not overwrite</span><br><span class="line">  -i, --ignore-interrupts   ignore interrupt signals</span><br><span class="line">  -p                        diagnose errors writing to non pipes</span><br><span class="line">      --output-error[=MODE]   <span class="built_in">set</span> behavior on write error.  See MODE below</span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">      --version  output version information and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>为解析命令行的<strong>可选项</strong>，需要用到库函数<code>getopt</code>或<code>getopt_long</code>，前者仅支持短格式，后者支持长短格式。下面对使用这两个函数解析参数的方法进行对比。</p>
<h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><p><code>getopt</code>函数声明及相关参数如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind, opterr, optopt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>argc</code>: 与main函数的argc一致，代表参数个数</li>
<li><code>argv</code>: 与main函数的argv一致，代表参数值</li>
<li><code>optstring</code>: 可选项字符串，如<code>a:bc:d:</code>，参数后带冒号代表该选项需要给定参数值</li>
<li><code>optarg</code>: 存储可选项的参数值，如果不带参数则为NULL</li>
<li><code>optind</code>: 存储下一个可选参数的索引，每执行一次<code>getopt</code>就加1</li>
<li><code>opterr</code>: 错误提示标志，默认为1，当输入参数无效时，会给出提示</li>
<li><code>optopt</code>: 是对可选参数字符的一个备份，当输入的参数无效时可用</li>
</ul>
<p>下面使用<code>getopt</code>实现对选项<code>-a</code>的解析：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt(argc, argv, <span class="string">"a"</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">                    | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码结合<code>while</code>、 <code>switch</code>，使用<code>getopt</code>循环获取和分析可选项。当前只对一个可选项<code>a</code>进行了解析，当包含<code>-a</code>可选项时，flag_append设为1，之后根据该标志为文件的打开方式添加<code>O_APPEND</code>标志，后面读写数据时就会以附加的方式在文件尾部开始写入。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">    flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">    fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">            | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：  </p>
<ol>
<li>如果不带<code>-a</code>，程序默认会以<code>O_TRUNC</code>方式打开文件，表示截断，会以重写的方式覆盖原文件  </li>
<li><code>optind</code>小于<code>argc</code>时，说明除了可选参数之外，用户还输入了其它参数，这里对应的是<code>tee</code>指令所需的文件名称。此时argv[optind]刚好对应第一个非可选参数。</li>
</ol>
</blockquote>
<h3 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h3><p><code>getopt_long</code>定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br></pre></td></tr></table></figure>
<p>与<code>getopt</code>相比，多了两个参数<code>longopts</code>, <code>longindex</code></p>
<ul>
<li><code>longopts</code>: 长格式可选项，<code>option</code>结构体指针</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;       <span class="comment">// 名称，如"help"</span></span><br><span class="line">    <span class="keyword">int</span>         has_arg;    <span class="comment">// 带参标志，0 或 1</span></span><br><span class="line">    <span class="keyword">int</span>        *flag;       <span class="comment">// 常设为NULL，若非NULL,将会把val值存入flag</span></span><br><span class="line">    <span class="keyword">int</span>         val;        <span class="comment">// getopt_long的返回值或将存入flag的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当<code>flag</code>为NULL时，<code>getopt_long</code>返回<code>val</code>，否则返回0,并将<code>val</code>值存入<code>flag</code></p>
<ul>
<li><code>longindex</code>: 用于存储当前解析的长选项在<code>longopts</code>中的索引值(0,1,…)，通常设为<code>NULL</code></li>
</ul>
<p>下面使用<code>getopt_long</code>实现对选项<code>--help</code>，<code>--version</code>, <code>-a</code>的解析：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, <span class="string">":av"</span>,opts, <span class="literal">NULL</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                usage();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(VERSION<span class="string">"\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"tee: invaild option -- '%c'\n"</span></span><br><span class="line">                    <span class="string">"Try 'tee --help' for more infomation.\n"</span>, optopt);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">            | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码中，长格式选项数组如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">    &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以看到，当用户分别输入<code>--append</code>,<code>--help</code>,<code>--version</code>时，<code>getopt_long</code>分别返回<code>a</code>，<code>h</code>，<code>v</code>三个字符。</p>
<p>但注意<code>while((opt = getopt_long(argc, argv, &quot;:av&quot;,opts, NULL))!=-1)</code>只包含了<code>av</code>两个参数，所以当用户输入<code>-h</code>时，程序会认为是无效参数，也就是说<code>--help</code>在这里只支持长格式，而其它两个支持长短两种方式。</p>
<p>这也是指令的某些选项仅支持长格式的实现方法之一了，其它方法可参考函数<code>getopt_long_only</code></p>
<blockquote>
<p>说明：<br><code>:av</code>最前面的冒号可以起到<code>opterr=0</code>的效果，就是在参数无效时不给出默认提示</p>
</blockquote>
<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><a href="#getopt_long">getopt_long</a>提到的<code>--help</code>选项是绝大多数指令都会实现的，用于提供帮助信息，下面是<code>tee</code>的<code>--help</code>输出。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: tee [OPTION]... [FILE]\n"</span></span><br><span class="line">        <span class="string">"Copy standard input to each FILE, and also to standard output.\n\n"</span></span><br><span class="line">        <span class="string">"  -a, --append   append to the given FILEs, do not overwrite\n"</span></span><br><span class="line">        <span class="string">"  -v, --version  output version information and exit\n"</span></span><br><span class="line">        <span class="string">"      --help     display this help and exit\n"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于参数解析，说到底就是<code>getopt</code>或<code>getopt_long</code>的应用。以上提到的可选参数中，其实也就<code>-a</code>会影响后续写入文件的方式，其它两个长格式选项均用于打印信息，之后便直接退出了。</p>
<p>而非可选项也只考虑了一个待写入文件的文件名，暂不考虑同时多文件写入。</p>
<h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><p><code>tee</code>数据读写很简单，仅需不断读取标准输入(stdin)数据，然后写入标准输出(stdout)和文件中，直到无数据可读或遇到中断信号为止。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 512</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(read(STDIN_FILENO, &amp;ch, <span class="number">1</span>) &gt; <span class="number">0</span>)&#123; <span class="comment">// read from stdin</span></span><br><span class="line">        buffer[i++] = ch;</span><br><span class="line">        <span class="keyword">if</span>(ch = <span class="string">'\n'</span> || i == BUF_SIZE)&#123;</span><br><span class="line">            write(STDOUT_FILENO, buffer, i); <span class="comment">// output to stdout</span></span><br><span class="line">            <span class="keyword">if</span>(fd &gt; <span class="number">0</span>) write(fd, buffer, i);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code>分别对应标准输入和标准输出的文件描述符<code>0</code>, <code>1</code>。这两个加上标准错误输出<code>STDERR_FILENO</code>是所有应用程序默认打开的，所以无需手动<code>open</code>。</p>
<p>此外，输出函数<code>output</code>会判断传入的文件描述符是否有效，如果无效则不会写入文件，仅将数据输出至标准输出。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 512</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION <span class="meta-string">"litreily 1.0.0"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(read(STDIN_FILENO, &amp;ch, <span class="number">1</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        buffer[i++] = ch;</span><br><span class="line">        <span class="keyword">if</span>(ch = <span class="string">'\n'</span> || i == BUF_SIZE)&#123;</span><br><span class="line">            write(STDOUT_FILENO, buffer, i); <span class="comment">// output to stdout</span></span><br><span class="line">            <span class="keyword">if</span>(fd &gt; <span class="number">0</span>) write(fd, buffer, i);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: tee [OPTION]... [FILE]\n"</span></span><br><span class="line">        <span class="string">"Copy standard input to each FILE, and also to standard output.\n\n"</span></span><br><span class="line">        <span class="string">"  -a, --append   append to the given FILEs, do not overwrite\n"</span></span><br><span class="line">        <span class="string">"  -v, --version  output version information and exit\n"</span></span><br><span class="line">        <span class="string">"      --help     display this help and exit\n"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, <span class="string">":av"</span>,opts, <span class="literal">NULL</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                usage();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(VERSION<span class="string">"\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"tee: invaild option -- '%c'\n"</span></span><br><span class="line">                    <span class="string">"Try 'tee --help' for more infomation.\n"</span>, optopt);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指令测试"><a href="#指令测试" class="headerlink" title="指令测试"></a>指令测试</h2><p>使用<code>gcc</code>完成编译，得到<code>tee</code>可执行文件</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc tee.c -o tee</span><br></pre></td></tr></table></figure>
<p>下面对指令进行测试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ ./tee --<span class="built_in">help</span></span><br><span class="line">Usage: tee [OPTION]... [FILE]</span><br><span class="line">Copy standard input to each FILE, and also to standard output.</span><br><span class="line"></span><br><span class="line">  -a, --append   append to the given FILEs, <span class="keyword">do</span> not overwrite</span><br><span class="line">  -v, --version  output version information and <span class="built_in">exit</span></span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">$ ./tee --version</span><br><span class="line">litreily 1.0.0</span><br><span class="line">$ ./tee -h</span><br><span class="line">tee: invaild option -- <span class="string">'h'</span></span><br><span class="line">Try <span class="string">'tee --help'</span> <span class="keyword">for</span> more infomation.</span><br><span class="line">$ ./tee -v</span><br><span class="line">litreily 1.0.0</span><br><span class="line">$ ./tee -a -d</span><br><span class="line">tee: invaild option -- <span class="string">'d'</span></span><br><span class="line">Try <span class="string">'tee --help'</span> <span class="keyword">for</span> more infomation.</span><br><span class="line">$ ./tee test.txt</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">22</span><br><span class="line">$ cat test.txt</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">$ ./tee -a test.txt</span><br><span class="line">4444</span><br><span class="line">4444</span><br><span class="line">55555</span><br><span class="line">55555</span><br><span class="line">$ cat test.txt</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">4444</span><br><span class="line">55555</span><br><span class="line">$ ls | ./tee test.txt</span><br><span class="line">main.c</span><br><span class="line">Makefile</span><br><span class="line">README.md</span><br><span class="line">tee</span><br><span class="line">tee.c</span><br><span class="line">test.txt</span><br><span class="line">$ cat test.txt</span><br><span class="line">main.c</span><br><span class="line">Makefile</span><br><span class="line">README.md</span><br><span class="line">tee</span><br><span class="line">tee.c</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="http://man.linuxde.net/tee" target="_blank" rel="noopener">tee命令</a></li>
<li><a href="http://blog.zhangjikai.com/2016/03/05/%E3%80%90C%E3%80%91%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0--getopt%E5%92%8Cgetopt_long/" target="_blank" rel="noopener">解析命令行参数–getopt和getopt_long</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenWrt中使用gdb分析coredump]]></title>
      <url>http://www.litreily.top/2018/09/20/coredump/</url>
      <content type="html"><![CDATA[<p>近日调试一个<code>bug</code>，一个守护进程在特定情况下执行一段程序后便会挂掉。为了分析<code>bug</code>产生原因，本人使用了printf, strace追踪，gdb调试等诸多调试工具和测试方法。本文对于在<code>OpenWrt</code>嵌入式系统中启用<code>gdb</code>功能及其使用方法进行详细说明。</p>
<h2 id="调试背景"><a href="#调试背景" class="headerlink" title="调试背景"></a>调试背景</h2><p>我最先通过<code>strace</code>工具追踪发现进程是在收到<code>SIGABRT</code>信号后被<code>kill</code>的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pipe([<span class="number">8</span>, <span class="number">9</span>])                            = <span class="number">0</span></span><br><span class="line">fcntl64(<span class="number">8</span>, F_GETFL)                     = <span class="number">0</span> (flags O_RDONLY)</span><br><span class="line">ioctl(<span class="number">8</span>, SNDCTL_TMR_TIMEBASE <span class="keyword">or</span> TCGETS, <span class="number">0xbe90a454</span>) = <span class="number">-1</span> EINVAL (Invalid argument)</span><br><span class="line">rt_sigprocmask(SIG_UNBLOCK, [ABRT], <span class="literal">NULL</span>, <span class="number">8</span>) = <span class="number">0</span></span><br><span class="line">tgkill(<span class="number">14189</span>, <span class="number">14189</span>, SIGABRT)             = <span class="number">0</span></span><br><span class="line">--- SIGABRT (Aborted) @ <span class="number">0</span> (<span class="number">0</span>) ---</span><br><span class="line">Process <span class="number">14189</span> detached</span><br></pre></td></tr></table></figure>
<p>由以上信息可知，进程在执行某个管道<code>pipe</code>相关操作时被<code>kill</code>，通常是在执行<code>popen</code>函数会出现<code>pipe</code>调用。之后对源码<code>grep -rn popen</code>， 并结合<code>strace</code>打印的出错前的信息可以大致定位到可能出错的位置，然后通过添加<code>printf</code>打印<code>log</code>，根据重现时停止打印<code>log</code>的地方精确定位到源码出错位置。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.c</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">config_get</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">snprintf</span>(cmd, <span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>, <span class="string">"config get %s"</span>, name);</span><br><span class="line">    fp = popen(cmd, <span class="string">"r"</span>);   <span class="comment">// 出错位置</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，仅仅能判断出用户态的出错位置，但从此处代码尚无法明确出错的根本原因，还需抓取内核态的出错信息，此时便需要使用<code>GDB</code>对进程出错时系统生成的<code>coredump</code>文件进行分析了。</p>
<h2 id="编译gdb以及带symbols的程序"><a href="#编译gdb以及带symbols的程序" class="headerlink" title="编译gdb以及带symbols的程序"></a>编译gdb以及带symbols的程序</h2><p>在分析之前，需要被调试进程的二进制文件包含<code>GDB</code>分析所需的<code>symbols</code>，什么是<code>symbols</code>? 粗略的讲，就是一张嵌入待调试进程的二进制文件中的映射表，包含代码中的变量、函数名、行号等信息。详见<a href="https://www.tutorialspoint.com/gnu_debugger/gdb_debugging_symbols.htm" target="_blank" rel="noopener">GDB-Debugging Symbols</a></p>
<h3 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h3><p><code>OpenWrt</code>编译参数存于<code>.config</code>文件中，<code>OpenWrt</code>默认并未打开<code>gdb</code>功能以及<code>debug</code>调试功能，我们可以通过<code>make menuconfig</code>选择参数或者手动更改配置文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .config</span></span><br><span class="line">CONFIG_DEBUG=y <span class="comment"># 使能调试功能，启用后会给集成GDB调试所需的symbols</span></span><br><span class="line">CONFIG_NO_STRIP=y <span class="comment"># 禁用strip，防止程序代码被打乱</span></span><br><span class="line"><span class="comment">#CONFIG_USE_SSTRIP=y</span></span><br><span class="line">CONFIG_TOOLCHAINOPTS=y <span class="comment"># 使能交叉工具链可选功能，这是编译GDB功能的总开关</span></span><br></pre></td></tr></table></figure>
<p>配置完成后重新编译交叉工具链，用以得到<code>gdb</code>工具</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make toolchain/&#123;compile,install&#125; V=s</span><br></pre></td></tr></table></figure>
<h3 id="编译单个模块-package"><a href="#编译单个模块-package" class="headerlink" title="编译单个模块(package)"></a>编译单个模块(package)</h3><p>参考<code>OpenWrt</code>官方<a href="https://wiki.openwrt.org/doc/devel/gdb?s[]=gdb" target="_blank" rel="noopener">文档</a>，可以使用以下指令单独为一个模块添加<code>debug symbols</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make package/traffic_meter/&#123;clean,compile,install&#125; V=99 CONFIG_DEBUG=y</span><br></pre></td></tr></table></figure>
<h3 id="完整编译"><a href="#完整编译" class="headerlink" title="完整编译"></a>完整编译</h3><p>如果将全局<code>debug</code>开启，并进行完整编译，这会导致<code>image</code>过大（&gt;300M）而编译失败。当然啦，编译失败不要紧，因为只是没有生成<code>image</code>文件，但是所需模块和动态链接库都能正常编译完成，并不影响<code>coredump</code>文件的分析。</p>
<p>不过完整编译太过费时，不推荐，还是对需要调试的单个模块进行编译比较快捷和方便。</p>
<h2 id="获取coredump"><a href="#获取coredump" class="headerlink" title="获取coredump"></a>获取coredump</h2><p>得到了带有<code>symbols</code>的二进制文件，以及交叉编译得到的<code>gdb</code>调试工具，剩下的就是获取<code>coredump</code>文件</p>
<h3 id="配置coredump参数"><a href="#配置coredump参数" class="headerlink" title="配置coredump参数"></a>配置coredump参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/profile</span><br><span class="line"><span class="comment"># 在文件末尾添加以下指令，以取消对coredump文件大小的限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置coredump文件命名格式</span></span><br><span class="line"><span class="comment"># e - process name; p - pid; t - time</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"core-%e-%p-%t"</span> &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure>
<p>关于<code>coredump</code>文件格式的参数说明，可以参考<a href="http://man7.org/linux/man-pages/man5/core.5.html" target="_blank" rel="noopener">core dump file</a></p>
<h3 id="重现bug并获取coredump文件"><a href="#重现bug并获取coredump文件" class="headerlink" title="重现bug并获取coredump文件"></a>重现bug并获取coredump文件</h3><p>首先重现bug，然后找到<code>coredump</code>文件，并传至编译服务器</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line">$ find . -name <span class="string">"core-*"</span> |grep traffic_meter</span><br><span class="line">./sbin/core-traffic_meter-14189-2895</span><br><span class="line">$ <span class="built_in">cd</span> sbin</span><br><span class="line">$ tftp -pl core-traffic_meter-14189-2895 192.168.1.10</span><br></pre></td></tr></table></figure>
<h2 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>下面是常用的几个<code>gdb</code>指令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span></span><br><span class="line">(gdb) <span class="built_in">where</span></span><br><span class="line">(gdb) bt    <span class="comment"># backtrace</span></span><br><span class="line">(gdb) list  <span class="comment"># [l] 显示当前调试处的相关代码</span></span><br><span class="line">(gdb) up [num]  <span class="comment"># 向上跳转1个或num个bt</span></span><br><span class="line">(gdb) down [num]    <span class="comment"># 向下跳转1个或num个bt</span></span><br><span class="line">(gdb) <span class="built_in">print</span> [variable]  <span class="comment"># [p] 打印当前调试处相关变量的值</span></span><br></pre></td></tr></table></figure>
<h3 id="调试实例"><a href="#调试实例" class="headerlink" title="调试实例"></a>调试实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> repo.git</span><br><span class="line">$ <span class="built_in">cd</span> build_dir/target-arm_v7=a_uClibc-0.9.33.2_eabi/root-ipq806x</span><br><span class="line">$ ../../toolchain-arm_v7-a_gcc-4.6-linaro_uClibc-0.9.33.2_eabi/gdb-linaro-7.2-2011.03-0/gdb/gdb sbin/traffic_meter ~/core-traffic_meter-14189-28959-2895</span><br><span class="line">GNU gdb (Linaro GDB) 7.2-2011.03-0</span><br><span class="line">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"--host=x86_64-linux-gnu --target=arm-openwrt-linux-uclibcgnueabi"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/sbin/traffic_meter...done.</span><br><span class="line"></span><br><span class="line">warning: <span class="built_in">exec</span> file is newer than core file.</span><br><span class="line">[New Thread 14189]</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libgcc_s.so.1...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libgcc_s.so.1</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libc.so.0...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libc.so.0</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/ld-uClibc.so.0...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/ld-uClibc.so.0</span><br><span class="line">Core was generated by `traffic_meter -w brwan -p ppp0 -m /dev/mtd15`.</span><br><span class="line">Program terminated with signal 6, Aborted.</span><br><span class="line"><span class="comment">#0  0x402fb4fc in raise (sig=6) at libpthread/nptl/sysdeps/unix/sysv/linux/raise.c:67</span></span><br><span class="line">67        int res = INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  0x402fb4fc in raise (sig=6) at libpthread/nptl/sysdeps/unix/sysv/linux/raise.c:67</span></span><br><span class="line"><span class="comment">#1  0x402f579c in abort () at libc/stdlib/abort.c:89</span></span><br><span class="line"><span class="comment">#2  0x402f5060 in __malloc_consolidate (av=0x4030b3e8) at libc/stdlib/malloc-standard/free.c:234</span></span><br><span class="line"><span class="comment">#3  __malloc_consolidate (av=0x4030b3e8) at libc/stdlib/malloc-standard/free.c:170</span></span><br><span class="line"><span class="comment">#4  0x402f4854 in malloc (bytes=&lt;value optimized out&gt;) at libc/stdlib/malloc-standard/malloc.c:908</span></span><br><span class="line"><span class="comment">#5  0x402d6250 in _stdio_fopen (fname_or_mode=&lt;value optimized out&gt;, mode=&lt;value optimized out&gt;, stream=0x8ca0e8, filedes=8) at libc/stdio/_fopen.c:177</span></span><br><span class="line"><span class="comment">#6  0x402d4fb4 in popen (command=0x8 &lt;Address 0x8 out of bounds&gt;, modes=0xfc08 "r") at libc/stdio/popen.c:83</span></span><br><span class="line"><span class="comment">#7  0x0000f488 in config_get (name=&lt;value optimized out&gt;) at config.c:11</span></span><br><span class="line"><span class="comment">#8  0x0000ed48 in get_bogus_time_region (ct=60744, st=0xbe9f8994, btr=0xbe9f896c) at util.c:184</span></span><br><span class="line"><span class="comment">#9  0x0000e8f0 in get_traffic_from_flash (tfm=0xbe9f8738, ct=2894) at spi_flash.c:912</span></span><br><span class="line"><span class="comment">#10 0x0000ccb0 in restart_traffic_counter (tfm=0xbe9f8738, ct=52400) at trafficmeter.c:976</span></span><br><span class="line"><span class="comment">#11 0x0000a1f4 in main (argc=&lt;value optimized out&gt;, argv=&lt;value optimized out&gt;) at trafficmeter.c:1798</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>BackTrace (bt) 输出</strong>  </p>
<p>#num memory_addr in function (arg1=val1, arg2=val2,…) at file.c:line<br><code>bt</code>输出前面的编号是进程执行时的压栈顺序，编号越小越底层。编号后面紧跟的是内存地址，从地址大小可以看出哪些是内核调用，哪些是用户调用。  </p>
<p><strong>注意：</strong>由于编译器优化缘故，某些变量会显示<code>value optimized out</code>，如果想获取真实值，需要在编译时添加<code>-O0</code>，用以禁用编译器优化</p>
</blockquote>
<p>从<code>bt</code>结果可以看出，进程是在执行动态内存分配函数<code>malloc</code>时检测到错误，并执行<code>abort</code>函数触发<code>SIGABRT</code>信号后退出的。那就可以确定是内存问题，多半是内存多次释放或是未释放导致的。</p>
<p>据此线索，检查代码中与内存分配和释放相关的部分，最终调试发现是某处代码引用指针错误，并在之后使用<code>free</code>释放内存，而该指针指向的内存在多处地方被重新分配和释放，导致内存出现不可预料的问题。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在分析<code>coredump</code>时，需要注意以下几点：</p>
<ol>
<li>交叉编译后的<code>GDB</code>可执行文件位于<code>build_dir/toolchain-arm_v7-a_gcc-4.6-linaro_uClibc-0.9.33.2_eabi/gdb-linaro-7.2-2011.03-0/gdb/gdb</code></li>
<li>注意当前调试路径最好是在编译完成后的根目录<code>root-ipq806x</code>, 否则<code>GDB</code>可能无法找到动态链接库的位置，从而无法找到库函数的<code>symbols</code>，此时可能出现以下情况</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">warning: <span class="built_in">exec</span> file is newer than core file.</span><br><span class="line">[New Thread 14189]</span><br><span class="line"></span><br><span class="line">warning: Could not load shared library symbols <span class="keyword">for</span> 3 libraries, e.g. /lib/libgcc_s.so.1.</span><br><span class="line">Use the <span class="string">"info sharedlibrary"</span> <span class="built_in">command</span> to see the complete listing.</span><br><span class="line">Do you need <span class="string">"set solib-search-path"</span> or <span class="string">"set sysroot"</span>?</span><br><span class="line"></span><br><span class="line">warning: Unable to find dynamic linker breakpoint <span class="keyword">function</span>.</span><br><span class="line">GDB will be unable to debug shared library initializers</span><br><span class="line">and track explicitly loaded dynamic code.</span><br><span class="line">Core was generated by `traffic_meter -w brwan -p ppp0 -m /dev/mtd15`.</span><br><span class="line">Program terminated with signal 6, Aborted.</span><br><span class="line"><span class="comment">#0  0x402fb4fc in ?? ()</span></span><br><span class="line">Setting up the environment <span class="keyword">for</span> debugging gdb.</span><br><span class="line">Function <span class="string">"internal_error"</span> not defined.</span><br><span class="line">Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]</span><br><span class="line">Function <span class="string">"info_command"</span> not defined.</span><br><span class="line">Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]</span><br><span class="line">.gdbinit:8: Error <span class="keyword">in</span> sourced <span class="built_in">command</span> file:</span><br><span class="line">Argument required (one or more breakpoint numbers).</span><br><span class="line">(gdb) info sharedlibrary</span><br><span class="line">From        To          Syms Read   Shared Object Library</span><br><span class="line">                        No          /lib/libgcc_s.so.1</span><br><span class="line">                        No          /lib/libc.so.0</span><br><span class="line">                        No          /lib/ld-uClibc.so.0</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  0x402fb4fc in ?? ()</span></span><br><span class="line"><span class="comment">#1  0x402f579c in ?? ()</span></span><br><span class="line"><span class="comment">#2  0x402f579c in ?? ()</span></span><br><span class="line">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span><br></pre></td></tr></table></figure>
<p>若出现以上情况，我们得不到任何有效信息，此时可以通过提示的<code>set solib-search-path</code>或<code>set sysroot</code>手动设置库路径或根目录路径。但我仍建议在调试前<code>cd</code>到根目录。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://blog.51cto.com/terrytong914/1905041" target="_blank" rel="noopener">Linux coredump解决流程</a></li>
<li><a href="https://wiki.openwrt.org/doc/devel/gdb?s[]=gdb" target="_blank" rel="noopener">GNU Debugger</a></li>
<li><a href="https://www.tutorialspoint.com/gnu_debugger/gdb_debugging_symbols.htm" target="_blank" rel="noopener">GDB - Debugging Symbols</a></li>
<li><a href="http://man7.org/linux/man-pages/man5/core.5.html" target="_blank" rel="noopener">Core dump file</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页模板pug基本语法]]></title>
      <url>http://www.litreily.top/2018/08/31/pug-synax/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Pug – robust, elegant, feature rich template engine for Node.js</p>
</blockquote>
<p><code>pug</code>原名<code>jade</code>,因版权问题更名为<code>pug</code>,即哈巴狗。与<code>hexo</code>默认模块<code>ejs</code>一样，<code>pug</code>也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题<code>manupassant</code>也使用了<code>pug</code>。</p>
<a id="more"></a>
<p>本文针对<code>Hexo</code>中使用<code>pug</code>的情况为例，说明其基本语法。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common install</span></span><br><span class="line">npm install pug</span><br><span class="line"></span><br><span class="line"><span class="comment"># install for hexo blog</span></span><br><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>pug</code>不同于<code>html</code>，前者不需要标签的开和闭，如<code>html</code>的<code>&lt;p&gt;Demo&lt;/p&gt;</code>，在<code>pug</code>使用<code>p Demo</code>即可。</p>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p><code>pug</code>对空格敏感，有点类似<code>python</code>对制表符<code>tab</code>敏感。<code>pug</code>使用空格作为缩进符，当然用soft tab也可行。同一级标签需保证左对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure>
<p>渲染结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hellow, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, pug.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>pug</code>使用<code>//-</code>或<code>//</code>对代码进行注释，前者注释内容不出现在渲染后的<code>html</code>文件中，后者反之。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//- html中不包含此行</span><br><span class="line">// html中会包含此行</span><br></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>pug</code>将标签属性存放于括号<code>()</code>内，多个属性之间以逗号或空格分隔。此外，对于标签的<code>id</code>和<code>class</code>，<code>pug</code>使用<code>#</code>紧跟标签<code>id</code>,使用<code>.</code>紧跟标签<code>class</code>，可以同时设置多个<code>class</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1#title Test title</span><br><span class="line">img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</span><br></pre></td></tr></table></figure>
<p>↓</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>Test title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"class1 class2"</span> <span class="attr">src</span>=<span class="string">"/test.png"</span> <span class="attr">alt</span>=<span class="string">"test"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p>为了方便代码复用，<code>pug</code>提供了<code>include</code>包含功能，以下代码会将<code>_partial</code>目录下的<code>head.pug</code>文件内容包含到当前调用的位置。有点<code>C/C++</code>中内联函数的意思。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&apos;en&apos;)</span><br><span class="line">    include _partial/head.pug</span><br></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>下面是一个简单的<code>base</code>模板，通过<code>block</code>定义了页面头部<code>head</code>和内容<code>body</code>。块<code>block</code>有点类似<code>C/C++</code>的抽象函数，需要在继承者中完成定义，填充具体内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br></pre></td></tr></table></figure>
<p>以下文件使用<code>extends</code>继承以上模板，通过<code>block</code>覆盖或替换原有块<code>block</code>。当然，继承者也可以在原有基础上继续扩展。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//- index.pug</span><br><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block title</span><br><span class="line">    title &quot;Test title&quot;</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure>
<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p><code>pug</code>中通过<code>- var name = value</code>的形式定义变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- var intData = 100</span><br><span class="line">- var boolData = false</span><br><span class="line">- var stringData = &apos;Test&apos;</span><br><span class="line">p.int= intData</span><br><span class="line">p.bool= boolData</span><br><span class="line">p.stringData= stringData</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需注意的是，在引用变量时，需要在引用位置加上<code>=</code>号，否则会默认将变量名当成普通字符串使用。</p>
</blockquote>
<p>如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用<code>#{}</code>，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- var girl = &apos;Lily&apos;</span><br><span class="line">- var boy = &apos;Jack&apos;</span><br><span class="line">p #&#123;girl&#125; is so beautiful!</span><br><span class="line">p And #&#123;boy&#125; is handsome.</span><br></pre></td></tr></table></figure>
<h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><p><code>pug</code>的条件语句与其它语言类似，均是如下这般：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- var A = &#123;value: &apos;Test&apos;&#125;</span><br><span class="line">- var B = true</span><br><span class="line">if A.value</span><br><span class="line">    p= A.value</span><br><span class="line">else if B</span><br><span class="line">    p= B</span><br><span class="line">else</span><br><span class="line">    p nothing</span><br></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p><code>pug</code>中使用<code>each</code>和<code>while</code>实现循环迭代，<code>each</code>可以返回当前所在项的索引值，默认从0开始计数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//- each</span><br><span class="line">ol</span><br><span class="line">    each item in [&apos;Sun&apos;, &apos;Mon&apos;, &apos;Tus&apos;, &apos;Wen&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;]</span><br><span class="line">        li= item</span><br><span class="line"></span><br><span class="line">//- get index of each</span><br><span class="line">- var week = [&apos;Sun&apos;, &apos;Mon&apos;, &apos;Tus&apos;, &apos;Wen&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;]</span><br><span class="line">ol</span><br><span class="line">    each item, index in week</span><br><span class="line">        li= index + &apos;:&apos; + item</span><br></pre></td></tr></table></figure>
<p>↓</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>0:Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1:Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2:Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3:Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4:Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5:Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>6:Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>while</code>调用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//- while</span><br><span class="line">- var day = 1</span><br><span class="line">ul</span><br><span class="line">    while day &lt; 7</span><br><span class="line">        li= day++</span><br></pre></td></tr></table></figure>
<h3 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h3><p><code>mixin</code>名曰<strong>混入</strong>，类似其它编程语言中的<strong>函数</strong>，也是为了代码复用，可带参数或不带参数，定义方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin menu-item(href, name)</span><br><span class="line">    li</span><br><span class="line">        span.dot ●</span><br><span class="line">        a(href=href)= name</span><br></pre></td></tr></table></figure>
<p>其中，<code>menu-item</code>为调用时所用名称，可认为是函数名，<code>href</code>及<code>name</code>是参数。同上<a href="#定义变量">定义变量</a>所说，<code>a(href=href)= name</code>中第二个<code>=</code>是为了将后面的<code>name</code>当作参数来处理，而不是当作字符串”name”来处理。</p>
<p>调用<code>mixin</code>定义的代码块，需通过<code>+</code>号紧跟<code>mixin</code>名称及参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+menu-item(&apos;/Archives&apos;,&apos;Archives&apos;)</span><br><span class="line">+menu-item(&apos;/About&apos;,&apos;About&apos;)</span><br></pre></td></tr></table></figure>
<p><code>mixin</code>之所以称为混入，是因为其语法不局限于函数调用，在<code>mixin</code>可以使用块<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mixin print(post)</span><br><span class="line">    if block</span><br><span class="line">        block</span><br><span class="line">    else</span><br><span class="line">        p= post</span><br><span class="line"></span><br><span class="line">+print(&quot;no block&quot;)</span><br><span class="line">+print(&quot;&quot;)</span><br><span class="line">    div.box</span><br><span class="line">        p this is the content of block</span><br></pre></td></tr></table></figure>
<p>↓</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>no block<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is the content of block<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>注意以下<code>pug</code>语句中第一行的<code>.</code>号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script(type=&apos;text/javascript&apos;).</span><br><span class="line">    var data = &quot;Test&quot;</span><br><span class="line">    var enable = true</span><br><span class="line">    if enable</span><br><span class="line">        console.log(data)</span><br><span class="line">    else</span><br><span class="line">        console.log(&apos;nothing&apos;)</span><br></pre></td></tr></table></figure>
<p>↓</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">"Test"</span></span><br><span class="line">    <span class="keyword">var</span> enable = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> enable</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nothing'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于简单脚本，使用<code>pug</code>尚可，复杂的还是单独写到<code>.js</code>文件中，然后通过<code>pug</code>引用方便一些，引用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script(type=&apos;text/javascript&apos;, src=&apos;/path/to/js&apos;)</span><br><span class="line"></span><br><span class="line">//- with hexo function url_for</span><br><span class="line">script(type=&apos;text/javascript&apos;, src=url_for(theme.js) + &apos;/ready.js&apos;)</span><br></pre></td></tr></table></figure>
<h3 id="hexo-相关"><a href="#hexo-相关" class="headerlink" title="hexo 相关"></a>hexo 相关</h3><p>在<code>hexo</code>主题中使用<code>pug</code>时，可以通过使用<code>hexo</code>提供的全局变量<code>config</code>，<code>theme</code>来分别调用博客根目录下<code>_config.yml</code>文件中的参数以及主题根目录下<code>_config.yml</code>文件中的参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//- blog config</span><br><span class="line">p= config.description</span><br><span class="line"></span><br><span class="line">//- theme config</span><br><span class="line">p= theme.title</span><br></pre></td></tr></table></figure>
<p>当然，<code>pug</code>中可以直接使用<code>hexo</code>提供的其它全局变量及辅助函数，使用方法详见<code>hexo</code>的<a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">文档</a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//- head.pug</span><br><span class="line">head</span><br><span class="line">    meta(http-equiv=&apos;content-type&apos;, content=&apos;text/html; charset=utf-8&apos;)</span><br><span class="line">    meta(content=&apos;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&apos;, name=&apos;viewport&apos;)</span><br><span class="line">    meta(content=&apos;yes&apos;, name=&apos;apple-mobile-web-app-capable&apos;)</span><br><span class="line">    meta(content=&apos;black-translucent&apos;, name=&apos;apple-mobile-web-app-status-bar-style&apos;)</span><br><span class="line">    meta(content=&apos;telephone=no&apos;, name=&apos;format-detection&apos;)</span><br><span class="line">    meta(name=&apos;description&apos;, content=config.description)</span><br><span class="line">    block title</span><br><span class="line">    link(rel=&apos;stylesheet&apos;, type=&apos;text/css&apos;, href=url_for(theme.css) + &apos;/style.css&apos; + &apos;?v=&apos; + theme.version)</span><br><span class="line">    link(rel=&apos;Shortcut Icon&apos;, type=&apos;image/x-icon&apos;, href=url_for(&apos;favicon.png&apos;))</span><br><span class="line">    script(type=&apos;text/javascript&apos;, src=&apos;//cdn.bootcss.com/jquery/3.3.1/jquery.min.js&apos;)</span><br><span class="line">    block more</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">doctype html</span><br><span class="line">html(lang=&apos;en&apos;)</span><br><span class="line">    include _partial/head.pug</span><br><span class="line">    block more</span><br><span class="line">        link(rel=&apos;stylesheet&apos;, type=&apos;text/css&apos;, href=url_for(theme.plugins) + &apos;/prettify/doxy.css&apos;)</span><br><span class="line">        script(type=&apos;text/javascript&apos;, src=url_for(theme.js) + &apos;/ready.js&apos; + &apos;?v=&apos; + theme.version, async)</span><br><span class="line">    </span><br><span class="line">    //- body</span><br><span class="line">    body: #container.box</span><br><span class="line">        .h-wrapper</span><br><span class="line">            include _partial/nav-menu.pug</span><br><span class="line">        // article content</span><br><span class="line">        block content</span><br><span class="line"></span><br><span class="line">        include _partial/footer.pug</span><br></pre></td></tr></table></figure>
<p>其中:</p>
<ul>
<li><code>theme.*</code>为主题配置文件<code>_config.yml</code>中的参数</li>
<li><code>url_for</code>为<code>hexo</code>提供的用于查找资源路径的函数</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>pug</code>提供了包含，继承，Mixin等多种方式用于代码复用，语法简洁易懂，除了初学时需花费一些时间学习各种标点符号的含义外，其它倒也没有太大困难。</p>
<p>当然啦，<code>pug</code>还有许多其它特性，但就我目前使用情况而言，以上这些便已足够。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://pugjs.org/zh-cn/api/getting-started.html" target="_blank" rel="noopener">https://pugjs.org/zh-cn/api/getting-started.html</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
            <category> Template </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python实现快排及其可视化]]></title>
      <url>http://www.litreily.top/2018/07/07/quick-sort/</url>
      <content type="html"><![CDATA[<p>最近装了个<code>Anaconda</code>，准备学习一下数据可视化。本着三天打鱼两天装死的心态，重新抱起崭新的<strong>算法</strong>书，认真学起了快排算法。学完后用<code>Python</code>实现了一遍基本的快排，然后使用<code>matplotlib</code>进行动态绘图，最后使用<code>imageio</code>生成GIF图片。谨以此文以记之！</p>
<h2 id="快排基本原理"><a href="#快排基本原理" class="headerlink" title="快排基本原理"></a>快排基本原理</h2><p><strong>快排</strong>采用和归并排序相同的分而治之的思想，将待排序数组分成左右两个子数组，对两部分子数组独立排序。当子数组均有序时，整个数组也就有序了。</p>
<p>排序步骤如下：</p>
<ol>
<li>将原始数组<code>data</code>随机打乱，以消除对输入的依赖（本步可选）</li>
<li>选择数组的首个元素<code>data[0]</code>作为切分元素<code>v</code></li>
<li>切分数组<ul>
<li>从左往右找到第一个大于切分元素<code>v</code>的元素<code>data[i]</code></li>
<li>从右到左找到第一个小于切分元素<code>v</code>的元素<code>data[j]</code></li>
<li>交换<code>data[i]</code>与<code>data[j]</code></li>
<li>重复以上三步直到<code>i&gt;=j</code></li>
<li>交换<code>data[j]</code>与切分元素<code>data[0]</code></li>
</ul>
</li>
<li>递归调用，对切分后的左侧子数组进行排序</li>
<li>递归调用，对切分后的右侧子数组进行排序</li>
</ol>
<p>文字性的描述总是那么苍白无力，但还好也能说明一些问题。可以看出，快排的关键在于<strong>切分</strong>，切分后的数组应该满足：</p>
<ol>
<li>切分元素的位置（设为<code>j</code>）已经固定</li>
<li><code>data[lo]</code>到<code>data[j-1]</code>区间内的元素均不大于切分元素<code>data[j]</code></li>
<li><code>data[j+1]</code>到<code>data[hi]</code>区间内的元素均不小于切分元素<code>data[j]</code></li>
</ol>
<p>其中<code>data[lo]</code>代表数组或子数组的首个元素，<code>data[hi]</code>代表数组或子数组的末尾元素。</p>
<p>简单点说，就是先找一个参考点，把小于这个参考点的元素都扔到它的左边，大于这个参考点的数都扔到它的右边。这样一来，参考点的位置就固定了，然后对左边的数据和右边的数据各自再递归的扔几遍，等所有子数组都扔完了，整个数组也就有序了。</p>
<p>不过需要注意的是，扔的时候不是随便扔，是把从左往右找到的第一个大于参考点的值和从右往左找到的第一个小于参考点的值进行替换。</p>
<h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><blockquote>
<p>Talk is cheap, show me the code</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(data)</span>:</span></span><br><span class="line">    __sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    key = __partition(data, lo, hi)</span><br><span class="line">    __sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">    __sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    <span class="string">'''partition array'''</span></span><br><span class="line">    i = lo</span><br><span class="line">    j = hi</span><br><span class="line">    v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">            <span class="keyword">if</span> i == hi:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">        <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">            <span class="keyword">if</span> j == lo:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        __swap(data, i, j)</span><br><span class="line">    __swap(data, lo, j)</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>
<p>以上便是参考<code>Algorithms</code>书上<code>java</code>代码的<code>Python</code>实现。下面是个使用示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    random.shuffle(data)</span><br><span class="line">    print(data)</span><br><span class="line">    sort(data)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python quick.py</span><br><span class="line">[4, 9, 1, 13, 18, 5, 6, 14, 2, 16, 7, 12, 15, 8, 11, 17, 0, 19, 10, 3]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></pre></td></tr></table></figure>
<h2 id="快排优化"><a href="#快排优化" class="headerlink" title="快排优化"></a>快排优化</h2><p>快排有很多优化算法，目前我只习得一种最简单的，可以将切分函数两个内部<code>while</code>循环中的<code>if</code>语句去掉</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first one</span></span><br><span class="line"><span class="keyword">if</span> i == hi:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># second one</span></span><br><span class="line"><span class="keyword">if</span> j == lo:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>这两个判断都是为了防止访问数组越界而设，其实第二个是完全没有必要加的，因为<code>lo</code>对应的就是切分元素本身，自己肯定不会小于自己，所以这个判断完全是多余的；对于第一个，想要去掉的话，只要保证数组最后一个元素最大即可，实现上只要在执行排序函数之前将最大值换至最后即可。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__swap(data, data.index(max(data)), len(data) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>本文后续的<code>code</code>会将第二个判断去掉，但第一个的还保留着，毕竟把最大值直接挪到最后总感觉怪怪的，在可视化的时候也会牺牲一点随机性。</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>为了方便代码的阅读和管理,我将快排代码封装成<code>QuickSort</code>类,同时加入变量<code>swap_times</code>用于记录总的数据交换次数。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''Quick sort algorithm'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.swap_times = <span class="number">0</span></span><br><span class="line">        <span class="comment"># set the largest element to the end</span></span><br><span class="line">        <span class="comment"># self.__swap(data, data.index(max(data)), len(data) - 1)</span></span><br><span class="line">        self.__sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.swap_times</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">        self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        key = self.__partition(data, lo, hi)</span><br><span class="line">        self.__sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">        self.__sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="string">'''partition array'''</span></span><br><span class="line">        i = lo</span><br><span class="line">        j = hi</span><br><span class="line">        v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">                <span class="comment"># below judge can dropped if the end element is the largest</span></span><br><span class="line">                <span class="keyword">if</span> i == hi:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">            <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.__swap(data, i, j)</span><br><span class="line">        self.__swap(data, lo, j)</span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>
<h2 id="打印数据交换记录"><a href="#打印数据交换记录" class="headerlink" title="打印数据交换记录"></a>打印数据交换记录</h2><p>为了了解排序过程中数据交换,可以在<code>__swap</code>函数中打印每一次交换后的数组。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">    self.debug = debug</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">    data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">    self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.debug:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; swap(&#123;1&#125;, &#123;2&#125;)'</span>.format(data, lo, hi))</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    random.seed(time.time())</span><br><span class="line">    data = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    random.shuffle(data)</span><br><span class="line"></span><br><span class="line">    qs = QuickSort(debug=<span class="keyword">True</span>)</span><br><span class="line">    swap_times, = qs.sort(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  algorithm git:(master) ✗ ./main.py</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 18, 17, 7, 8, 13, 15, 0, 9, 16, 6, 5, 19] swap(4, 19)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 17, 7, 8, 13, 15, 0, 9, 16, 6, 18, 19] swap(8, 18)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 15, 0, 9, 16, 17, 18, 19] swap(9, 17)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 0, 15, 16, 17, 18, 19] swap(13, 15)</span><br><span class="line">[0, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(0, 14)</span><br><span class="line">[0, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(0, 0)</span><br><span class="line">[0, 3, 2, 10, 4, 1, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(2, 6)</span><br><span class="line">[0, 3, 2, 1, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(3, 5)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(1, 3)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(1, 1)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(4, 4)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 9, 12, 5, 6, 7, 8, 13, 11, 14, 15, 16, 17, 18, 19] swap(6, 13)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 9, 8, 5, 6, 7, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(7, 11)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 9, 8, 5, 6, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 10)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 6, 8, 5, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(6, 9)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(7, 8)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 7)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 5)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(8, 8)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19] swap(12, 13)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(11, 12)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(15, 15)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(16, 16)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(17, 17)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(18, 18)</span><br></pre></td></tr></table></figure>
<p>根据打印结果可以逐步分析快排算法的执行过程，明确知晓每一次交换的数据。</p>
<h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>打印log固然可以分析算法的执行流程，但是不够直观，所以想着用可视化工具进一步处理，以动态图片形式显示快排过程。为此，只需在交换数据的函数<code>__swap</code>中使用<code>matplotlib</code>的柱状图绘制交换完成后的数组即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.save_fig = save_fig</span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line">        <span class="comment"># open interactive mode of matplot</span></span><br><span class="line">        plt.ion()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            self.path = <span class="string">'./images/&#123;0&#125;'</span>.format(time.strftime(<span class="string">'%Y%m%d_%H%M%S'</span>))</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.__plot_figure(data, lo, hi, show_swap=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__plot_figure</span><span class="params">(self, data, lo=<span class="number">0</span>, hi=<span class="number">0</span>, show_swap=False)</span>:</span></span><br><span class="line">        <span class="string">'''plot and save figure'''</span></span><br><span class="line">        self.ax.clear()</span><br><span class="line">        self.ax.set_title(<span class="string">'data quicksort'</span>)</span><br><span class="line">        self.ax.bar(range(len(data)), data, label=<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">if</span> show_swap:</span><br><span class="line">            self.ax.bar([lo, hi], [data[lo], data[hi]], color=<span class="string">'red'</span>, label=<span class="string">'swap'</span>)</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.pause(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            plt.savefig(<span class="string">'&#123;0&#125;/&#123;1&#125;.png'</span>.format(self.path, self.swap_times))</span><br></pre></td></tr></table></figure>
<p>需要注意的几点是：</p>
<ol>
<li><code>matplotlib</code>具有两种绘图模式，阻塞(<code>block</code>)模式和交互(<code>interactive</code>)模式，阻塞模式必须等待当前绘图窗口关闭方才执行后续程序，而交互模式则无需等待。为了动态显示排序过程，自然选择交互模式，所以初始化时调用<code>ion()</code>函数打开交互模式</li>
<li>相比于其它样式的图表，使用柱状图<code>bar</code>能够更直观显示数据大小及变化过程</li>
<li>在每次重绘图表时，需要清空原有图表</li>
<li>必须调用<code>pause</code>函数予以等待，否则可能出现无法显示图表的情况，等待时长自定</li>
<li>为了突出显示每次交换的两个数据，可以使用红色图表单独绘制交换数据</li>
<li>使用<code>matplotlib</code>函数库中的<code>savefig</code>可以将图表为至本地图片文件，为后续生成<code>gif</code>图片做准备</li>
</ol>
<p><img src="/assets/algorithm/dataBar.png" alt="data bar"></p>
<h2 id="生成GIF动图"><a href="#生成GIF动图" class="headerlink" title="生成GIF动图"></a>生成GIF动图</h2><p>有了前面保存好的图片，使用<code>imageio</code>库的<code>append</code>函数及<code>mimsave</code>即可生成<code>gif</code>图片。图片间隔时间由<code>mimsave</code>函数的<code>duration</code>参数决定。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">from</span> quick_sort <span class="keyword">import</span> QuickSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_gif</span><span class="params">(path, gif_name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> len(os.listdir(path))==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> range(len(os.listdir(path))):</span><br><span class="line">        file_path = join(path, <span class="string">'&#123;&#125;.png'</span>.format(file_name))</span><br><span class="line">        images.append(imageio.imread(file_path))</span><br><span class="line">    imageio.mimsave(join(path, gif_name), images, <span class="string">'GIF'</span>, duration=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/assets/algorithm/quickSort.gif" alt="quick sort"></p>
<p>至此，便完成了快排的算法实现及其可视化。</p>
<h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><p>代码已上传至<a href="https://github.com/Litreily/Python-demos.git" target="_blank" rel="noopener">github Python-demos</a> <code>algorithm</code>目录</p>
<ul>
<li>quick_sort.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''Quick sort algorithm'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">        self.debug = debug</span><br><span class="line">        self.save_fig = save_fig</span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line">        plt.ion()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            self.path = <span class="string">'./images/&#123;0&#125;'</span>.format(time.strftime(<span class="string">'%Y%m%d_%H%M%S'</span>))</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.swap_times = <span class="number">0</span></span><br><span class="line">        self.__plot_figure(data)</span><br><span class="line">        <span class="comment"># set the largest element to the end</span></span><br><span class="line">        <span class="comment"># self.__swap(data, data.index(max(data)), len(data) - 1)</span></span><br><span class="line">        self.__sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.swap_times, self.path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">        self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            print(<span class="string">'\t&#123;0&#125; swap(&#123;1&#125;, &#123;2&#125;)'</span>.format(data, lo, hi))</span><br><span class="line">        </span><br><span class="line">        self.__plot_figure(data, lo, hi, show_swap=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__plot_figure</span><span class="params">(self, data, lo=<span class="number">0</span>, hi=<span class="number">0</span>, show_swap=False)</span>:</span></span><br><span class="line">        <span class="string">'''plot and save figure'''</span></span><br><span class="line">        self.ax.clear()</span><br><span class="line">        self.ax.set_title(<span class="string">'data quicksort'</span>)</span><br><span class="line">        self.ax.bar(range(len(data)), data, label=<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">if</span> show_swap:</span><br><span class="line">            self.ax.bar([lo, hi], [data[lo], data[hi]], color=<span class="string">'red'</span>, label=<span class="string">'swap'</span>)</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.pause(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            plt.savefig(<span class="string">'&#123;0&#125;/&#123;1&#125;.png'</span>.format(self.path, self.swap_times))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        key = self.__partition(data, lo, hi)</span><br><span class="line">        self.__sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">        self.__sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="string">'''partition array'''</span></span><br><span class="line">        i = lo</span><br><span class="line">        j = hi</span><br><span class="line">        v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">                <span class="comment"># below judge can dropped if the end element is the largest</span></span><br><span class="line">                <span class="keyword">if</span> i == hi:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">            <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.__swap(data, i, j)</span><br><span class="line">        self.__swap(data, lo, j)</span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>
<ul>
<li>main.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">from</span> quick_sort <span class="keyword">import</span> QuickSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_gif</span><span class="params">(path, gif_name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> len(os.listdir(path))==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> range(len(os.listdir(path))):</span><br><span class="line">        file_path = join(path, <span class="string">'&#123;&#125;.png'</span>.format(file_name))</span><br><span class="line">        images.append(imageio.imread(file_path))</span><br><span class="line">    imageio.mimsave(join(path, gif_name), images, <span class="string">'GIF'</span>, duration=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    random.seed(time.time())</span><br><span class="line">    random.shuffle(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'source: &#123;0&#125;'</span>.format(data))</span><br><span class="line">    start = time.time()</span><br><span class="line">    qs = QuickSort(debug=<span class="keyword">False</span>, save_fig=<span class="keyword">True</span>)</span><br><span class="line">    swap_times, fig_path = qs.sort(data)</span><br><span class="line">    save_gif(fig_path, <span class="string">'quick_sort.gif'</span>)</span><br><span class="line">    stop = time.time()</span><br><span class="line">    print(<span class="string">'result: &#123;0&#125;\n'</span>.format(data))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'----------------------------------'</span>)</span><br><span class="line">    print(<span class="string">'swap times: &#123;0&#125;'</span>.format(swap_times))</span><br><span class="line">    print(<span class="string">'spend time: &#123;0&#125;s'</span>.format(stop - start))</span><br><span class="line">    print(<span class="string">'image path: &#123;0&#125;'</span>.format(fig_path))</span><br><span class="line">    print(<span class="string">'----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> sort </tag>
            
            <tag> visualization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux常用配置说明]]></title>
      <url>http://www.litreily.top/2018/06/19/tmux-config/</url>
      <content type="html"><![CDATA[<p><code>tmux</code>作为<code>Linux</code>三大神器之一，结合<code>zsh</code>和<code>vim</code>堪称无敌，<code>tmux</code>作为分屏利器自有其强大之处，本文就其常用配置予以说明。</p>
<h2 id="安装tmux"><a href="#安装tmux" class="headerlink" title="安装tmux"></a>安装tmux</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install in ubuntu</span></span><br><span class="line">$ sudo apt-get install tmux</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Ctrl+B</code>: default keys of tmux <code>prefix</code></li>
<li><code>.tmux.conf</code>: config file of <code>tmux</code></li>
<li><code>tmux source-file .tmux.conf</code>: command to reload <code>.tmux.conf</code></li>
</ul>
<a id="more"></a>
<h2 id="禁止自动更新窗口名称"><a href="#禁止自动更新窗口名称" class="headerlink" title="禁止自动更新窗口名称"></a>禁止自动更新窗口名称</h2><p>默认情况下，<code>tmux</code>会根据当前目录及相关操作自动更改窗口名称，但通常情况下，我们是不需要其修改的，为此可以在配置文件中添加：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setw</span> <span class="bullet">-g</span> <span class="string">allow_rename</span> <span class="string">'off'</span></span><br></pre></td></tr></table></figure>
<h2 id="设置zsh作为默认shell"><a href="#设置zsh作为默认shell" class="headerlink" title="设置zsh作为默认shell"></a>设置zsh作为默认shell</h2><p>如果先安装的<code>tmux</code>, 后安装和配置<code>zsh</code>，那tmux有可能默认打开使用的是<code>bash</code>，此时可以使用以下配置指令予以更改：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set-option</span> <span class="bullet">-g</span> <span class="string">default-shell</span> <span class="string">/bin/zsh</span></span><br></pre></td></tr></table></figure>
<h2 id="设置vim作为默认编辑器"><a href="#设置vim作为默认编辑器" class="headerlink" title="设置vim作为默认编辑器"></a>设置vim作为默认编辑器</h2><p>在<code>tmux</code>的搜索模式<code>prefix+[</code>下，默认使用↑↓←→箭头作为移动按键，对于习惯于<code>vim</code>操作的我来讲，这显然很不方便，还好<code>tmux</code>提供了使用<code>vim</code>作为编辑器的选项，启用配置如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setw</span> <span class="bullet">-g</span> <span class="string">mode-keys</span> <span class="string">vi</span></span><br></pre></td></tr></table></figure>
<h2 id="解决配色问题"><a href="#解决配色问题" class="headerlink" title="解决配色问题"></a>解决配色问题</h2><p>在<code>tmux</code>中，有可能部分应用的配色与纯<code>shell</code>下不一致，尤其是<code>vim</code>，后来发现<code>htop</code>也存在这个问题。要解决很简单，在<code>tmux</code>配置中加上一句：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set</span> <span class="bullet">-g</span> <span class="string">default-terminal</span> <span class="string">"screen-256color"</span></span><br></pre></td></tr></table></figure>
<h2 id="存储-恢复tmux工作环境"><a href="#存储-恢复tmux工作环境" class="headerlink" title="存储/恢复tmux工作环境"></a>存储/恢复tmux工作环境</h2><p>如果在服务器上使用<code>tmux</code>，由于服务器基本不关机，所以不用考虑<code>tmux</code>环境会丢失。但是在个人电脑上使用的话，重启电脑后<code>tmux</code>环境就丢失了，如果每次重启都要重新配置一遍环境的话，那未免太浪费时间了。所以这里推荐个插件<a href="https://github.com/tmux-plugins/tmux-resurrect" target="_blank" rel="noopener">tmux-resurrect</a> </p>
<p><code>tmux-resurrect</code>可以对<code>tmux</code>环境进行保存和恢复，安装及配置如下：</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/.tmux</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-resurrect ~/.tmux/tmux-resurrect</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit .tmux.conf at the bottom</span></span><br><span class="line">$ vi ~/.tmux.conf</span><br><span class="line">run-shell ~/.tmux/tmux-resurrect/resurrect.tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># re source .tmux.conf</span></span><br><span class="line">$ tmux <span class="built_in">source</span>-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>
<p><code>tmux-resurrect</code>用法:</p>
<ul>
<li><code>prefix + Ctrl-s</code> - save</li>
<li><code>prefix + Ctrl-r</code> - restore</li>
</ul>
<p>插件<code>tmux-resurrect</code>还可以结合插件<code>tmux-continum</code>一起使用，<code>tmux-continum</code>可以自动定时存储环境，在开机后打开<code>tmux</code>时自动恢复环境，这就避免了人为存储和恢复的麻烦以及因忘记存储导致的环境丢失。<code>tmux-continum</code>的安装及配置如下:</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-continuum ~/.tmux/tmux-continum</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit .tmux.conf</span></span><br><span class="line">$ vi ~/.tmux.conf</span><br><span class="line"><span class="built_in">set</span> -g @continuum-restore <span class="string">'on'</span>  <span class="comment"># restore last saved env</span></span><br><span class="line"><span class="built_in">set</span> -g @continuum-save-interval <span class="string">'30'</span>  <span class="comment"># default is 15 minutes</span></span><br><span class="line">run-shell ~/.tmux/tmux-continum/continuum.tmux</span><br><span class="line"></span><br><span class="line">$ tmux <span class="built_in">source</span> ~/.tmux.conf</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：</p>
<ol>
<li>以上两个插件都是手动安装的，其实也可以使用<code>tmux</code>的插件管理器<a href="https://github.com/tmux-plugins/tpm" target="_blank" rel="noopener">tpm</a>进行安装，这里就不详述了。</li>
<li>以上插件要求<code>tmux</code>版本大等于<code>1.9</code></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://linuxtoy.org/archives/tmux-resurrect-and-continuum.html" target="_blank" rel="noopener">https://linuxtoy.org/archives/tmux-resurrect-and-continuum.html</a></li>
<li><a href="https://github.com/tmux/tmux" target="_blank" rel="noopener">https://github.com/tmux/tmux</a></li>
<li><a href="https://github.com/tmux-plugins/tpm" target="_blank" rel="noopener">https://github.com/tmux-plugins/tpm</a></li>
<li><a href="https://github.com/tmux-plugins/tmux-resurrect" target="_blank" rel="noopener">https://github.com/tmux-plugins/tmux-resurrect</a></li>
<li><a href="https://github.com/tmux-plugins/tmux-continuum" target="_blank" rel="noopener">https://github.com/tmux-plugins/tmux-continuum</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Openwrt中添加内核模块]]></title>
      <url>http://www.litreily.top/2018/05/30/openwrt-ko/</url>
      <content type="html"><![CDATA[<p>如果想要在<code>Openwrt</code>系统中添加一个内核模块，其实并不难，对着某个已有的内核模块，依葫芦画瓢嘛，不难。本文将介绍一个最最简单的</p>
<h2 id="sourcecode"><a href="#sourcecode" class="headerlink" title="sourcecode"></a>sourcecode</h2><p>path: <code>git_repo/package/kmod-demo/</code></p>
<p>下面是源码包含的所有文件，根级<code>Makefile</code>提供给内核编译器使用，<code>src</code>级<code>Makefile</code>用于编译<code>.ko</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">└── src</span><br><span class="line">    ├── demo.c</span><br><span class="line">    ├── Kconfig</span><br><span class="line">    └── Makefile</span><br></pre></td></tr></table></figure>
<h3 id="demo-c"><a href="#demo-c" class="headerlink" title="demo.c"></a>demo.c</h3><p>源码非常简单，在装载时打印<code>Hello World</code>，卸载时打印<code>Exit</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">"Exit\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"Guangtao.wu"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Kconfig"><a href="#Kconfig" class="headerlink" title="Kconfig"></a>Kconfig</h3><p>在<code>Kconfig</code>文件中添加一些编译相关的选项</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config DEMO</span><br><span class="line">    tristate "This is a Module_DEMO"</span><br><span class="line">    default n</span><br><span class="line">    help</span><br><span class="line">      This is a DEMO, for debugging kernel model.</span><br><span class="line">      If unsure, say N.</span><br></pre></td></tr></table></figure>
<ul>
<li><code>default</code> : 该选项的默认值<ul>
<li><code>n</code> 不编译</li>
<li><code>y</code> 编译到内核，启动时自动加载</li>
<li><code>m</code> 编译生成<code>.ko</code>模块，不自动加载，需使用<code>insmod</code>加载</li>
</ul>
</li>
</ul>
<h3 id="Root-Makefile"><a href="#Root-Makefile" class="headerlink" title="Root - Makefile"></a>Root - Makefile</h3><p>根级<code>Makefile</code>仿其它内核模块编写，注意替换名称<code>demo</code>，<code>SUBMENU</code>以及<code>TITLE</code>将显示在<code>make menuconfig</code>的交互界面中。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is free software, licensed under the GNU General Public License v2.</span></span><br><span class="line"><span class="comment"># See /LICENSE for more information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># $Id: Makefile 6565 2007-03-14 13:42:21Z nbd $</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(TOPDIR)</span>/rules.mk</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(INCLUDE_DIR)</span>/kernel.mk</span><br><span class="line"></span><br><span class="line">PKG_NAME:=demo</span><br><span class="line">PKG_RELEASE:=1</span><br><span class="line"></span><br><span class="line">PKG_BUILD_DIR:=<span class="variable">$(KERNEL_BUILD_DIR)</span>/<span class="variable">$(PKG_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(INCLUDE_DIR)</span>/package.mk</span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> KernelPackage/demo</span><br><span class="line">  SUBMENU:=Other modules</span><br><span class="line">  TITLE:=kernel demo </span><br><span class="line">  VERSION:=<span class="variable">$(LINUX_VERSION)</span>-<span class="variable">$(BOARD)</span>-<span class="variable">$(PKG_RELEASE)</span></span><br><span class="line">  FILES:= <span class="variable">$(PKG_BUILD_DIR)</span>/demo.<span class="variable">$(LINUX_KMOD_SUFFIX)</span></span><br><span class="line">  AUTOLOAD:=<span class="variable">$(<span class="built_in">call</span> AutoLoad,46,demo)</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Build/Prepare</span><br><span class="line">	mkdir -p <span class="variable">$(PKG_BUILD_DIR)</span></span><br><span class="line">	<span class="variable">$(CP)</span> ./src/* <span class="variable">$(PKG_BUILD_DIR)</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Build/Compile</span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="string">"<span class="variable">$(LINUX_DIR)</span>"</span> \</span><br><span class="line">		CROSS_COMPILE=<span class="string">"<span class="variable">$(TARGET_CROSS)</span>"</span> \</span><br><span class="line">		ARCH=<span class="string">"<span class="variable">$(LINUX_KARCH)</span>"</span> \</span><br><span class="line">		SUBDIRS=<span class="string">"<span class="variable">$(PKG_BUILD_DIR)</span>"</span> \</span><br><span class="line">		EXTRA_CFLAGS=<span class="string">"<span class="variable">$(BUILDFLAGS)</span>"</span> \</span><br><span class="line">		modules</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> KernelPackage/demo/install</span><br><span class="line">	<span class="variable">$(INSTALL_DIR)</span> $(1)/lib/network/</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> $(<span class="built_in">call</span> KernelPackage,demo)</span>)</span><br></pre></td></tr></table></figure>
<h3 id="src-Makefile"><a href="#src-Makefile" class="headerlink" title="src - Makefile"></a>src - Makefile</h3><p>源码的<code>Makefile</code>很简单，其实只要一行就够了，其中<code>CONFIG_&lt;module_name&gt;</code>需要在后续<code>.config</code>文件中配置，或者直接将<code>$(CONFIG_DEMO)</code>改为<code>y</code>或<code>m</code>即可。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj ?= .</span><br><span class="line"></span><br><span class="line">obj-<span class="variable">$(CONFIG_DEMO)</span> += demo.o</span><br></pre></td></tr></table></figure>
<h2 id="更新-config"><a href="#更新-config" class="headerlink" title="更新 .config"></a>更新 .config</h2><p>使用<code>make menuconfig</code>或者直接修改配置文件<code>.config</code>可以启用新添加的内核模块。</p>
<ol>
<li><code>make menuconfig</code>: 搜索<code>demo</code>将其选中然后保存退出</li>
<li>手动启用，修改<code>.config</code>，在<code>Others module</code>配置参数附近添加如下内容</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_KERNEL_kmod_demo=y</span><br></pre></td></tr></table></figure>
<h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>当源码和配置选项都准备好后，便可以编译安装了，单独安装需要整个<code>kernel</code>已经编译过一次，以保证交叉编译工具链能够正常使用。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make package/kmod-demo/compile V=s</span><br><span class="line">$ make package/kmod-demo/install V=s</span><br></pre></td></tr></table></figure>
<h2 id="insmod-rmmod"><a href="#insmod-rmmod" class="headerlink" title="insmod/rmmod"></a>insmod/rmmod</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insmod</span></span><br><span class="line">$ insmod demo.ko</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line"><span class="comment"># rmmod</span></span><br><span class="line">$ rmmod demo.ko</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure>
<p>look, <code>printk</code>的信息已经成功打印出来了！</p>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python网络爬虫4 - scrapy入门]]></title>
      <url>http://www.litreily.top/2018/05/27/scrapy-start/</url>
      <content type="html"><![CDATA[<p><code>scrapy</code>作为一款强大的爬虫框架，当然要好好学习一番，本文便是本人学习和使用<code>scrapy</code>过后的一个总结，内容比较基础，算是入门笔记吧，主要讲述<code>scrapy</code>的基本概念和使用方法。</p>
<h2 id="scrapy-framework"><a href="#scrapy-framework" class="headerlink" title="scrapy framework"></a>scrapy framework</h2><p>首先附上<code>scrapy</code>经典图如下：</p>
<p><img src="/assets/spider/scrapy/scrapy.jpg" alt="scrapy framework"></p>
<p><code>scrapy</code>框架包含以下几个部分</p>
<ol>
<li><code>Scrapy Engine</code> 引擎</li>
<li><code>Spiders</code> 爬虫</li>
<li><code>Scheduler</code> 调度器</li>
<li><code>Downloader</code> 下载器</li>
<li><code>Item Pipeline</code> 项目管道</li>
<li><code>Downloader Middlewares</code> 下载器中间件</li>
<li><code>Spider Middlewares</code> 爬虫中间件</li>
</ol>
<h3 id="spider-process"><a href="#spider-process" class="headerlink" title="spider process"></a>spider process</h3><p>其爬取过程简述如下：</p>
<ol>
<li>引擎从爬虫获取首个待爬取的链接<code>url</code>，并传递给调度器</li>
<li>调度器将链接存入队列</li>
<li>引擎向调度器请求要爬取的链接，并将请求得到的链接经下载器中间件传递给下载器</li>
<li>下载器从网上下载网页，下载后的网页经下载器中间件传递给引擎</li>
<li>引擎将网页经爬虫中间件传递给爬虫</li>
<li>爬虫对网页进行解析，将得到的<code>Items</code>和新的链接经爬虫中间件交给引擎</li>
<li>引擎将从爬虫得到的<code>Items</code>交给项目管道，将新的链接请求<code>requests</code>交给调度器</li>
<li>此后循环2~7步，直到没有待爬取的链接为止</li>
</ol>
<p>需要说明的是，项目管道(<code>Item Pipeline</code>)主要完成数据清洗，验证，持久化存储等工作；下载器中间件(<code>Downloader Middlewares</code>)作为下载器和引擎之间的的钩子(<code>hook</code>)，用于监听或修改下载请求或已下载的网页，比如修改请求包的头部信息等；爬虫中间件(<code>Spider Middlewares</code>)作为爬虫和引擎之间的钩子(<code>hook</code>)，用于处理爬虫的输入输出，即网页<code>response</code>和爬虫解析网页后得到的<code>Items</code>和<code>requests</code>。</p>
<h3 id="Items"><a href="#Items" class="headerlink" title="Items"></a>Items</h3><p>至于什么是<code>Items</code>，个人认为就是经爬虫解析后得到的一个数据单元，包含一组数据，比如爬取的是某网站的商品信息，那么每爬取一个网页可能会得到多组商品信息，每组信息包含商品名称，价格，生产日期，商品样式等，那我们便可以定义一组<code>Item</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Item</span><br><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Field</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    name = Field()</span><br><span class="line">    price = Field()</span><br><span class="line">    date = Field()</span><br><span class="line">    types = Field()</span><br></pre></td></tr></table></figure>
<p><code>Field()</code>实质就是一个字典<code>Dict()</code>类型的扩展，如上代码所示，一组<code>Item</code>对应一个商品信息，单个网页可能包含一个或多个商品，所有<code>Item</code>信息都需要在<code>Spider</code>中赋值，然后经引擎交给<code>Item Pipeline</code>。具体实现在后续博文的实例中会有体现，本文旨在简单记述<code>scrapy</code>的基本概念和使用方法。</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>with <code>pip</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>
<p>or <code>conda</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge scrapy</span><br></pre></td></tr></table></figure>
<p>基本指令如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\WorkSpace&gt;scrapy --help</span><br><span class="line">Scrapy <span class="number">1.5</span><span class="number">.0</span> - no active project</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  scrapy &lt;command&gt; [options] [args]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  bench         Run quick benchmark test</span><br><span class="line">  fetch         Fetch a URL using the Scrapy downloader</span><br><span class="line">  genspider     Generate <span class="keyword">new</span> spider using pre-defined templates</span><br><span class="line">  runspider     Run a self-contained spider (without creating a project)</span><br><span class="line">  settings      Get settings values</span><br><span class="line">  shell         Interactive scraping <span class="built_in">console</span></span><br><span class="line">  startproject  Create <span class="keyword">new</span> project</span><br><span class="line">  version       Print Scrapy version</span><br><span class="line">  view          Open URL <span class="keyword">in</span> browser, <span class="keyword">as</span> seen by Scrapy</span><br><span class="line"></span><br><span class="line">  [ more ]      More commands available when run <span class="keyword">from</span> project directory</span><br><span class="line"></span><br><span class="line">Use <span class="string">"scrapy &lt;command&gt; -h"</span> to see more info about a command</span><br></pre></td></tr></table></figure>
<p>如果需要使用虚拟环境，需要安装<code>virtualenv</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<h2 id="scrapy-startproject"><a href="#scrapy-startproject" class="headerlink" title="scrapy startproject"></a>scrapy startproject</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;project-name&gt; [project-dir]</span><br></pre></td></tr></table></figure>
<p>使用该指令可以生成一个新的<code>scrapy</code>项目，以<code>demo</code>为例</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy startproject demo</span><br><span class="line">...</span><br><span class="line">You can start your first spider with:</span><br><span class="line">    <span class="built_in">cd</span> demo</span><br><span class="line">    scrapy genspider example example.com</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> demo</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── demo</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── __pycache__</span><br><span class="line">└── scrapy.cfg</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br></pre></td></tr></table></figure>
<p>可以看到<code>startproject</code>自动生成了一些文件夹和文件，其中：</p>
<ol>
<li><code>scrapy.cfg</code>: 项目配置文件，一般不用修改</li>
<li><code>items.py</code>: 定义<code>items</code>的文件，例如上述的<code>GoodsItem</code></li>
<li><code>middlewares.py</code>: 中间件代码，默认包含下载器中间件和爬虫中间件</li>
<li><code>pipelines.py</code>: 项目管道，用于处理<code>spider</code>返回的<code>items</code>，包括清洗，验证，持久化等</li>
<li><code>settings.py</code>: 全局配置文件，包含各类全局变量</li>
<li><code>spiders</code>: 该文件夹用于存储所有的爬虫文件，注意一个项目可以包含多个爬虫</li>
<li><code>__init__.py</code>: 该文件指示当前文件夹属于一个<code>python</code>模块</li>
<li><code>__pycache__</code>: 存储解释器生成的<code>.pyc</code>文件（一种跨平台的字节码<code>byte code</code>），在<code>python2</code>中该类文件与<code>.py</code>保存在相同文件夹</li>
</ol>
<h2 id="scrapy-genspider"><a href="#scrapy-genspider" class="headerlink" title="scrapy genspider"></a>scrapy genspider</h2><p>项目生成以后，可以使用<code>scrapy genspider</code>指令自动生成一个爬虫文件，比如，如果要爬取<a href="www.huaban.com">花瓣网首页</a>，执行以下指令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> demo</span><br><span class="line">$ scrapy genspider huaban www.huaban.com</span><br></pre></td></tr></table></figure>
<p>默认生成的爬虫文件<code>huaban.py</code>如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuabanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'huaban'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.huaban.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.huaban.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<ul>
<li>爬虫类继承于<code>scrapy.Spider</code></li>
<li><code>name</code>是必须存在的参数，用以标识该爬虫</li>
<li><code>allowed_domains</code>指代允许爬虫爬取的域名，指定域名之外的链接将被丢弃</li>
<li><code>start_urls</code>存储爬虫的起始链接，该参数是列表类型，所以可以同时存储多个链接</li>
</ul>
<p>如果要自定义起始链接，也可以重写<code>scrapy.Spider</code>类的<code>start_requests</code>函数，此处不予细讲。</p>
<p><code>parse</code>函数是一个默认的回调函数，当下载器下载网页后，会调用该函数进行解析，<code>response</code>就是请求包的响应数据。至于网页内容的解析方法，<code>scrapy</code>内置了几种选择器(<code>Selector</code>)，包括<code>xpath</code>选择器、<code>CSS</code>选择器和正则匹配。下面是一些选择器的使用示例，方便大家更加直观的了解选择器的用法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xpath selector</span></span><br><span class="line">response.xpath(<span class="string">'//a'</span>)</span><br><span class="line">response.xpath(<span class="string">'./img'</span>).extract()</span><br><span class="line">response.xpath(<span class="string">'//*[@id="huaban"]'</span>).extract_first()</span><br><span class="line">repsonse.xpath(<span class="string">'//*[@id="Profile"]/div[1]/a[2]/text()'</span>).extract_first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># css selector</span></span><br><span class="line">response.css(<span class="string">'a'</span>).extract()</span><br><span class="line">response.css(<span class="string">'#Profile &gt; div.profile-basic'</span>).extract_first()</span><br><span class="line">response.css(<span class="string">'a[href="test.html"]::text'</span>).extract_first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># re selector</span></span><br><span class="line">response.xpath(<span class="string">'.'</span>).re(<span class="string">'id:\s*(\d+)'</span>)</span><br><span class="line">response.xpath(<span class="string">'//a/text()'</span>).re_first(<span class="string">'username: \s(.*)'</span>)</span><br></pre></td></tr></table></figure>
<p>需要说明的是，<code>response</code>不能直接调用<code>re</code>,<code>re_first</code>.</p>
<h2 id="scrapy-crawl"><a href="#scrapy-crawl" class="headerlink" title="scrapy crawl"></a>scrapy crawl</h2><p>假设爬虫编写完了，那就可以使用<code>scrapy crawl</code>指令开始执行爬取任务了。</p>
<p>当进入一个创建好的<code>scrapy</code>项目目录时，使用<code>scrapy -h</code>可以获得相比未创建之前更多的帮助信息，其中就包括用于启动爬虫任务的<code>scrapy crawl</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy -h</span><br><span class="line">Scrapy 1.5.0 - project: huaban</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  scrapy &lt;<span class="built_in">command</span>&gt; [options] [args]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  bench         Run quick benchmark <span class="built_in">test</span></span><br><span class="line">  check         Check spider contracts</span><br><span class="line">  crawl         Run a spider</span><br><span class="line">  edit          Edit spider</span><br><span class="line">  fetch         Fetch a URL using the Scrapy downloader</span><br><span class="line">  genspider     Generate new spider using pre-defined templates</span><br><span class="line">  list          List available spiders</span><br><span class="line">  parse         Parse URL (using its spider) and <span class="built_in">print</span> the results</span><br><span class="line">  runspider     Run a self-contained spider (without creating a project)</span><br><span class="line">  settings      Get settings values</span><br><span class="line">  shell         Interactive scraping console</span><br><span class="line">  startproject  Create new project</span><br><span class="line">  version       Print Scrapy version</span><br><span class="line">  view          Open URL <span class="keyword">in</span> browser, as seen by Scrapy</span><br><span class="line"></span><br><span class="line">Use <span class="string">"scrapy &lt;command&gt; -h"</span> to see more info about a <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl -h</span><br><span class="line">Usage</span><br><span class="line">=====</span><br><span class="line">  scrapy crawl [options] &lt;spider&gt;</span><br><span class="line"></span><br><span class="line">Run a spider</span><br><span class="line"></span><br><span class="line">Options</span><br><span class="line">=======</span><br><span class="line">--<span class="built_in">help</span>, -h              show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">-a NAME=VALUE           <span class="built_in">set</span> spider argument (may be repeated)</span><br><span class="line">--output=FILE, -o FILE  dump scraped items into FILE (use - <span class="keyword">for</span> stdout)</span><br><span class="line">--output-format=FORMAT, -t FORMAT</span><br><span class="line">                        format to use <span class="keyword">for</span> dumping items with -o</span><br><span class="line"></span><br><span class="line">Global Options</span><br><span class="line">--------------</span><br><span class="line">--logfile=FILE          <span class="built_in">log</span> file. <span class="keyword">if</span> omitted stderr will be used</span><br><span class="line">--loglevel=LEVEL, -L LEVEL</span><br><span class="line">                        <span class="built_in">log</span> level (default: DEBUG)</span><br><span class="line">--nolog                 <span class="built_in">disable</span> logging completely</span><br><span class="line">--profile=FILE          write python cProfile stats to FILE</span><br><span class="line">--pidfile=FILE          write process ID to FILE</span><br><span class="line">--<span class="built_in">set</span>=NAME=VALUE, -s NAME=VALUE</span><br><span class="line">                        <span class="built_in">set</span>/override setting (may be repeated)</span><br><span class="line">--pdb                   <span class="built_in">enable</span> pdb on failure</span><br></pre></td></tr></table></figure>
<p>从<code>scrapy crawl</code>的帮助信息可以看出，该指令包含很多可选参数，但必选参数只有一个，就是<code>spider</code>，即要执行的爬虫名称，对应每个爬虫的名称(<code>name</code>)。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl huaban</span><br></pre></td></tr></table></figure>
<p>至此，一个<code>scrapy</code>爬虫任务的创建和执行过程就介绍完了，至于实例，后续博客会陆续介绍。</p>
<h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><p>最后简要说明一下指令<code>scrapy shell</code>，这是一个交互式的<code>shell</code>,类似于命令行形式的<code>python</code>，当我们刚开始学习<code>scrapy</code>或者刚开始爬取某个陌生的站点时，可以使用它熟悉各种函数操作或者选择器的使用，用它来不断试错纠错，熟练掌握<code>scrapy</code>各种用法。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy shell www.huaban.com</span><br><span class="line">2018-05-29 23:58:49 [scrapy.utils.log] INFO: Scrapy 1.5.0 started (bot: scrapybot)</span><br><span class="line">2018-05-29 23:58:49 [scrapy.utils.log] INFO: Versions: lxml 4.2.1.0, libxml2 2.9.5, cssselect 1.0.3, parsel 1.4.0, w3lib 1.19.0, Twisted 17.9.0, Python 3.6.3 (v3.6.3:2c5fed8, Oct  3</span><br><span class="line">2017, 17:26:49) [MSC v.1900 32 bit (Intel)], pyOpenSSL 17.5.0 (OpenSSL 1.1.0h  27 Mar 2018), cryptography 2.2.2, Platform Windows-10-10.0.17134-SP0</span><br><span class="line">2018-05-29 23:58:49 [scrapy.crawler] INFO: Overridden settings: &#123;<span class="string">'DUPEFILTER_CLASS'</span>: <span class="string">'scrapy.dupefilters.BaseDupeFilter'</span>, <span class="string">'LOGSTATS_INTERVAL'</span>: 0&#125;</span><br><span class="line">2018-05-29 23:58:49 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">[<span class="string">'scrapy.extensions.corestats.CoreStats'</span>,</span><br><span class="line"> <span class="string">'scrapy.extensions.telnet.TelnetConsole'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled downloader middlewares:</span><br><span class="line">[<span class="string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.stats.DownloaderStats'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled spider middlewares:</span><br><span class="line">[<span class="string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled item pipelines:</span><br><span class="line">[]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2018-05-29 23:58:50 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-05-29 23:58:50 [scrapy.downloadermiddlewares.redirect] DEBUG: Redirecting (301) to &lt;GET http://huaban.com/&gt; from &lt;GET http://www.huaban.com&gt;</span><br><span class="line">2018-05-29 23:58:50 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://huaban.com/&gt; (referer: None)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x03385CB0&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET http://www.huaban.com&gt;</span><br><span class="line">[s]   response   &lt;200 http://huaban.com/&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x04CC4D10&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at 0x4fa6bf0&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect=True]) Fetch URL and update <span class="built_in">local</span> objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update <span class="built_in">local</span> objects</span><br><span class="line">[s]   shelp()           Shell <span class="built_in">help</span> (<span class="built_in">print</span> this <span class="built_in">help</span>)</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line">In [1]: view(response)</span><br><span class="line">Out[1]: True</span><br><span class="line"></span><br><span class="line">In [2]: response.xpath(<span class="string">'//a'</span>)</span><br><span class="line">Out[2]:</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a id="elevator" class="off" onclick="re'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="plus"&gt;&lt;/a&gt;'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a onclick="app.showUploadDialog();"&gt;添加采'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="add-board-item"&gt;添加画板&lt;i class="'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="/about/goodies/"&gt;安装采集工具&lt;i class'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="huaban_security_oauth" logo_si'</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [3]: response.xpath(<span class="string">'//a'</span>).extract()</span><br><span class="line">Out[3]:</span><br><span class="line">[<span class="string">'&lt;a id="elevator" class="off" onclick="return false;" title="回到顶部"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="plus"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a onclick="app.showUploadDialog();"&gt;添加采集&lt;i class="upload"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="add-board-item"&gt;添加画板&lt;i class="add-board"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a href="/about/goodies/"&gt;安装采集工具&lt;i class="goodies"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="huaban_security_oauth" logo_size="124x47" logo_type="realname" href="//www.anquan.org" rel="nofollow"&gt; &lt;script src="//static.anquan.org/static/outer/js/aq_auth.js"&gt;&lt;/script&gt; &lt;/a&gt;'</span>]</span><br><span class="line"></span><br><span class="line">In [4]: response.xpath(<span class="string">'//img'</span>)</span><br><span class="line">Out[4]: [&lt;Selector xpath=<span class="string">'//img'</span> data=<span class="string">'&lt;img src="https://d5nxst8fruw4z.cloudfro'</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [5]: response.xpath(<span class="string">'//a/text()'</span>)</span><br><span class="line">Out[5]:</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'添加采集'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'添加画板'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'安装采集工具'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">' '</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">' '</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [6]: response.xpath(<span class="string">'//a/text()'</span>).extract()</span><br><span class="line">Out[6]: [<span class="string">'添加采集'</span>, <span class="string">'添加画板'</span>, <span class="string">'安装采集工具'</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br><span class="line"></span><br><span class="line">In [7]: response.xpath(<span class="string">'//a/text()'</span>).extract_first()</span><br><span class="line">Out[7]: <span class="string">'添加采集'</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spider </tag>
            
            <tag> scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python网络爬虫3 - 生产者消费者模型爬取某金融网站数据]]></title>
      <url>http://www.litreily.top/2018/04/30/cfachina/</url>
      <content type="html"><![CDATA[<p>应一位金融圈的朋友所托，帮忙写个爬虫，帮他爬取<a href="http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo#" target="_blank" rel="noopener">中国期货行业协议</a>网站中所有金融机构的从业人员信息。网站数据的获取本身比较简单，但是为了学习一些新的爬虫方法和技巧，即本文要讲述的<strong>生产者消费者模型</strong>，我又学习了一下Python中队列库<code>queue</code>及线程库<code>Thread</code>的使用方法。</p>
<h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p>生产者消费者模型非常简单，相信大部分程序员都知道，就是一方作为生产者不断提供资源，另一方作为消费者不断消费资源。简单点说，就好比餐馆的厨师和顾客，厨师作为生产者不断制作美味的食物，而顾客作为消费者不断食用厨师提供的食物。此外，生产者与消费者之间可以是一对一、一对多、多对一和多对多的关系。</p>
<p>那么这个模型和爬虫有什么关系呢？其实，爬虫可以认为是一个生产者，它不断从网站爬取数据，爬取到的数据就是食物；而所得数据需要消费者进行数据清洗，把有用的数据吸收掉，把无用的数据丢弃。</p>
<p>在实践过程中，爬虫爬取和数据清洗分别对应一个<code>Thread</code>，两个线程之间通过顺序队列<code>queue</code>传递数据，数据传递过程就好比餐馆服务员从厨房把食物送到顾客餐桌上的过程。爬取线程负责爬取网站数据，并将原始数据存入队列，清洗线程从队列中按入队顺序读取原始数据并提取出有效数据。</p>
<p>以上便是对生产者消费者模型的简单介绍了，下面针对本次爬取任务予以详细说明。</p>
<h2 id="分析站点"><a href="#分析站点" class="headerlink" title="分析站点"></a>分析站点</h2><blockquote>
<p><a href="http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo" target="_blank" rel="noopener">http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo</a></p>
</blockquote>
<p><img src="/assets/spider/cfachina/home_page.png" alt="home page"></p>
<p>我们要爬取的数据是主页显示的表格中所有期货公司的<strong>从业人员信息</strong>，每个公司对应一个<strong>机构编号</strong>(<code>G01001~G01198</code>)。从上图可以看到有主页有分页，共8页。以<code>G01001</code>方正中期期货公司为例，点击该公司名称跳转至对应网页如下:</p>
<p><img src="/assets/spider/cfachina/personinfo.png" alt="personinfo"></p>
<p>从网址及网页内容可以提取出以下信息：</p>
<ol>
<li>网址<ul>
<li><a href="http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo" target="_blank" rel="noopener">http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo</a><ul>
<li><code>organid</code>: 机构编号，<code>+G01001+</code> ~ <code>+G01198+</code></li>
<li><code>currentPage</code>: 该机构从业人员信息当前页面编号</li>
<li><code>pageSize</code>: 每个页面显示的人员个数，默认20</li>
<li><code>selectType</code>: 固定为<code>personinfo</code></li>
</ul>
</li>
</ul>
</li>
<li>机构名称<code>mechanism_name</code>，在每页表格上方可以看到当前机构名称</li>
<li>从业人员信息，即每页的表格内容，也是我们要爬取的对象</li>
<li>该机构从业人员信息总页数<code>page_cnt</code></li>
</ol>
<p>我们最终爬取的数据可以按机构名称存储到对应的txt文件或excel文件中。</p>
<h3 id="获取机构名称"><a href="#获取机构名称" class="headerlink" title="获取机构名称"></a>获取机构名称</h3><p><img src="/assets/spider/cfachina/gst_title.png" alt="get mechanism name"></p>
<p>获取到某机构的任意从业信息页面后，使用<code>BeautifulSoup</code>可快速提取机构名称。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br></pre></td></tr></table></figure>
<p>那么有人可能会问，既然主页表格都已经包含了所有机构的编号和名称，为何还要多此一举的再获取一次呢？这是因为，我压根就不想爬主页的那些表格，直接根据机构编号的递增规律生成对应的网址即可，所以获取机构名称的任务就放在了爬取每个机构首个信息页面之后。</p>
<h3 id="获取机构信息对应的网页数量"><a href="#获取机构信息对应的网页数量" class="headerlink" title="获取机构信息对应的网页数量"></a>获取机构信息对应的网页数量</h3><p><img src="/assets/spider/cfachina/page_cnt.png" alt="get count of page"></p>
<p>每个机构的数据量是不等的，幸好每个页面都包含了当前页面数及总页面数。使用以下代码即可获取页码数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url_re = re.compile(<span class="string">'#currentPage.*\+.*\+\'(\d+)\''</span>)</span><br><span class="line">page_cnt = url_re.search(html).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>从每个机构首页获取页码数后，便可<code>for</code>循环修改网址参数中的<code>currentPage</code>，逐页获取机构信息。</p>
<h3 id="获取当前页面从业人员信息"><a href="#获取当前页面从业人员信息" class="headerlink" title="获取当前页面从业人员信息"></a>获取当前页面从业人员信息</h3><p><img src="/assets/spider/cfachina/personinfo_table.png" alt="get personinfo"></p>
<p>针对如上图所示的一个特定信息页时，人员信息被存放于一个表中，除了固定的表头信息外，人员信息均被包含在一个带有<code>id</code>的<code>tr</code>标签中，所以使用<code>BeautifulSoup</code>可以很容易提取出页面内所有人员信息。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>一般的想法当然是逐页爬取主页信息，然后获取每页所有机构对应的网页链接，进而继续爬取每个机构信息。</p>
<p>但是由于该网站的机构信息网址具有明显的规律，我们根据每个机构的编号便可直接得到每个机构每个信息页面的网址。所以具体爬取方案如下：</p>
<ol>
<li>将所有<strong>机构编号</strong>网址存入队列<code>url_queue</code></li>
<li>新建生产者线程<code>SpiderThread</code>完成抓取任务<ul>
<li>循环从队列<code>url_queue</code>中读取一个编号，生成机构首页网址，使用<code>requests</code>抓取之</li>
<li>从抓取结果中获取页码数量，若为0，则返回该线程第1步</li>
<li>循环爬取当前机构剩余页面</li>
<li>将页面信息存入队列<code>html_queue</code></li>
</ul>
</li>
<li>新建消费者线程<code>DatamineThread</code>完成数据清洗任务<ul>
<li>循环从队列<code>html_queue</code>中读取一组页面信息</li>
<li>使用<code>BeautifulSoup</code>提取页面中的从业人员信息</li>
<li>将信息以二维数组形式存储，最后交由数据存储类<code>Storage</code>存入本地文件</li>
</ul>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="生成者SpiderThread"><a href="#生成者SpiderThread" class="headerlink" title="生成者SpiderThread"></a>生成者<code>SpiderThread</code></h3><p>爬虫线程先从队列获取一个机构编号，生成机构首页网址并进行爬取，接着判断机构页面数量是否为0，如若不为0则继续获取机构名称，并根据页面数循环爬取剩余页面，将原始html数据以如下<code>dict</code>格式存入队列<code>html_queue</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'name': mechanismId_mechanismName,</span><br><span class="line">    'num': currentPage,</span><br><span class="line">    'content': html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>爬虫产生的数据队列<code>html_queue</code>将由数据清洗线程进行处理，下面是爬虫线程的主程序，整个线程代码请看后面的<a href="#源码">源码</a>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        mechanism_id = <span class="string">'G0'</span> + self.url_queue.get()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the first page's url</span></span><br><span class="line">        url = self.__get_url(mechanism_id, <span class="number">1</span>)</span><br><span class="line">        html = self.grab(url)</span><br><span class="line"></span><br><span class="line">        page_cnt = self.url_re.search(html.text).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> page_cnt == <span class="string">'0'</span>:</span><br><span class="line">            self.url_queue.task_done()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        soup = BeautifulSoup(html.text, <span class="string">'html.parser'</span>)</span><br><span class="line">        mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br><span class="line">        print(<span class="string">'\nGrab Thread: get %s - %s with %s pages\n'</span> % (mechanism_id, mechanism_name, page_cnt))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># put data into html_queue</span></span><br><span class="line">        self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:<span class="number">1</span>, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(page_cnt) + <span class="number">1</span>):</span><br><span class="line">            url = self.__get_url(mechanism_id, i)</span><br><span class="line">            html = self.grab(url)</span><br><span class="line">            self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:i, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">        </span><br><span class="line">        self.url_queue.task_done()</span><br></pre></td></tr></table></figure>
<h3 id="消费者DatamineThread"><a href="#消费者DatamineThread" class="headerlink" title="消费者DatamineThread"></a>消费者<code>DatamineThread</code></h3><p>数据清洗线程比较简单，就是从生产者提供的数据队列<code>html_queue</code>逐一提取<code>html</code>数据，然后从<code>html</code>数据中提取从业人员信息，以二维数组形式存储，最后交由存储模块<code>Storage</code>完成数据存储工作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatamineThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Parse data from html"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, html_queue, filetype)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.filetype = filetype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__datamine</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Get data from html content'''</span></span><br><span class="line">        soup = BeautifulSoup(data[<span class="string">'content'</span>].text, <span class="string">'html.parser'</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>):</span><br><span class="line">            items = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> info.find_all(<span class="string">'td'</span>):</span><br><span class="line">                items.append(item.get_text())</span><br><span class="line">            infos.append(items)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.html_queue.get()</span><br><span class="line">            print(<span class="string">'Datamine Thread: get %s_%d'</span> % (data[<span class="string">'name'</span>], data[<span class="string">'num'</span>]))</span><br><span class="line"></span><br><span class="line">            store = Storage(data[<span class="string">'name'</span>], self.filetype)</span><br><span class="line">            store.save(self.__datamine(data))</span><br><span class="line">            self.html_queue.task_done()</span><br></pre></td></tr></table></figure>
<h3 id="数据存储Storage"><a href="#数据存储Storage" class="headerlink" title="数据存储Storage"></a>数据存储<code>Storage</code></h3><p>我写了两类文件格式的存储函数，<code>write_txt</code>, <code>write_excel</code>，分别对应<code>txt</code>,<code>excel</code>文件。实际存储时由调用方确定文件格式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'.txt'</span>: self.write_txt,</span><br><span class="line">        <span class="string">'.xls'</span>: self.write_excel</span><br><span class="line">    &#125;.get(self.filetype)(data)</span><br></pre></td></tr></table></figure>
<h4 id="存入txt文件"><a href="#存入txt文件" class="headerlink" title="存入txt文件"></a>存入txt文件</h4><p>存入<code>txt</code>文件是比较简单的，就是以附加(<code>a</code>)形式打开文件，写入数据，关闭文件。其中，文件名称由调用方提供。写入数据时，每个人员信息占用一行，以制表符<code>\t</code>分隔。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_txt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">'''Write data to txt file'''</span></span><br><span class="line">    fid = open(self.path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># insert the header of table</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.getsize(self.path):</span><br><span class="line">        fid.write(<span class="string">'\t'</span>.join(self.table_header) + <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> data:</span><br><span class="line">        fid.write(<span class="string">'\t'</span>.join(info) + <span class="string">'\n'</span>)</span><br><span class="line">    fid.close()</span><br></pre></td></tr></table></figure>
<h4 id="存入Excel文件"><a href="#存入Excel文件" class="headerlink" title="存入Excel文件"></a>存入Excel文件</h4><p>存入<code>Excel</code>文件还是比较繁琐的，由于经验不多，选用的是<code>xlwt</code>, <code>xlrd</code>和<code>xlutils</code>库。说实话，这3个库真心不大好用，勉强完成任务而已。为什么这么说，且看：</p>
<ol>
<li>修改文件麻烦：<code>xlwt</code>只能写,<code>xlrd</code>只能读，需要<code>xlutils</code>的<code>copy</code>函数将<code>xlrd</code>读取的数据复制到内存，再用<code>xlwt</code>修改</li>
<li>只支持<code>.xls</code>文件：<code>.xlsx</code>经读写也会变成<code>.xls</code>格式</li>
<li>表格样式易变：只要重新写入文件，表格样式必然重置</li>
</ol>
<p>所以后续我肯定会再学学其它的<code>excel</code>库，当然，当前解决方案暂时还用这三个。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">'''write data to excel file'''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">        header_style = xlwt.easyxf(<span class="string">'font:name 楷体, color-index black, bold on'</span>)</span><br><span class="line">        wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        ws = wb.add_sheet(<span class="string">'Data'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># insert the header of table</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">            ws.write(<span class="number">0</span>, i, self.table_header[i], header_style)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rb = open_workbook(self.path)</span><br><span class="line">        wb = copy(rb)</span><br><span class="line">        ws = wb.get_sheet(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># write data</span></span><br><span class="line">    offset = len(ws.rows)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(data[<span class="number">0</span>])):</span><br><span class="line">            ws.write(offset + i, j, data[i][j])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When use xlutils.copy.copy function to copy data from exist .xls file,</span></span><br><span class="line">    <span class="comment"># it will loss the origin style, so we need overwrite the width of column,</span></span><br><span class="line">    <span class="comment"># maybe there some other good solution, but I have not found yet.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">        ws.col(i).width = <span class="number">256</span> * (<span class="number">10</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">15</span>)[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save to file</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            wb.save(self.path)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'&#123;0&#125; error: &#123;1&#125;'</span>.format(self.path, e.strerror))</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ol>
<li>一个文件对应一个机构的数据，需要多次读取和写入，所以需要计算文件写入时的行数偏移量<code>offset</code>，即当前文件已包含数据的行数</li>
<li>当被写入文件被人为打开时，会出现<code>PermissionError</code>异常，可以在捕获该异常然后提示错误信息，并定时等待直到文件被关闭。</li>
</ol>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>主函数用于创建和启动生产者线程和消费者线程，同时为生产者线程提供机构编号队列。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">url_queue = queue.Queue()</span><br><span class="line">html_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>, <span class="number">1199</span>):</span><br><span class="line">        url_queue.put(str(i))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a spider thread</span></span><br><span class="line">    st = SpiderThread(url_queue, html_queue)</span><br><span class="line">    st.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    st.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a datamine thread</span></span><br><span class="line">    dt = DatamineThread(html_queue, <span class="string">'.xls'</span>)</span><br><span class="line">    dt.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    dt.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait on the queue until everything has been processed</span></span><br><span class="line">    url_queue.join()</span><br><span class="line">    html_queue.join()</span><br></pre></td></tr></table></figure>
<p>从主函数可以看到，两个队列都调用了<code>join</code>函数，用于阻塞，直到对应队列为空为止。要注意的是，队列操作中，<strong>每个出队操作<code>queue.get()</code>需要对应一个<code>queue.task_done()</code>操作</strong>，否则会出现队列数据已全部处理完，但主线程仍在执行的情况。</p>
<p>至此，爬虫的主要代码便讲解完了，下面是完整源码。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># url format ↓</span></span><br><span class="line"><span class="comment"># http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo&amp;all=undefined</span></span><br><span class="line"><span class="comment"># organid: +G01001+, +G01002+, +G01003+, ...</span></span><br><span class="line"><span class="comment"># currentPage: 1, 2, 3, ...</span></span><br><span class="line"><span class="comment"># pageSize: 20(default)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Algorithm design:</span></span><br><span class="line"><span class="comment"># 2 threads with 2 queues</span></span><br><span class="line"><span class="comment"># Thread-1, get first page url, then get page_num and mechanism_name from first page</span></span><br><span class="line"><span class="comment"># Thread-2, parse html file and get data from it, then output data to local file</span></span><br><span class="line"><span class="comment"># url_queue data -&gt; 'url'  # first url of each mechanism</span></span><br><span class="line"><span class="comment"># html_queue data -&gt; &#123;'name':'mechanism_name', 'html':data&#125;</span></span><br><span class="line"></span><br><span class="line">url_queue = queue.Queue()</span><br><span class="line">html_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Threaded Url Grab"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url_queue, html_queue)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.page_size = <span class="number">20</span></span><br><span class="line">        self.url_re = re.compile(<span class="string">'#currentPage.*\+.*\+\'(\d+)\''</span>)</span><br><span class="line">        self.headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_url</span><span class="params">(self, mechanism_id, current_page)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+%s+&amp;currentPage=%d&amp;pageSize=%d&amp;selectType=personinfo&amp;all=undefined'</span> \</span><br><span class="line">        % (mechanism_id, current_page, self.page_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grab</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">'''Grab html of url from web'''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                html = requests.get(url, headers=self.headers, timeout=<span class="number">20</span>)</span><br><span class="line">                <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">                print(url + <span class="string">' Connection error, try again...'</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">                print(url + <span class="string">' Read timeout, try again...'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(str(e))</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Grab all htmls of mechanism one by one</span></span><br><span class="line"><span class="string">        Steps:</span></span><br><span class="line"><span class="string">            1. grab first page of each mechanism from url_queue</span></span><br><span class="line"><span class="string">            2. get number of pages and mechanism name from first page</span></span><br><span class="line"><span class="string">            3. grab all html file of each mechanism</span></span><br><span class="line"><span class="string">            4. push all html to html_queue</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            mechanism_id = <span class="string">'G0'</span> + self.url_queue.get()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># the first page's url</span></span><br><span class="line">            url = self.__get_url(mechanism_id, <span class="number">1</span>)</span><br><span class="line">            html = self.grab(url)</span><br><span class="line"></span><br><span class="line">            page_cnt = self.url_re.search(html.text).group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> page_cnt == <span class="string">'0'</span>:</span><br><span class="line">                self.url_queue.task_done()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            soup = BeautifulSoup(html.text, <span class="string">'html.parser'</span>)</span><br><span class="line">            mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br><span class="line">            print(<span class="string">'\nGrab Thread: get %s - %s with %s pages\n'</span> % (mechanism_id, mechanism_name, page_cnt))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># put data into html_queue</span></span><br><span class="line">            self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:<span class="number">1</span>, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(page_cnt) + <span class="number">1</span>):</span><br><span class="line">                url = self.__get_url(mechanism_id, i)</span><br><span class="line">                html = self.grab(url)</span><br><span class="line">                self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:i, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">            </span><br><span class="line">            self.url_queue.task_done()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatamineThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Parse data from html"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, html_queue, filetype)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.filetype = filetype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__datamine</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Get data from html content'''</span></span><br><span class="line">        soup = BeautifulSoup(data[<span class="string">'content'</span>].text, <span class="string">'html.parser'</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>):</span><br><span class="line">            items = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> info.find_all(<span class="string">'td'</span>):</span><br><span class="line">                items.append(item.get_text())</span><br><span class="line">            infos.append(items)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.html_queue.get()</span><br><span class="line">            print(<span class="string">'Datamine Thread: get %s_%d'</span> % (data[<span class="string">'name'</span>], data[<span class="string">'num'</span>]))</span><br><span class="line"></span><br><span class="line">            store = Storage(data[<span class="string">'name'</span>], self.filetype)</span><br><span class="line">            store.save(self.__datamine(data))</span><br><span class="line">            self.html_queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, filetype)</span>:</span></span><br><span class="line">        self.filetype = filetype</span><br><span class="line">        self.filename = filename + filetype</span><br><span class="line">        self.table_header = (<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'从业资格号'</span>, <span class="string">'投资咨询从业证书号'</span>, <span class="string">'任职部门'</span>, <span class="string">'职务'</span>, <span class="string">'任现职时间'</span>)</span><br><span class="line">        self.path = self.__get_path()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_path</span><span class="params">(self)</span>:</span></span><br><span class="line">        path = &#123;</span><br><span class="line">            <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Documents/python/cfachina'</span>,</span><br><span class="line">            <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Documents/python/cfachina'</span></span><br><span class="line">        &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (path, self.filename)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_txt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Write data to txt file'''</span></span><br><span class="line">        fid = open(self.path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># insert the header of table</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.getsize(self.path):</span><br><span class="line">            fid.write(<span class="string">'\t'</span>.join(self.table_header) + <span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> data:</span><br><span class="line">            fid.write(<span class="string">'\t'</span>.join(info) + <span class="string">'\n'</span>)</span><br><span class="line">        fid.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''write data to excel file'''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">            header_style = xlwt.easyxf(<span class="string">'font:name 楷体, color-index black, bold on'</span>)</span><br><span class="line">            wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            ws = wb.add_sheet(<span class="string">'Data'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># insert the header of table</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">                ws.write(<span class="number">0</span>, i, self.table_header[i], header_style)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rb = open_workbook(self.path)</span><br><span class="line">            wb = copy(rb)</span><br><span class="line">            ws = wb.get_sheet(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># write data</span></span><br><span class="line">        offset = len(ws.rows)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(data[<span class="number">0</span>])):</span><br><span class="line">                ws.write(offset + i, j, data[i][j])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># When use xlutils.copy.copy function to copy data from exist .xls file,</span></span><br><span class="line">        <span class="comment"># it will loss the origin style, so we need overwrite the width of column,</span></span><br><span class="line">        <span class="comment"># maybe there some other good solution, but I have not found yet.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">            ws.col(i).width = <span class="number">256</span> * (<span class="number">10</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">15</span>)[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># save to file</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                wb.save(self.path)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'&#123;0&#125; error: &#123;1&#125;'</span>.format(self.path, e.strerror))</span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Write data to local file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        According filetype to choose function to save data, filetype can be '.txt' </span></span><br><span class="line"><span class="string">        or '.xls', but '.txt' type is saved more faster then '.xls' type</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data: a 2d-list array that need be save</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'.txt'</span>: self.write_txt,</span><br><span class="line">            <span class="string">'.xls'</span>: self.write_excel</span><br><span class="line">        &#125;.get(self.filetype)(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>, <span class="number">1199</span>):</span><br><span class="line">        url_queue.put(str(i))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a spider thread</span></span><br><span class="line">    st = SpiderThread(url_queue, html_queue)</span><br><span class="line">    st.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    st.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a datamine thread</span></span><br><span class="line">    dt = DatamineThread(html_queue, <span class="string">'.xls'</span>)</span><br><span class="line">    dt.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    dt.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait on the queue until everything has been processed</span></span><br><span class="line">    url_queue.join()</span><br><span class="line">    html_queue.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/cfachina/spider.png" alt="spider"></p>
<p><img src="/assets/spider/cfachina/save_txt.png" alt="save to txt"></p>
<p><img src="/assets/spider/cfachina/save_xls.png" alt="save to excel"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul>
<li>测试发现，写入<code>txt</code>的速度明显高于写入<code>excel</code>的速度</li>
<li>如果将页面网址中的<code>pageSize</code>修改为<code>1000</code>或更大，则可以一次性获取某机构的所有从业人员信息，而不用逐页爬取，效率可以大大提高。</li>
<li>该爬虫已托管至<a href="https://github.com/Litreily/Python-demos" target="_blank" rel="noopener">github Python-demos</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spider </tag>
            
            <tag> queue </tag>
            
            <tag> xlwt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python网络爬虫2 - 爬取新浪微博用户图片]]></title>
      <url>http://www.litreily.top/2018/04/10/sina/</url>
      <content type="html"><![CDATA[<p>其实，新浪微博用户图片爬虫是我学习<code>python</code>以来写的第一个爬虫，只不过当时懒，后来爬完<code>Lofter</code>后觉得有必要总结一下，所以就有了第一篇爬虫博客。现在暂时闲下来了，准备把新浪的这个也补上。</p>
<p>言归正传，既然选择爬新浪微博，那当然是有需求的，这也是学习的主要动力之一，没错，就是美图。<code>sina</code>用户多数微博都是包含图片的，而且是组图居多，单个图片的较少。</p>
<p>为了避免侵权，本文以本人微博<a href="https://weibo.com/litreily" target="_blank" rel="noopener">litreily</a>为例说明整个爬取过程，虽然图片较少，质量较低，但爬取方案是绝对ok的，使用时只要换个用户ID就可以了。</p>
<h2 id="分析sina站点"><a href="#分析sina站点" class="headerlink" title="分析sina站点"></a>分析sina站点</h2><h3 id="获取用户ID"><a href="#获取用户ID" class="headerlink" title="获取用户ID"></a>获取用户ID</h3><p>在爬取前，我们需要知道的是每个用户都有一个用户名，而一个用户名又对应一个唯一的整型数字ID，类似于学生的学号，本人的是<code>2657006573</code>。至于怎么根据用户名去获取ID，有以下两种方法：</p>
<ol>
<li>进入待爬取用户主页，在浏览器网址栏中即可看到一串数据，那就是用户ID</li>
<li><code>Ctrl-U</code>查看待爬取用户的源码，搜索<code>&quot;uid</code>，注意是<strong>双引号</strong></li>
</ol>
<p>其实是可以在已知用户名的情况下通过爬虫自动获取到<code>uid</code>的，但是我当时初学<code>python</code>，并没有考虑充分，所以后面的源码是以用户ID作为输入参数的。</p>
<h3 id="图片存储参数解析"><a href="#图片存储参数解析" class="headerlink" title="图片存储参数解析"></a>图片存储参数解析</h3><p>用户所有的图片都被存放至这样的路径下，真的是<strong>所有图片</strong>哦！！！</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https:</span><span class="string">//weibo.cn/&#123;uid&#125;/profile?filter=&#123;filter_type&#125;&amp;page=&#123;page_num&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="attr">https:</span><span class="string">//weibo.cn/2657006573/profile?filter=0&amp;page=1</span></span><br><span class="line"><span class="attr">uid:</span> <span class="number">2657006573</span></span><br><span class="line"><span class="attr">filter_type:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">page_num:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>注意，是<code>weibo.cn</code>而不是<code>weibo.com</code>，至于我是怎么找到这个页面的，说实话，我也忘了。。。</p>
<p>链接中包含3个参数，<code>uid</code>, <code>filter_mode</code> 以及 <code>page_num</code>。其中，<code>uid</code>就是前面提及的用户ID，<code>page_num</code>也很好理解，就是分页的当前页数，从1开始增加，那么，这个<code>filter_mode</code>是什么呢？</p>
<p>不着急，我们先来看看页面↓</p>
<p><img src="/assets/spider/sina/filter_mode.png" alt="filter mode of pictures"></p>
<p>可以看到，滤波类型<code>filter_mode</code>指的就是筛选条件，一共三个：</p>
<ol>
<li>filter=0 全部微博（包含纯文本微博，转载微博）</li>
<li>filter=1 原创微博（包含纯文本微博）</li>
<li>filter=2 图片微博（必须含有图片，包含转载）</li>
</ol>
<p>我通常会选择<strong>原创</strong>，因为我并不希望爬取结果中包含转载微博中的图片。当然，大家依照自己的需要选择即可。</p>
<h3 id="图链解析"><a href="#图链解析" class="headerlink" title="图链解析"></a>图链解析</h3><p>好了，参数来源都知道了，我们回过头看看这个网页。页面是不是感觉就是个空架子？毫无css痕迹，没关系，新浪本来就没打算把这个页面主动呈现给用户。但对于爬虫而言，这却是极好的，为什么这么说？原因如下：</p>
<ol>
<li>图片齐全，没有遗漏，就是个可视化的数据库</li>
<li>样式少，页面简单，省流量，爬取快</li>
<li>静态网页，分页存储，所见即所得</li>
<li>源码包含了所有微博的<strong>首图</strong>和<strong>组图链接</strong></li>
</ol>
<p>这样的网页用来练手再合适不过。但要注意的是上面第4点，什么是<strong>首图</strong>和<strong>组图链接</strong>呢，很好理解。每篇博客可能包含多张图片，那就是<strong>组图</strong>，但该页面只显示博客的第一张图片，即所谓的<strong>首图</strong>，<strong>组图链接</strong>指向的是存储着该组图所有图片的网址。</p>
<p>由于本人微博没组图，所以此处以刘亦菲微博为例，说明单图及组图的图链格式</p>
<p><img src="/assets/spider/sina/pictures.png" alt="pictures"></p>
<p>图中的上面一篇微博只有一张图片，可以轻易获取到原图链接，注意是<strong>原图</strong>，因为我们在页面能看到的是缩略图，但要爬取的当然是<strong>原图</strong>啦。</p>
<p>图中下面的微博包含组图，在图片右侧的<code>Chrome</code>开发工具可以看到组图链接。</p>
<p><a href="https://weibo.cn/mblog/picAll/FCQefgeAr?rl=2" target="_blank" rel="noopener">https://weibo.cn/mblog/picAll/FCQefgeAr?rl=2</a> </p>
<p>打开组图链接，可以看到图片如下图所示：</p>
<p><img src="/assets/spider/sina/picture_url.png" alt="picture&#39;s url"></p>
<p>可以看到缩略图链接以及原图链接，然后我们点击<strong>原图</strong>看一下。</p>
<p><img src="/assets/spider/sina/picture_source.png" alt="picture&#39;s origin url"></p>
<p>可以发现，弹出页面的链接与上图显示的不同，但与上图中的缩略图链接极为相似。它们分别是：</p>
<ol>
<li>缩略图：<a href="http://ww1.sinaimg.cn/thumb180/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg" target="_blank" rel="noopener">http://ww1.sinaimg.cn/thumb180/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg</a></li>
<li>原图： <a href="http://wx1.sinaimg.cn/large/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg" target="_blank" rel="noopener">http://wx1.sinaimg.cn/large/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg</a></li>
</ol>
<p>可以看出，只是一个<code>thumb180</code>和<code>large</code>的区别。既然发现了规律，那就好办多了，我们只要知道缩略图的网址，就可以将域名后的第一级子域名替换成<code>large</code>就可以了，而不用获取<strong>原图</strong>链接再跳转一次。</p>
<p>而且，多次尝试可以发现组图链接及缩略图链接满足正则表达式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 组图链接：</span></span><br><span class="line">imglist_reg = <span class="string">r'href="(https://weibo.cn/mblog/picAll/.&#123;9&#125;\?rl=2)"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 缩略图</span></span><br><span class="line">img_reg = <span class="string">r'src="(http://w.&#123;2&#125;\.sinaimg.cn/(.&#123;6,8&#125;)/.&#123;32,33&#125;.(jpg|gif))"'</span></span><br></pre></td></tr></table></figure>
<p>到此，新浪微博的解析过程就结束了，图链的格式以及获取方式也都清楚了。下面就可以设计方案进行爬取了。</p>
<h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>根据解析结果，很容易制定出以下爬取方案：</p>
<ol>
<li>给定微博用户名<code>litreily</code></li>
<li>进入待爬取用户主页，即可从网址中获取<code>uid: 2657006573</code></li>
<li>获取本人登录微博后的<code>cookies</code>（请求报文需要用到<code>cookies</code>）</li>
<li>逐一爬取 <a href="https://weibo.cn/2657006573/profile?filter=0&amp;page={1,2,3,...}" target="_blank" rel="noopener">https://weibo.cn/2657006573/profile?filter=0&amp;page={1,2,3,...}</a> </li>
<li>解析每一页的源码，获取单图链接及组图链接，<ul>
<li>单图：直接获取该图缩略图链接；</li>
<li>组图：爬取组图链接，循环获取组图页面所有图片的缩略图链接</li>
</ul>
</li>
<li>循环将第5步获取到的图链替换为原图链接，并下载至本地</li>
<li>重复第4-6步，直至没有图片</li>
</ol>
<h3 id="获取cookies"><a href="#获取cookies" class="headerlink" title="获取cookies"></a>获取cookies</h3><p>针对以上方案，其中有几个重点内容，其一就是<code>cookies</code>的获取，我暂时还没学怎么自动获取<code>cookies</code>，所以目前是登录微博后手动获取的。</p>
<p><img src="/assets/spider/sina/cookies.png" alt="get cookies"></p>
<h3 id="下载网页"><a href="#下载网页" class="headerlink" title="下载网页"></a>下载网页</h3><p>下载网页用的是<code>python3</code>自带的<code>urllib</code>库，当时没学<code>requests</code>，以后可能也很少用<code>urllib</code>了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(url, headers = headers)</span><br><span class="line">        page = urllib.request.urlopen(req)</span><br><span class="line">        html = page.read().decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed"</span> % url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure>
<h3 id="获取存储路径"><a href="#获取存储路径" class="headerlink" title="获取存储路径"></a>获取存储路径</h3><p>由于我是在<code>win10</code>下编写的代码，但是个人比较喜欢用<code>bash</code>，所以图片的存储路径有以下两种格式，<code>_get_path</code>函数会自动判断当前操作系统的类型，然后选择相应的路径。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(uid)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/sina/'</span> + uid,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/sina/'</span> + uid</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure>
<p>幸好<code>windows</code>是兼容<code>linux</code>系统的斜杠符号的，不然程序中的相对路径替换还挺麻烦。</p>
<h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><p>由于选用的<code>urllib</code>库，所以下载图片就使用<code>urllib.request.urlretrieve</code>了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># image url of one page is saved in imgurls</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgurls:</span><br><span class="line">    imgurl = img[<span class="number">0</span>].replace(img[<span class="number">1</span>], <span class="string">'large'</span>)</span><br><span class="line">    num_imgs += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urllib.request.urlretrieve(imgurl, <span class="string">'&#123;&#125;/&#123;&#125;.&#123;&#125;'</span>.format(path, num_imgs, img[<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># display the raw url of images</span></span><br><span class="line">        print(<span class="string">'\t%d\t%s'</span> % (num_imgs, imgurl))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(str(e))</span><br><span class="line">        print(<span class="string">'\t%d\t%s failed'</span> % (num_imgs, imgurl))</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>其它细节详见源码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: litreily</span></span><br><span class="line"><span class="comment"># date: 2018.02.05</span></span><br><span class="line"><span class="string">"""Capture pictures from sina-weibo with user_id."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(uid)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/sina/'</span> + uid,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/sina/'</span> + uid</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(url, headers = headers)</span><br><span class="line">        page = urllib.request.urlopen(req)</span><br><span class="line">        html = page.read().decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed"</span> % url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(uid, headers, path)</span>:</span></span><br><span class="line">    filter_mode = <span class="number">1</span>      <span class="comment"># 0-all 1-original 2-pictures</span></span><br><span class="line">    num_pages = <span class="number">1</span></span><br><span class="line">    num_blogs = <span class="number">0</span></span><br><span class="line">    num_imgs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># regular expression of imgList and img</span></span><br><span class="line">    imglist_reg = <span class="string">r'href="(https://weibo.cn/mblog/picAll/.&#123;9&#125;\?rl=2)"'</span></span><br><span class="line">    imglist_pattern = re.compile(imglist_reg)</span><br><span class="line">    img_reg = <span class="string">r'src="(http://w.&#123;2&#125;\.sinaimg.cn/(.&#123;6,8&#125;)/.&#123;32,33&#125;.(jpg|gif))"'</span></span><br><span class="line">    img_pattern = re.compile(img_reg)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start capture picture of uid:'</span> + uid)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        url = <span class="string">'https://weibo.cn/%s/profile?filter=%s&amp;page=%d'</span> % (uid, filter_mode, num_pages)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. get html of each page url</span></span><br><span class="line">        html = _get_html(url, headers)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. parse the html and find all the imgList Url of each page</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># &lt;div class="c" id="M_G4gb5pY8t"&gt;&lt;div&gt;</span></span><br><span class="line">        blogs = soup.body.find_all(attrs=&#123;<span class="string">'id'</span>:re.compile(<span class="string">r'^M_'</span>)&#125;, recursive=<span class="keyword">False</span>)</span><br><span class="line">        num_blogs += len(blogs)</span><br><span class="line"></span><br><span class="line">        imgurls = []        </span><br><span class="line">        <span class="keyword">for</span> blog <span class="keyword">in</span> blogs:</span><br><span class="line">            blog = str(blog)</span><br><span class="line">            imglist_url = imglist_pattern.findall(blog)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> imglist_url:</span><br><span class="line">                <span class="comment"># 2.1 get img-url from blog that have only one pic</span></span><br><span class="line">                imgurls += img_pattern.findall(blog)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 2.2 get img-urls from blog that have group pics</span></span><br><span class="line">                html = _get_html(imglist_url[<span class="number">0</span>], headers)</span><br><span class="line">                imgurls += img_pattern.findall(html)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> imgurls:</span><br><span class="line">            print(<span class="string">'capture complete!'</span>)</span><br><span class="line">            print(<span class="string">'captured pages:%d, blogs:%d, imgs:%d'</span> % (num_pages, num_blogs, num_imgs))</span><br><span class="line">            print(<span class="string">'directory:'</span> + path)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. download all the imgs from each imgList</span></span><br><span class="line">        print(<span class="string">'PAGE %d with %d images'</span> % (num_pages, len(imgurls)))</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgurls:</span><br><span class="line">            imgurl = img[<span class="number">0</span>].replace(img[<span class="number">1</span>], <span class="string">'large'</span>)</span><br><span class="line">            num_imgs += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                urllib.request.urlretrieve(imgurl, <span class="string">'&#123;&#125;/&#123;&#125;.&#123;&#125;'</span>.format(path, num_imgs, img[<span class="number">2</span>]))</span><br><span class="line">                <span class="comment"># display the raw url of images</span></span><br><span class="line">                print(<span class="string">'\t%d\t%s'</span> % (num_imgs, imgurl))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(str(e))</span><br><span class="line">                print(<span class="string">'\t%d\t%s failed'</span> % (num_imgs, imgurl))</span><br><span class="line">        num_pages += <span class="number">1</span></span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># uids = ['2657006573','2173752092','3261134763','2174219060']</span></span><br><span class="line">    uid = <span class="string">'2657006573'</span></span><br><span class="line">    path = _get_path(uid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cookie is form the above url-&gt;network-&gt;request headers</span></span><br><span class="line">    cookies = <span class="string">''</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: cookies&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># capture imgs from sina</span></span><br><span class="line">    _capture_images(uid, headers, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>使用时记得修改<code>main</code>函数中的<code>cookies</code>和<code>uid</code>！</p>
<h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/sina/capturer_litreily.png" alt="capture litreily"></p>
<p><img src="/assets/spider/sina/capturer_litreily_end.png" alt="capture litreily end"></p>
<p><img src="/assets/spider/sina/captured_pictures.png" alt="captured pictures"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul>
<li>该爬虫已存放至开源项目<a href="https://github.com/Litreily/cfachina_spider" target="_blank" rel="noopener">capturer</a>，欢迎交流</li>
<li>由于是首个爬虫，所以许多地方有待改进，相对的<a href="http://www.litreily.top/2018/03/17/lofter/">LOFTER爬虫</a>就更娴熟写了</li>
<li>目前没有发现新浪微博有明显的反爬措施，但还是按需索取为好</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> spider </tag>
            
            <tag> sina </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python网络爬虫1 - 爬取网易LOFTER图片]]></title>
      <url>http://www.litreily.top/2018/03/17/lofter/</url>
      <content type="html"><![CDATA[<p><code>LOFTER</code>是网易出品的优质轻博客，灵感源于国外的<code>tumblr</code>，但比之更加文艺，更加本地化。本人非常喜欢<code>LOFTER</code>的UI设计，以及其中的优质用户和内容，似乎网易并不擅长推广，所以受众并不广泛。这都是题外话，本文主要记录作者近期学习<code>python3</code>并用之爬取<code>LOFTER</code>用户图片的过程和成果，与大家交流分享。</p>
<blockquote>
<p>本文将以本人<a href="http://litreily.lofter.com" target="_blank" rel="noopener">litreily</a>博客为例说明整个爬取过程</p>
</blockquote>
<h2 id="分析LOFTER站点"><a href="#分析LOFTER站点" class="headerlink" title="分析LOFTER站点"></a>分析LOFTER站点</h2><p>在爬取站点之前，首先需要分析站点的关键信息有哪些，如果给自己提问，可能会有以下问题：</p>
<ol>
<li>用户的主页网址格式是？</li>
<li>用户博客链接的格式是？</li>
<li>每篇博客内的图片链接的格式是？</li>
<li>不同用户的主页模板不同，是否可以按同样方法抓取博客信息？</li>
<li>用户的博客数量巨大，主页以什么方式分页？</li>
<li>有没有归档页面方便爬取（大多数网站都有归档页面）？</li>
</ol>
<p>当然，这些问题不是一下子就能想出来，可以在探索网页内容的过程逐步展开，并思考下一步该考虑的问题，下面针对各个问题对主页进行探索分析。</p>
<h3 id="主页信息"><a href="#主页信息" class="headerlink" title="主页信息"></a>主页信息</h3><blockquote>
<p>主页: http://[username].lofter.com</p>
</blockquote>
<p><img src="/assets/spider/lofter/litreily.png" alt="litreily"></p>
<p>从主页可以看到<a href="http://litreily.lofter.com/view" target="_blank" rel="noopener">归档</a>的链接，暂时不管。不同的用户，其主页所用模板不尽一致，<code>LOFTER</code>为提供了大量精美的主页模板，以满足不同用户的需求：</p>
<p><img src="/assets/spider/lofter/lofterTemplet.png" alt="lofter templet"></p>
<p>然而，正是因为所用模板不同，其网页内容格式也不同，这个从不同模板中图片的位置，大小，图片信息等就可以看出来。相同的资源，不同的展示方式，就好像同样一件艺术品，既可以摆放在玻璃框中，也可以悬挂在高空。</p>
<p>当然这不是本文重点，这里只是为了说明不同用户的主页信息展示不一样，会给爬虫爬取带来一定影响。</p>
<h3 id="分页信息"><a href="#分页信息" class="headerlink" title="分页信息"></a>分页信息</h3><p>点击主页尾部的下一页，可以跳转至下一页，除首页和末页外，都会有上一页和下一页的链接，这里就给了我们一个提示，我们可以先抓取首页信息，然后从中抓取到<strong>下一页</strong>的链接，然后不断获取<strong>下一页</strong>的博客信息。</p>
<p><img src="/assets/spider/lofter/pages.png" alt="pages"></p>
<p>或者更简单点，看网址栏中的网址格式:</p>
<blockquote>
<p>分页： <code>http://[username].lofter.com/?page=[pageNumber]&amp;t=[timeStamp]</code></p>
</blockquote>
<p>直接使用<code>for</code>循环修改<code>page</code>值，逐页爬取博客信息。这貌似是个不错的想法，好，假设这样可行，那我们来分析每一页的信息。</p>
<p><img src="/assets/spider/lofter/postLink.png" alt="post link"></p>
<p>如上图所示，首先找到博文永久链接<code>http://litreily.lofter.com/post/44fbca_1265bb3e</code></p>
<p>针对含有图片的某一篇博文，<strong>litreily</strong>所用模板中会出现两次博文链接（见图中红框标注的两处），倘若我们使用正则表达式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r'"http://.*lofter.com/post/[\w_]*"'</span>, html)</span><br></pre></td></tr></table></figure>
<p>将对每篇博文匹配出两个一样的链接，这可不是我们想要的，那咋整，匹配完再把重复的删了？不至于这么麻烦，细看两处链接前后信息，可以看到两处链接的<code>class</code>属性不一致，好办了，咱改改正则：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r'&lt;a class="img" href="(http://.*lofter.com/post/[\w_]*)"&gt;'</span>, html)</span><br></pre></td></tr></table></figure>
<p>好像可以了，这不就可以按页抓取博客链接，然后接着分析每篇博文信息不就好了么。我原本就想这么干，可是当我查看了不同用户的排版以及相应的链接信息后，整个人都不好了，一千个用户就是一千个哈姆雷特啊。如果你发现有统一解析所有用户模板信息的方法，那肯定是你看的模板不够多。</p>
<p>所以呢，这条路是走不通了，至少我没再往这条路上走。打道回府，只不过重头再来，路漫漫其修远兮，吾将上下而求索。</p>
<p>靠，说了半天，原来走不通，那你说个毛线！！！淡定淡定，都是文明人，后面的风景很远，额不是，，，是很美，请耐心等待…</p>
<h3 id="归档页信息"><a href="#归档页信息" class="headerlink" title="归档页信息"></a>归档页信息</h3><blockquote>
<p>归档页：<code>http://[username].lofter.com/view</code></p>
</blockquote>
<p>好了，还记得前面说的<strong>归档</strong>吧，归档可是个好东西，它把所有博文都按日期归档，最主要的是，所有用户的归档页面都是同一个模板，不管大V小v还是普通老百姓，真的是一视同仁。剩下的问题就是<strong>如何从归档页抓取每篇博客的真实路径</strong>。</p>
<p><img src="/assets/spider/lofter/archive.png" alt="archive"></p>
<p>先来看看归档页面的结构吧，博客按月份归档，每篇博客仅显示首张图片缩略图或纯文本。然后<code>F12</code>打开调试工具，如下图所示，每个月份对应一个<code>&lt;div class=&quot;m-filecnt m-filecnt-1&quot;&gt;</code>这样的节点，每个月份节点包含了本月所有博客的入口信息，一篇博客对应一个<code>id</code>号，以及一个博客的<strong>相对路径</strong>。<code>id</code>神马的不用关心，重点就是这个<strong>相对路径</strong>，有了它不就有了博客的绝对路径了么。</p>
<ul>
<li>相对路径：”/post/44fbca_1265bb3e”</li>
<li>绝对路径：”http://[username].lofter.com/post/44fbca_1265bb3e”</li>
</ul>
<p><img src="/assets/spider/lofter/archive_html.png" alt="archive structure"></p>
<p>这样看来，那岂不是只要抓取这一个归档页面就可以抓到所有的博客路径了呢？呵呵，真的这么容易吗？显然不大可能，当我们下拉页面时，归档信息将动态加载刷新，没错，是动态的！！！意料之中的猝不及防</p>
<p>接着我在Chrome浏览器中<code>Ctrl+U</code>看了看网页的源码（太长这就不放图了），果然不出所料，动态数据在源码中是木有的，只有一个脚本在那静静的躺着，躺着，躺着。。。难道就要放弃了吗，当然不！<strong>只要是网络通信，就必然有请求包和响应包</strong></p>
<p>那现在的问题就是，动态网页的数据是如果获取到的？动态数据的<strong>真实请求</strong>是什么？抓包看看呗，打开浏览器调试工具中的<code>Network</code>，刷新归档页，看看页面加载过程，找到真实请求，这个很好找，这类请求的后缀一般不会是png,jpg,gif,js,css等，而且多半是<strong>POST</strong>包，并且会出现在一堆图片请求的前面。</p>
<p><img src="/assets/spider/lofter/post.png" alt="post"></p>
<p>好了，找到了，就是上面这货。现在归档数据请求的链接有了，确实是<strong>POST</strong>包，同样，请求包的头部信息<code>headers</code>和请求参数<code>request payload</code>也有了。</p>
<p><img src="/assets/spider/lofter/post_values.png" alt="request values"></p>
<p>现在的关键问题是，这些请求包中的参数都是干嘛的？经我多方尝试、猜测与观察，总结如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">callCount=1       # 固定</span><br><span class="line">scriptSessionId=$&#123;scriptSessionId&#125;187   # 固定</span><br><span class="line">httpSessionId=    # 固定</span><br><span class="line">c0-scriptName=ArchiveBean       # 固定</span><br><span class="line">c0-methodName=getArchivePostByTime      # 固定</span><br><span class="line">c0-id=0           # 固定</span><br><span class="line">c0-param0=number:4520906        # 用户ID，可从用户主页源码获取</span><br><span class="line">c0-param1=number:1521342313224  # 时间戳，最最最关键参数！</span><br><span class="line">c0-param2=number:50       # 单次请求博客篇数，可以按需求修改</span><br><span class="line">c0-param3=boolean:false   # 固定</span><br><span class="line">batchId=822456            # 6位随机数，爬取时可以固定</span><br></pre></td></tr></table></figure>
<p>所以我们模拟请求包的时候就按这个来就可以了，至于时间戳怎么获取，请求包的<code>headers</code>如何确定，后面会有详述。</p>
<p>下面我们来看看请求后得到的响应包长啥样，look，就下面这个，看到没，<strong><code>permalink</code></strong>, 千呼万唤始出来啊，这不就是我们想要的博客固定路径了么。响应包并不是<code>html</code>文件，而是一组数据，我觉着归档页包含的那个脚本就是根据这个数据文件进而请求首张图片信息或文本信息的，当然这是我的猜测了，有兴趣的可以去看看那个脚本。</p>
<p><img src="/assets/spider/lofter/post_response.png" alt="post response"></p>
<p>有了这组数据，咱就可以获取每次请求得到的博客路径列表，进而逐一爬取博客内的图片链接了。</p>
<p>到此处为止，归档页的信息就分析完了，我们已经知道该发送怎样的请求包去获取归档数据，与此同时，我们也知道了从归档页如何获取每篇博客的真实路径。</p>
<p>下面就来看看当我们知道博客路径并抓取后，该如何获取每篇博客正文内的图片链接。</p>
<h3 id="博客页信息"><a href="#博客页信息" class="headerlink" title="博客页信息"></a>博客页信息</h3><blockquote>
<p>博客： <code>http://[username].lofter.com/post/******_********</code></p>
</blockquote>
<p>以上面获取的博客 <a href="http://litreily.lofter.com/post/33a459_1230cb50" target="_blank" rel="noopener">http://litreily.lofter.com/post/33a459_1230cb50</a> 为例，大部分博客内的图片都不止一张，这也是必须访问博客页本身的主要原因，好了照旧查看页面元素。</p>
<p><img src="/assets/spider/lofter/blog_pic.png" alt="blog pictures"></p>
<p>可以发现每篇博客内所有图片的大图链接都是上图框选中这样的，都有着同样的属性<code>bigimgsrc</code>，并且是博客页面唯一的。由于每篇博客源码内包含了该篇博客所有的图片链接，所以当我们获取了某篇博客的<code>html</code>文件后，便可以使用正则表达式获取所有图片链接。</p>
<p>至此，我们已经掌握了爬取<code>lofter</code>单用户博客图片所需的所有信息，是时候确定爬取方案了。</p>
<h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>首先，根据给定的<code>username</code>获取<code>uid</code>作为<code>POST</code>请求包数据中的一分子；然后，循环执行以下步骤直至全部爬取完成</p>
<ol>
<li>生成或更新归档页请求数据</li>
<li>模拟归档页面发送POST请求</li>
<li>解析响应数据并获取博客链接</li>
<li>逐一爬取博客内容</li>
<li>解析博客内容并获取图片链接</li>
<li>逐一下载图片至本地</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>方案确定好了，那就撸起袖子加油干吧！</p>
<h3 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h3><ul>
<li>requests</li>
</ul>
<p>Only one! 没错，依赖的第三方库就这一个，怎么装咱这就不说了</p>
<h3 id="获取用户ID"><a href="#获取用户ID" class="headerlink" title="获取用户ID"></a>获取用户ID</h3><p>用户ID，确切的说是用户博客的唯一ID，是归档页请求报文中的参数之一，通过查看主页源码找到了相应的字符串，所以只要用<code>request.get</code>抓取首页然后匹配ID字符串就可以了，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_blogid</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(<span class="string">'http://%s.lofter.com'</span> % username)</span><br><span class="line">        id_reg = <span class="string">r'src="http://www.lofter.com/control\?blogId=(.*)"'</span></span><br><span class="line">        blogid = re.search(id_reg, html.text).group(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'The blogid of %s is: %s'</span> % (username, blogid))</span><br><span class="line">        <span class="keyword">return</span> blogid</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'get blogid from http://%s.lofter.com failed'</span> % username)</span><br><span class="line">        print(<span class="string">'please check your username.'</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="生成POST请求数据"><a href="#生成POST请求数据" class="headerlink" title="生成POST请求数据"></a>生成POST请求数据</h3><p>根据前面归档页的分析，我们知道POST请求中除了一些固定参数外，还有用户ID，时间戳<code>timestamp</code>以及单次请求的博客篇数<code>N</code>需要确定，而ID已经在前面已经获取到了；博客篇数可以自定义一个数，如40；最后就剩下时间戳了。</p>
<p>经过多次尝试发现，这个时间戳<code>timestamp</code>是所有参数中唯一一个需要在每次请求中不断更新的参数。那么它更新的依据是什么呢？每篇博客都对应着一个<code>timestamp</code>，而且是博客的发布时间，每次请求后得到的最后一篇博客的<code>timestamp</code>就可以作为下一次请求的<code>timestamp</code>。为什么呢，因为我多次实验发现，在给定一个<code>timestamp</code>并发送POST请求后，服务器会<strong>以请求参数中的时间戳为起点按时间顺序往前检索出指定篇数(如：40)的博客信息</strong></p>
<p>响应包的博客信息中包含了每篇博客的时间戳，所以每次获取响应包后，只要解析出响应包中最后一篇博客的时间戳，就可以作为下一次请求中的时间戳。</p>
<p>根据以上分析，可以写出获取时间戳的函数如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time_pattern: re.compile('s%d\.time=(.*);s.*type' % (query_number-1))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_timestamp</span><span class="params">(html, time_pattern)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> html:</span><br><span class="line">        timestamp = round(time.time() * <span class="number">1000</span>)  <span class="comment"># first timestamp(ms)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        timestamp = time_pattern.search(html).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> str(timestamp)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，首次请求的时间戳可以直接使用当前系统时间(ms)</p>
</blockquote>
<h3 id="发送POST请求包"><a href="#发送POST请求包" class="headerlink" title="发送POST请求包"></a>发送POST请求包</h3><p>POST请求包的<code>url</code>是固定的，<code>data</code>就是前面获取到的所有请求参数，<code>headers</code>如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: username + <span class="string">'.lofter.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://%s.lofter.com/view'</span> % username,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>User-Agent</code>用于模拟浏览器请求，后面三个参数最好都加上，否则可能无法请求成功。POST请求其实就是一条语句<code>requests.post</code>，具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, data, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.post(url, data, headers = headers)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed\n%s"</span> % (url, str(e)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure>
<h3 id="解析POST响应包"><a href="#解析POST响应包" class="headerlink" title="解析POST响应包"></a>解析POST响应包</h3><p>在获取响应包的文本<code>html</code>后，便可从中获取本次请求得到的所有博客的相对路径，然后生成绝对路径，进而逐一抓取博客原文，从原文中抓取所有图链。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get urls of blogs: s3.permalink="44fbca_19a6b1b"</span></span><br><span class="line">new_blogs = blog_url_pattern.findall(html)</span><br><span class="line">num_new_blogs = len(new_blogs)</span><br><span class="line">num_blogs += num_new_blogs </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num_new_blogs != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'NewBlogs:%d\tTotalBolgs:%d'</span> % (num_new_blogs, num_blogs))</span><br><span class="line">    <span class="comment"># get imgurls from new_blogs</span></span><br><span class="line">    imgurls = []</span><br><span class="line">    <span class="keyword">for</span> blog <span class="keyword">in</span> new_blogs:</span><br><span class="line">        imgurls.extend(_get_imgurls(username, blog, headers))</span><br><span class="line">    num_imgs += len(imgurls)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">以上代码便是获取POST的响应包`html`后的解析操作，其中`_get_imurls`是用于抓取博客原文并解析出所有图链的函数。</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_imgurls</span><span class="params">(username, blog, headers)</span>:</span></span><br><span class="line">    blog_url = <span class="string">'http://%s.lofter.com/post/%s'</span> % (username, blog)</span><br><span class="line">    blog_html = requests.get(blog_url, headers = headers).text</span><br><span class="line">    imgurls = re.findall(<span class="string">r'bigimgsrc="(.*?)"'</span>, blog_html)</span><br><span class="line">    print(<span class="string">'Blog\t%s\twith %d\tpictures'</span> % (blog_url, len(imgurls)))</span><br><span class="line">    <span class="keyword">return</span> imgurls</span><br></pre></td></tr></table></figure>
<h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(imgurl, path)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image_request = requests.get(imgurl, headers = headers, timeout = <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> image_request.status_code == <span class="number">200</span>:</span><br><span class="line">                open(path, <span class="string">'wb'</span>).write(image_request.content)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\tGet %s failed\n\terror:%s'</span> % (imgurl, e))</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                imgurl = re.sub(<span class="string">'^http://img.*?\.'</span>,<span class="string">'http://img.'</span>,imgurl)</span><br><span class="line">                print(<span class="string">'\tRetry '</span> + imgurl)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'\tRetry fail'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>有了图链，最后的工作当然是下载图片了，上面这段代码便是用来下载图片的，<code>headers</code>是为了模拟浏览器访问。那为什么要尝试下载两次呢？因为我在抓取过程中，有时候会出现抓取失败的情况，并显示以下错误信息：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Connection aborted.'</span><span class="string">,</span> <span class="string">RemoteDisconnected('Remote</span> <span class="string">end</span> <span class="string">closed</span> <span class="string">connection</span> <span class="string">without</span> <span class="string">response'</span></span><br></pre></td></tr></table></figure>
<p>所以在<code>Retry</code>前先将图链对应的<code>host</code>稍加修改,这样可以保证更高的成功率，但并不能完全避免。对于下载失败的情况，可能是：</p>
<ol>
<li>被反爬了（极大可能）</li>
<li>网络通信不畅（可能性低）</li>
<li>图链失效</li>
<li>服务器出毛病了</li>
</ol>
<p>有时候，同样一个图链，过一段时间去抓就好了，或者换个网络就好了。我猜测是被反爬，但证据不足，所以只能降低爬取频率，比如每发送接收一次POST请求便<code>sleep</code>10s左右，但还是会有失败的情况，如果大家有更好的意见，欢迎交流。目前情况，正常情况100%爬取完全没问题，异常情况90%以上吧。</p>
<h3 id="主循环"><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h3><p>好了，其它零碎的代码就不多说了，爬虫主循环流程如下，其实就是以上步骤的整合：</p>
<ol>
<li>爬取归档页面指定篇数<code>query_number</code>的博文链接<code>new_blogs</code></li>
<li>逐个爬取博文<code>blog</code>数据，获取每篇<code>blog</code>的所有大图链接<code>imgurls</code></li>
<li>逐个爬取大图链接<code>imgurls</code>,下载图片至本地目录</li>
<li>判断是否已爬取完所有博文<ul>
<li>若已爬完，则显示爬取成果信息，并退出</li>
<li>若未爬完，则更新请求包中的时间戳<code>timestamp</code>，返回第1步继续爬取新的博文</li>
</ul>
</li>
</ol>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># date: 2018.03.07</span></span><br><span class="line"><span class="string">"""Capture pictures from lofter with username."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(username)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/lofter/'</span> + username,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/lofter/'</span> + username</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, data, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.post(url, data, headers = headers)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed\n%s"</span> % (url, str(e)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_blogid</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(<span class="string">'http://%s.lofter.com'</span> % username)</span><br><span class="line">        id_reg = <span class="string">r'src="http://www.lofter.com/control\?blogId=(.*)"'</span></span><br><span class="line">        blogid = re.search(id_reg, html.text).group(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'The blogid of %s is: %s'</span> % (username, blogid))</span><br><span class="line">        <span class="keyword">return</span> blogid</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'get blogid from http://%s.lofter.com failed'</span> % username)</span><br><span class="line">        print(<span class="string">'please check your username.'</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_timestamp</span><span class="params">(html, time_pattern)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> html:</span><br><span class="line">        timestamp = round(time.time() * <span class="number">1000</span>)  <span class="comment"># first timestamp(ms)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        timestamp = time_pattern.search(html).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> str(timestamp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_imgurls</span><span class="params">(username, blog, headers)</span>:</span></span><br><span class="line">    blog_url = <span class="string">'http://%s.lofter.com/post/%s'</span> % (username, blog)</span><br><span class="line">    blog_html = requests.get(blog_url, headers = headers).text</span><br><span class="line">    imgurls = re.findall(<span class="string">r'bigimgsrc="(.*?)"'</span>, blog_html)</span><br><span class="line">    print(<span class="string">'Blog\t%s\twith %d\tpictures'</span> % (blog_url, len(imgurls)))</span><br><span class="line">    <span class="keyword">return</span> imgurls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(imgurl, path)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image_request = requests.get(imgurl, headers = headers, timeout = <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> image_request.status_code == <span class="number">200</span>:</span><br><span class="line">                open(path, <span class="string">'wb'</span>).write(image_request.content)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\tGet %s failed\n\terror:%s'</span> % (imgurl, e))</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                imgurl = re.sub(<span class="string">'^http://img.*?\.'</span>,<span class="string">'http://img.'</span>,imgurl)</span><br><span class="line">                print(<span class="string">'\tRetry '</span> + imgurl)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'\tRetry fail'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_query_data</span><span class="params">(blogid, timestamp, query_number)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">'callCount'</span>:<span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'scriptSessionId'</span>:<span class="string">'$&#123;scriptSessionId&#125;187'</span>,</span><br><span class="line">    <span class="string">'httpSessionId'</span>:<span class="string">''</span>,</span><br><span class="line">    <span class="string">'c0-scriptName'</span>:<span class="string">'ArchiveBean'</span>,</span><br><span class="line">    <span class="string">'c0-methodName'</span>:<span class="string">'getArchivePostByTime'</span>,</span><br><span class="line">    <span class="string">'c0-id'</span>:<span class="string">'0'</span>,</span><br><span class="line">    <span class="string">'c0-param0'</span>:<span class="string">'number:'</span> + blogid,</span><br><span class="line">    <span class="string">'c0-param1'</span>:<span class="string">'number:'</span> + timestamp,</span><br><span class="line">    <span class="string">'c0-param2'</span>:<span class="string">'number:'</span> + query_number,</span><br><span class="line">    <span class="string">'c0-param3'</span>:<span class="string">'boolean:false'</span>,</span><br><span class="line">    <span class="string">'batchId'</span>:<span class="string">'123456'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># prepare paramters</span></span><br><span class="line">    username = <span class="string">'litreily'</span></span><br><span class="line">    blogid = _get_blogid(username)</span><br><span class="line">    query_number = <span class="number">40</span></span><br><span class="line">    time_pattern = re.compile(<span class="string">'s%d\.time=(.*);s.*type'</span> % (query_number<span class="number">-1</span>))</span><br><span class="line">    blog_url_pattern = re.compile(<span class="string">r's[\d]*\.permalink="([\w_]*)"'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># creat path to save imgs</span></span><br><span class="line">    path = _get_path(username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parameters of post packet</span></span><br><span class="line">    url = <span class="string">'http://%s.lofter.com/dwr/call/plaincall/ArchiveBean.getArchivePostByTime.dwr'</span> % username</span><br><span class="line">    data = _create_query_data(blogid, _get_timestamp(<span class="keyword">None</span>, time_pattern), str(query_number))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: username + <span class="string">'.lofter.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://%s.lofter.com/view'</span> % username,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_blogs = <span class="number">0</span></span><br><span class="line">    num_imgs = <span class="number">0</span></span><br><span class="line">    index_img = <span class="number">0</span></span><br><span class="line">    print(<span class="string">'------------------------------- start line ------------------------------'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        html = _get_html(url, data, headers).text</span><br><span class="line">        <span class="comment"># get urls of blogs: s3.permalink="44fbca_19a6b1b"</span></span><br><span class="line">        new_blogs = blog_url_pattern.findall(html)</span><br><span class="line">        num_new_blogs = len(new_blogs)</span><br><span class="line">        num_blogs += num_new_blogs </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_new_blogs != <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'NewBlogs:%d\tTotalBolgs:%d'</span> % (num_new_blogs, num_blogs))</span><br><span class="line">            <span class="comment"># get imgurls from new_blogs</span></span><br><span class="line">            imgurls = []</span><br><span class="line">            <span class="keyword">for</span> blog <span class="keyword">in</span> new_blogs:</span><br><span class="line">                imgurls.extend(_get_imgurls(username, blog, headers))</span><br><span class="line">            num_imgs += len(imgurls)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># download imgs</span></span><br><span class="line">            <span class="keyword">for</span> imgurl <span class="keyword">in</span> imgurls:</span><br><span class="line">                index_img += <span class="number">1</span></span><br><span class="line">                paths = <span class="string">'%s/%d.%s'</span> % (path, index_img, re.search(<span class="string">r'(jpg|png|gif)'</span>, imgurl).group(<span class="number">0</span>))</span><br><span class="line">                print(<span class="string">'&#123;&#125;\t&#123;&#125;'</span>.format(index_img, paths))</span><br><span class="line">                _capture_images(imgurl, paths)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> num_new_blogs != query_number:</span><br><span class="line">            print(<span class="string">'------------------------------- stop line -------------------------------'</span>)</span><br><span class="line">            print(<span class="string">'capture complete!'</span>)</span><br><span class="line">            print(<span class="string">'captured blogs:%d images:%d'</span> % (num_blogs, num_imgs))</span><br><span class="line">            print(<span class="string">'download path:'</span> + path)</span><br><span class="line">            print(<span class="string">'-------------------------------------------------------------------------'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        data[<span class="string">'c0-param1'</span>] = <span class="string">'number:'</span> + _get_timestamp(html, time_pattern)</span><br><span class="line">        print(<span class="string">'The next TimeStamp is : %s\n'</span> % data[<span class="string">'c0-param1'</span>].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># wait a few second</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/lofter/lofter_spider.png" alt="lofter spider"></p>
<p><img src="/assets/spider/lofter/pictures.png" alt="pictures"></p>
<h2 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h2><ul>
<li>Github 源码：<a href="https://github.com/Litreily/capturer" target="_blank" rel="noopener">https://github.com/Litreily/capturer</a></li>
<li>欢迎交流探讨与STAR</li>
<li>请节制使用！</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> spider </tag>
            
            <tag> lofter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两款实用的DDos攻击工具]]></title>
      <url>http://www.litreily.top/2018/02/22/ddos-attack/</url>
      <content type="html"><![CDATA[<p>之前为了重现某个bug，需要对网络设备进行ddos攻击测试，同时也是对设备的网络攻击防护功能进行抗压测试。临阵磨枪，google了两款攻击工具，windows平台的<code>hyenae</code>，以及Linux平台的<code>hping3</code>，在此记录一下两者的用法。</p>
<h2 id="Hyenae"><a href="#Hyenae" class="headerlink" title="Hyenae"></a>Hyenae</h2><p><code>hyenae</code>是在<code>Windows</code>平台上非常好用的一款<code>ddos</code>攻击工具，可以完成绝大多数的攻击操作。</p>
<h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><ul>
<li><a href="https://sourceforge.net/projects/hyenae/" target="_blank" rel="noopener">https://sourceforge.net/projects/hyenae/</a></li>
</ul>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li>ARP-Request flooding</li>
<li>ARP-Cache poisoning</li>
<li>PPPoE session initiation flooding</li>
<li>Blind PPPoE session termination</li>
<li>ICMP-Echo flooding</li>
<li>ICMP-Smurf attack</li>
<li>ICMP based TCP-Connection reset</li>
<li>TCP-SYN flooding</li>
<li>TCP-Land attack</li>
<li>Blind TCP-Connection reset</li>
<li>UDP flooding</li>
<li>DNS-Query flooding</li>
<li>DHCP-Discover flooding</li>
<li>DHCP starvation attack</li>
<li>DHCP-Release forcing</li>
<li>Cisco HSRP active router hijacking</li>
<li>Pattern based packet address configuration</li>
<li>Intelligent address and address protocol detection</li>
<li>Smart wildcard-based randomization</li>
<li>Daemon for setting up remote attack networks - HyenaeFE QT-Frontend support</li>
</ul>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p><img src="/assets/network/hyenae-interface.png" alt="hyenae interface"></p>
<p><code>hyenae</code>的界面比较简单，图中展示的是<code>SYN/ACK</code>洪泛攻击的配置选项。</p>
<ul>
<li><code>operation mode</code>中可以选择网卡</li>
</ul>
<ul>
<li><code>Network Protocol</code>中可以选择攻击方式对应的网络协议，如<code>SYN</code>洪泛攻击对应传输层的<code>TCP</code>，<code>IP</code>协议可选<code>IPv4, IPv6</code></li>
</ul>
<ul>
<li>攻击源的<code>IP</code>,<code>MAC</code>地址以及端口号可以非常灵活的设置，按<code>MAC-IP@port</code>的格式书写，如图中的攻击源匹配模式<code>%-172.17.14.158@80</code><ul>
<li>% 代表任意，在此处代表任意的MAC地址</li>
<li>172.17.14.158为伪造的攻击源IP，可以修改为任意的合法IP</li>
<li>80为端口号，80同时也是网络服务器的默认端口</li>
</ul>
</li>
</ul>
<ul>
<li>攻击目标的设置方式与攻击源一致，图中的<code>%-172.17.14.10@80</code><ul>
<li>% 随机生成MAC地址</li>
<li>172.17.14.10代表被攻击的IP</li>
<li>80为攻击目标的被攻击端口号</li>
</ul>
</li>
</ul>
<ul>
<li>针对<code>TCP</code>协议，右侧给出其对应的<code>5</code>个常见<code>flags</code>: <code>FIN, SYN, RST, PSH, ACK</code><ul>
<li>可以随意进行单选或多选，以实现不同的攻击方式</li>
<li>随意的组合可以产生正常通信过程中无法出现的数据包</li>
</ul>
</li>
</ul>
<ul>
<li>软件下方可以设置数据包的发送速率，默认为无限速发送，这会暂用大量带宽，导致网络拥塞；当然啦，这个软件本就是为了攻击网络，导致网络瘫痪正是其目的所在</li>
</ul>
<ul>
<li>选择不同的攻击方式，会显示相应不同的配置选项 </li>
</ul>
<p>简单说，这幅图的作用是产生<code>MAC</code>地址随机，<code>IP</code>为<code>172.17.14.158</code>，端口为80的伪造源，去攻击目的<code>MAC</code>随机，<code>IP</code>为<code>172.17.14.10</code>的<code>web server</code>。</p>
<p>由于目的<code>MAC</code>随机，<strong>当MAC地址首字节为奇数时，生成的数据包为广播包</strong>，此时将产生广播风暴，局域网内的所有设备都将收到大量的广播包，当速率很高时，很容易导致局域网瘫痪，这是需要注意的。本人当时年少轻狂，有次测试，使用全速率的广播式<code>SYN/ACK</code>攻击，直接导致部门的局域网瘫痪断网，幸好是晚上，后来找人重置了部门内的网络设备才恢复，想想真是罪过啊。</p>
<h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><ul>
<li>Land Attack<ul>
<li>src:  %-172.17.14.94@53</li>
<li>des: %-172.17.14.94@80</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3118 *** &#123;Land Attack&#125; are suppressed!</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br></pre></td></tr></table></figure>
<ul>
<li>SYN/ACK scan (TCP SYN ACK)<ul>
<li>src: %-172.17.14.8@80</li>
<li>des: %-172.17.14.94@80</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3896 *** &#123;SYN/ACK Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure>
<ul>
<li>ping flood (icmp echo)<ul>
<li>src:  %-172.17.14.8</li>
<li>des: %-172.17.14.94</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 1881 *** &#123;Ping Flood&#125; are suppressed!</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br></pre></td></tr></table></figure>
<ul>
<li>ping sweep (icmp echo)<ul>
<li>src:  %-%</li>
<li>des: %-%</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 1719 *** &#123;Ping Sweep&#125; are suppressed!</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 188.167.1.1,</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 113.172.1.5,</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 175.181.2.6,</span><br></pre></td></tr></table></figure>
<ul>
<li>RST Scan(TCP RST)<ul>
<li>src: %-172.17.14.8@80</li>
<li>des: %-172.17.14.94@80</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 4023 *** &#123;RST Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure>
<ul>
<li>ACK scan (TCP ACK)<ul>
<li>src: %-172.17.14.8@80</li>
<li>des: %-172.17.14.94@80</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3989 *** &#123;ACK Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80</span><br></pre></td></tr></table></figure>
<ul>
<li>FIN scan(TCP FIN)<ul>
<li>src: %-172.17.14.8@80</li>
<li>des: %-172.17.14.94@80</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3009 *** &#123;FIN Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure>
<h2 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h2><blockquote>
<p>hping3是用于生成和解析TCPIP协议数据包的开源工具</p>
</blockquote>
<p><code>hping3</code>同样可用于产生<code>ddos</code>攻击包，但与<code>hyenae</code>不同的是，<code>hping3</code>无法手动设置<code>MAC</code>地址，而是根据<code>IP</code>地址自动获取</p>
<p>需要注意的是，如果使用搬瓦工购买的<code>vps</code>向公网IP执行<code>hping3</code>攻击的话，最好不要尝试，如果要用也一定记得限速，否则就会被警告并关停,当然你有3次机会重置</p>
<p><img src="/assets/network/vps-warning.png" alt="vps warning"></p>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># land attack</span></span><br><span class="line">$ sudo hping3 -V -c 10000 -d 120 -S -w 64 --keep -p 80 -s 20000 --flood -a 172.17.14.52 172.17.14.52</span><br><span class="line"><span class="comment"># syn/ack attack</span></span><br><span class="line">$ sudo hping3 -V -c 10000 -d 120 -S -A -w 64 --keep -p 80 -s 80 --flood -a 172.17.14.192 172.17.14.52</span><br><span class="line"></span><br><span class="line"><span class="comment"># -V verbose</span></span><br><span class="line"><span class="comment"># -c packet count</span></span><br><span class="line"><span class="comment"># -d data size</span></span><br><span class="line"><span class="comment"># -p destPort</span></span><br><span class="line"><span class="comment"># -s srcPort</span></span><br><span class="line"><span class="comment"># -a srcIP</span></span><br><span class="line"><span class="comment"># -S SYN tag</span></span><br><span class="line"><span class="comment"># -A ACK tag</span></span><br><span class="line"><span class="comment"># -w winsize</span></span><br><span class="line"><span class="comment"># -I interface</span></span><br></pre></td></tr></table></figure>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li>网络攻击工具<ul>
<li>hping3<ul>
<li><a href="http://man.linuxde.net/hping3" target="_blank" rel="noopener">http://man.linuxde.net/hping3</a></li>
<li><a href="http://0daysecurity.com/articles/hping3_examples.html" target="_blank" rel="noopener">http://0daysecurity.com/articles/hping3_examples.html</a></li>
</ul>
</li>
<li>LOIC</li>
<li>hyenae <ul>
<li><a href="https://sourceforge.net/projects/hyenae/" target="_blank" rel="noopener">https://sourceforge.net/projects/hyenae/</a></li>
</ul>
</li>
<li>免费DDOS攻击测试工具大合集 <a href="http://www.freebuf.com/sectool/36545.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/36545.html</a></li>
</ul>
</li>
</ul>
<ul>
<li>ddos攻击说明<ul>
<li><a href="https://security.radware.com/ddos-knowledge-center/ddospedia/syn-flood/" target="_blank" rel="noopener">https://security.radware.com/ddos-knowledge-center/ddospedia/syn-flood/</a></li>
<li>网络攻击：半连接攻击(SYN攻击)、全连接攻击、RST攻击、IP欺骗、DNS欺骗、DOS/DDOS攻击  <a href="http://blog.csdn.net/guowenyan001/article/details/11777361" target="_blank" rel="noopener">http://blog.csdn.net/guowenyan001/article/details/11777361</a></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ddos </tag>
            
            <tag> hping3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mySQL基本语法]]></title>
      <url>http://www.litreily.top/2018/02/08/mysql-basic/</url>
      <content type="html"><![CDATA[<p>最近折腾<code>vps</code>，想要手动搭建一个<code>LNMP</code>环境，那必然少不了要补补课，简单学习一下<code>mysql</code>的基本语法。</p>
<h2 id="install-mySQL"><a href="#install-mySQL" class="headerlink" title="install mySQL"></a>install mySQL</h2><h3 id="install-on-Centos"><a href="#install-on-Centos" class="headerlink" title="install on Centos"></a>install on Centos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br><span class="line">$ sudo yum install mysql-server mysql-client</span><br><span class="line">$ sudo yum install mysql-devel <span class="comment"># install sdk of mysql</span></span><br><span class="line"><span class="comment"># /usr/include/mysql/mysql.h</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="install-on-Ubuntu"><a href="#install-on-Ubuntu" class="headerlink" title="install on Ubuntu"></a>install on Ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mysql-server mysql-client</span><br><span class="line">$ sudo apt-get install libmysqlclient15-dev || sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>
<h2 id="mySQL-cmd"><a href="#mySQL-cmd" class="headerlink" title="mySQL cmd"></a>mySQL cmd</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u USERNAME -p</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; \h</span><br></pre></td></tr></table></figure>
<h3 id="add-user"><a href="#add-user" class="headerlink" title="add user"></a>add user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER <span class="string">'username'</span>@<span class="string">'host'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">mysql&gt; CREATE USER <span class="string">'test'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="set-password"><a href="#set-password" class="headerlink" title="set password"></a>set password</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为当前用户设置新的密码</span></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">"newpassword"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为其它用户重设密码</span></span><br><span class="line">mysql&gt; SET PASSWORD FOR <span class="string">'username'</span>@<span class="string">'host'</span> = PASSWORD(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="delete-user"><a href="#delete-user" class="headerlink" title="delete user"></a>delete user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER <span class="string">'username'</span>@<span class="string">'host'</span></span><br></pre></td></tr></table></figure>
<h3 id="grant-privileges"><a href="#grant-privileges" class="headerlink" title="grant privileges"></a>grant privileges</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为用户授权</span></span><br><span class="line"><span class="comment"># privileges: SELECT, INSERT, UPDATE, ALL, ...</span></span><br><span class="line">mysql&gt; GRANT privileges ON databasename.tablename TO <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br><span class="line"><span class="comment"># 刷新缓存，使授权生效</span></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">mysql&gt; GRANT SELECT, INSERT ON test.user TO <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="databases-and-tables"><a href="#databases-and-tables" class="headerlink" title="databases and tables"></a>databases and tables</h3><ul>
<li>create database or table</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create database: vps</span></span><br><span class="line">mysql&gt; CREATE DATABASE vps;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show databases</span></span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| vps                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use database</span></span><br><span class="line">mysql&gt; USE vps;</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">mysql&gt; CREATE TABLE test_tbl(</span><br><span class="line">    -&gt; test_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; test_title VARCHAR(100) NOT NULL,</span><br><span class="line">    -&gt; test_author VARCHAR(40) NOT NULL,</span><br><span class="line">    -&gt; test_date DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( test_id )</span><br><span class="line">    -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show tables</span></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_vps |</span><br><span class="line">+---------------+</span><br><span class="line">| test_tbl      |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe table</span></span><br><span class="line">mysql&gt; DESC test_tbl;</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| test_id     | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| test_title  | varchar(100) | NO   |     | NULL    |                |</span><br><span class="line">| test_author | varchar(40)  | NO   |     | NULL    |                |</span><br><span class="line">| test_date   | date         | YES  |     | NULL    |                |</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop table</span></span><br><span class="line">mysql&gt; DROP TABLE runoob_tbl;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>in conclusion</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABESE dataBaseName;</span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">mysql&gt; USE dataBaseName;</span><br><span class="line">mysql&gt; CREATE TABLE tableName(content);</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">mysql&gt; DESC tableName;</span><br><span class="line">mysql&gt; DROP tableName;</span><br></pre></td></tr></table></figure>
<ul>
<li>handle tables</li>
</ul>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-tutorial.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[结构体中长度为0的字符数组]]></title>
      <url>http://www.litreily.top/2018/01/02/len0-charArray/</url>
      <content type="html"><![CDATA[<p>在C语言的结构体中，有一种特殊用法，在结构体的末尾放置一个长度为0的字符数组，结构体倒数第二个位置放置一个整型变量<code>len</code>。其典型样例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dynamic_value</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> flag;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">char</span> val[<span class="number">0</span>];</span><br><span class="line">&#125;s_flv;</span><br></pre></td></tr></table></figure>
<p>本文针对其特征，用法及适用场合予以简单介绍。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul>
<li>最后的字符数组<code>val</code>长度为0，不占用额外的内存空间</li>
<li>倒数第二个元素为一整型变量，用于存储字符数组的真实长度</li>
<li><code>val</code>实际指向的是结构体<code>s_flv</code>之后的内存空间</li>
<li>字符数组的大小可以在定义结构体变量时动态指定<code>s_flv.len</code></li>
<li>结构体元素个数不限，样例为典型模式，其中的<code>flag</code>作为标签用以标识不同的数据</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>按<code>s_flv</code>格式写入数据到文件</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_flv</span><span class="params">(FILE *fp, <span class="keyword">int</span> flag, <span class="keyword">char</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(val == <span class="literal">NULL</span>)</span><br><span class="line">        val = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(val);</span><br><span class="line"></span><br><span class="line">    fwrite(&amp;flag, <span class="keyword">sizeof</span>(flag), <span class="number">1</span>, fp); <span class="comment">// 写入标识</span></span><br><span class="line">    fwrite(&amp;len, <span class="keyword">sizeof</span>(len), <span class="number">1</span>, fp);   <span class="comment">// 写入字符数组长度</span></span><br><span class="line">    fwrite(val, len, <span class="number">1</span>, fp);    <span class="comment">// 写入长度为len的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>读取文件</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_flv</span><span class="params">(<span class="keyword">char</span> *file, <span class="keyword">char</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">32</span>];   <span class="comment">// 假定字符数组长度小等于32</span></span><br><span class="line">    <span class="keyword">char</span> *p = buf;</span><br><span class="line"></span><br><span class="line">    FILE *fp = fopen(file, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fread(buf, <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &lt;= <span class="number">0</span>)   <span class="comment">// 读取前两个整型数据，获取字符数组长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    s_flv *flv = (s_flv *)p;        <span class="comment">// 定义s_flv结构体，存储数据</span></span><br><span class="line">    fread(val, flv-&gt;len, <span class="number">1</span>, fp);    <span class="comment">// 读取字符数组</span></span><br><span class="line">    flose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>说明</strong><ul>
<li>每执行一次<code>fread</code>或<code>fwrite</code>函数，文件指针就往后偏移相应的读取长度或写入长度</li>
<li><code>read_flv</code>定义<code>flv</code>时，从<code>buf</code>中可以获取到数组长度，然后使用<code>fread</code>读取相应长度的数据即可取出字符数组的内容。</li>
<li>使用以上方法生成的文件内容是二进制文件，许多字符是不可打印字符，所以使用<code>cat</code>指令无法正常显示文件内容</li>
</ul>
</li>
</ul>
<p>上面描述的方法是将<code>s_flv</code>类型的数据存入文件，但如果不想存入文件，那么该如何为其分配内存呢，下面来看一下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义s_flv指针变量</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">s_flv *flv = (s_flv *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_flv) + size);</span><br><span class="line">flv-&gt;len = size;</span><br><span class="line">flv-&gt;val = flv + <span class="keyword">sizeof</span>(s_flv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放指针</span></span><br><span class="line"><span class="built_in">free</span>(flv);</span><br></pre></td></tr></table></figure>
<h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><ul>
<li><code>json</code>文件的读写</li>
<li>不定长度字符串的读写</li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="http://www.cnblogs.com/felove2013/articles/4050226.html" target="_blank" rel="noopener">浅析长度为0的数组</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VPS+SS翻越GFW]]></title>
      <url>http://www.litreily.top/2017/09/07/ss-config/</url>
      <content type="html"><![CDATA[<h2 id="购买并配置VPS"><a href="#购买并配置VPS" class="headerlink" title="购买并配置VPS"></a>购买并配置VPS</h2><p>在<a href="http://banwagong.cn/" target="_blank" rel="noopener">搬瓦工</a>选择一个<code>VPS</code>，大概每年<code>$19.99</code>，使用邀请码可优惠<code>6%</code>，可以使用支付宝(Alipay)购买。成功购买<code>VPS</code>后，进入<code>VPS</code>的<a href="https://kiwivm.64clouds.com/main.php" target="_blank" rel="noopener">管理界面</a>，登录账户后便可以查看服务器信息，并进行相关配置了。</p>
<h2 id="安装SS服务器"><a href="#安装SS服务器" class="headerlink" title="安装SS服务器"></a>安装SS服务器</h2><p>如果VPS选用<code>centos</code>系统，则可以直接在配置界面左下方选择<code>Shadowsocks Server</code>，一键安装就<code>ok</code>了，当然喜欢折腾的也可以自己用<code>yum install</code>下载安装和配置<code>Shadowsocks</code>，此不赘述。</p>
<h2 id="安装SS客户端"><a href="#安装SS客户端" class="headerlink" title="安装SS客户端"></a>安装SS客户端</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><code>Ubuntu</code>可以选择<code>github</code>中的<a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="noopener">shadowsocks/shadowsocks</a>，或<a href="https://github.com/shadowsocks/shadowsocks-qt5" target="_blank" rel="noopener">shadowsocks/shadowsocks-qt5</a>.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><code>Windows</code>选择<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks/shadowsocks-windows</a>，或<code>shadowsocks/shadowsocks-qt5</code>中的<a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="noopener">ss-qt5-v2.9.0-win64.7z</a>。本人刚开始使用前者，无法科学上网，从<code>log</code>信息中发现可以将数据发送至<code>VPS</code>，但<code>VPS</code>无法解析其头部信息，故而连接失败，后来尝试网上各种方法无果，最终使用<code>qt5</code>版本成功。具体原因不详。</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>安卓端就下载安装<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">shadowsocks/shadowsocks-android</a>内的<code>apk</code>即可。</p>
<h2 id="配置SS客户端"><a href="#配置SS客户端" class="headerlink" title="配置SS客户端"></a>配置SS客户端</h2><p><code>SS</code>的配置相当简单，参考<code>VPS</code>中<code>Shadowsocks</code>配置界面给的信息即可，必要信息包括：</p>
<ul>
<li>服务器地址 (<code>Host IP</code>)</li>
<li>密码(<code>password</code>)  </li>
<li>端口号<code>Port(default:443)</code></li>
<li>加密方式<code>encryption(default:aes-256-cfb)</code></li>
</ul>
<h2 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h2><p>无论是<code>google chrome</code>还是<code>firefox</code>，都有相应的代理插件，最常用的是<code>SwitchyOmega</code>。下载该插件并安装后，需要打开插件的<strong>选项</strong>，进行一定的配置操作：</p>
<ol>
<li>新建<strong>情景模式</strong>（<code>profile</code>），命名随意，如：<strong>SS</strong>;</li>
<li>在默认(<code>default</code>)选项中选择<code>SOCK5</code>，服务器(<code>Server</code>)设为<code>127.0.0.1</code>，端口(<code>port</code>)设为<code>1080</code>;</li>
<li>点击左侧的应用修改(<code>Apply changes</code>);</li>
<li>点击<code>auto switch</code>，页面上的条件栏(<code>condition</code>)不用管，点击下面的添加规则，在情景模式（<code>profile</code>）一列中选择之前创建的<code>SS</code>，默认选项分两种情况：<ul>
<li>普通网络，没有额外代理的情况，默认设为直连(<code>direct</code>);</li>
<li>如果是公司网设了代理，则默认设为代理<code>proxy</code>，并在代理<code>proxy</code>中设置好公司的代理服务器<code>IP</code>和端口号<code>port</code>.</li>
</ul>
</li>
<li>在下面的规则列表配置中，选择<code>AutoProxy</code>,添加网址<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，</a> 然后点击下方按钮更新列表信息，网址无误的话会提示成功更新规则列表；</li>
<li>点击左侧应用修改<code>Apply changes</code>，在插件中选择<code>auto switch</code>选项即可开启自动切换代理模式。</li>
</ol>
<p>经过以上配置后，启动已配置好服务器信息的<code>Shadowsocks</code>客户端，正常情况下就可以访问<code>Google</code>, <code>youtube</code>等国外网站了。</p>
<h2 id="配置全局代理"><a href="#配置全局代理" class="headerlink" title="配置全局代理"></a>配置全局代理</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>在<code>Ubuntu</code>中，可以打开 Settings-&gt;Network-&gt;Network Proxy ，在<code>Socks Host</code>一栏中设置<code>IP</code>为<code>127.0.0.1</code>，代理端口为<code>1080</code>。这样便设置好了全局代理。<code>firefox</code>的网络设置选项中有单独一项用于选择系统代理设置，对应的就是这个。</p>
<h3 id="安装polipo"><a href="#安装polipo" class="headerlink" title="安装polipo"></a>安装polipo</h3><p><code>polipo</code>是一个小型的代理服务器软件，用于二次转发数据包，使用它可以配合系统设置里的全局代理实现真正的全局代理，让终端等应用都可以翻越<code>GFW</code>，这样在<code>shell</code>中下载软件就方便快速多了，亲测效果很是明显。</p>
<p>下面是安装配置步骤：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install polipo</span><br><span class="line">$ sudo vim /etc/polipo/config</span><br><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span></span><br><span class="line"><span class="comment"># and "polipo -v" for variables you can tweak and further information.</span></span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line">proxyAddress = <span class="string">"0.0.0.0"</span></span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1080"</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br></pre></td></tr></table></figure>
<p>修改<code>config</code>文件后需要重启一下<code>polipo</code>，然后测试是否代理是否成功开启。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/polipo restart</span><br><span class="line">$ <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8123/"</span> curl ifconfig.me</span><br><span class="line">***.***.***.*** <span class="comment"># return your VPS-IP_ADDR if success</span></span><br></pre></td></tr></table></figure>
<p>到此就可以愉快的使用谷歌了，但是目前晚上的网速略慢，看<code>youtube</code>经常只能到<code>360P</code>。</p>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[远程服务器中编译安装tmux]]></title>
      <url>http://www.litreily.top/2017/08/23/tmux-install/</url>
      <content type="html"><![CDATA[<p>在工作当中，公司出于安全考虑，部署的远程Linux服务器总有一些限制（没网，Shell指令有限），而且员工作为普通用户，无法安装软件到除用户目录以外的目录。当我们需要下载安装一些常用工具时，因为没网，所以无法使用<code>apt-get</code>等下载指令，只能先在本地PC下载软件源码，然后传入服务器进行编译安装。本文以<code>tmux</code>为例说明服务器中编译安装软件的流程。</p>
<p>安装路径：<code>~/lib/software/tmux</code></p>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><code>tmux</code>的下载地址 : <a href="https://github.com/tmux/tmux/releases/download/2.5/tmux-2.5.tar.gz" target="_blank" rel="noopener">https://github.com/tmux/tmux/releases/download/2.5/tmux-2.5.tar.gz</a></p>
<p>依赖库<code>libevent</code>：<a href="https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz" target="_blank" rel="noopener">https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz</a></p>
<p>下载后的文件通过一定方式(scp，共享服务，…)可以传入服务器中。</p>
<h2 id="Move-files-optional"><a href="#Move-files-optional" class="headerlink" title="Move files (optional)"></a>Move files (optional)</h2><p>在服务器中执行以下指令，将文件放入<code>~/lib</code>文件夹。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">mkdir lib</span><br><span class="line">cp sharedir.git/*.tar.gz lib/</span><br></pre></td></tr></table></figure>
<h2 id="Edit-profile"><a href="#Edit-profile" class="headerlink" title="Edit .profile"></a>Edit .profile</h2><p>编辑<code>.profile</code>，添加全局变量<code>SWDIR</code>（存放用户手动编译安装的软件）；更新依赖库<code>LD_LIBRARY_PATH</code>和环境变量<code>PATH</code>，分别添加<code>tmux</code>的依赖路径和安装路径。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.profile</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="built_in">export</span> SWDIR=/home/&lt;username&gt;/lib/software</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY</span>:<span class="variable">$SWDIR</span>/libevent/lib</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;SWDIR&#125;</span>/tmux/:<span class="variable">$&#123;SWDIR&#125;</span>/tmux/bin/</span><br></pre></td></tr></table></figure>
<h2 id="Complie-libevent"><a href="#Complie-libevent" class="headerlink" title="Complie libevent"></a>Complie libevent</h2><p>配置好环境变量后，首先编译<code>tmux</code>的依赖库<code>libevent</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/lib</span><br><span class="line">tar -xvzf libevent-2.1.8-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libevent-2.1.8-stable</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=<span class="variable">$SWDIR</span>/libevent &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong>默认安装路径是没有访问权限的，所以需要使用<code>--prefix</code>选项手动指定安装路径至用户目录中的某个文件夹。</p>
<h2 id="Complie-tmux"><a href="#Complie-tmux" class="headerlink" title="Complie tmux"></a>Complie tmux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/lib</span><br><span class="line">tar -xvzf tmux-2.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tmux-2.5</span><br><span class="line">./configure --prefix=<span class="variable">$SWDIR</span>/tmux CFLAGS=<span class="string">"-I<span class="variable">$SWDIR</span>/libevent/include"</span> LDFLAGS=<span class="string">"-L<span class="variable">$SWDIR</span>/libevent/lib"</span> &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><code>CFLAGS</code>和<code>LDFLAGS</code>用于指定编译<code>tmux</code>所需的依赖库文件。</p>
<p>至此，<code>tmux</code>便安装完成了。在<code>shell</code>中输入<code>tmux</code>即可启动，通过<code>man tmux</code>可以查看帮助文档。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Telnet中使用smtp发送邮件]]></title>
      <url>http://www.litreily.top/2017/08/17/telnet-smtp/</url>
      <content type="html"><![CDATA[<p><code>Telnet</code>是远程登录服务的标准协议和主要方式，工作于<code>TCP/IP</code>协议族的应用层，常用于远程登录<code>web</code>服务器，其中便包括<code>SMTP</code>，<code>POP3</code>等邮件服务器。</p>
<p>这几天参考书籍《计算机网络-自顶向下方法》学习计算机网络知识，顺便尝试了如何使用<code>Telnet</code>登录<code>smtp</code>发送邮件，下面通过一个简单示例介绍具体的发送过程。</p>
<h2 id="Telnet-smtp-163-com-25"><a href="#Telnet-smtp-163-com-25" class="headerlink" title="Telnet smtp.163.com 25"></a>Telnet smtp.163.com 25</h2><p><code>smtp</code>对应的端口号为<code>25</code>，以163邮箱为例，下面是邮件发送过程。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">→ ~ telnet smtp.163.com 25</span><br><span class="line">Trying 220.181.12.15...</span><br><span class="line">Connected to smtp.163.com.</span><br><span class="line">Escape character is ^].</span><br><span class="line">220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[20141201])</span><br><span class="line">helo 163.com</span><br><span class="line">250 OK</span><br><span class="line">auth login</span><br><span class="line">334 dXNlcm5hbWU6</span><br><span class="line">MTgyNjY2MzI4NzJAMTYzLmNvbQ==</span><br><span class="line">334 UGFzc3dvcmQ6</span><br><span class="line">****************</span><br><span class="line">235 Authentication successful</span><br><span class="line">mail from:&lt;182****2872@163.com&gt;</span><br><span class="line">250 Mail OK</span><br><span class="line">rcpt to:&lt;707***098@qq.com&gt;</span><br><span class="line">250 Mail OK</span><br><span class="line">data</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">From: 182****2872@163.com</span><br><span class="line">To: 707***098@qq.com</span><br><span class="line">Subject: Test the use of smtp</span><br><span class="line"></span><br><span class="line">  Hello, litreily.                          </span><br><span class="line">  This is a message edit with telnet.</span><br><span class="line"></span><br><span class="line">Best wish to you.</span><br><span class="line">Litreily</span><br><span class="line">.</span><br><span class="line">250 Mail OK queued as smtp11,D8CowAAnjlqKlZVZXa4QAQ--.18342S2 1502975693</span><br><span class="line">quit</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">→ ~</span><br></pre></td></tr></table></figure>
<p>下面分开对每个过程进行解析，<code>C</code>代表客户端，即本机，<code>S</code>代表远程服务器端。整个过程分为以下几步：</p>
<ul>
<li>打招呼</li>
<li>账户认证</li>
<li>声明邮箱地址</li>
<li>书写邮件内容</li>
<li>退出<code>Telnet</code></li>
</ul>
<h3 id="招呼语"><a href="#招呼语" class="headerlink" title="招呼语"></a>招呼语</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S 220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[20141201])</span><br><span class="line">C helo 163.com</span><br><span class="line">S 250 OK</span><br></pre></td></tr></table></figure>
<p><code>220</code>代表服务器已准备好，客户端首先向服务器打一声招呼<code>helo</code>，服务器接收到后返回一个<code>250</code>应答信号，代表打招呼成功，下面可以进行账户的密码认证。</p>
<h3 id="账户认证"><a href="#账户认证" class="headerlink" title="账户认证"></a>账户认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C auth login</span><br><span class="line">S 334 dXNlcm5hbWU6</span><br><span class="line">C MTgyNjY2MzI4NzJAMTYzLmNvbQ==</span><br><span class="line">S 334 UGFzc3dvcmQ6</span><br><span class="line">C ****************</span><br><span class="line">S 235 Authentication successful</span><br></pre></td></tr></table></figure>
<p>客户端发送<code>auth login</code>声明自己将进行邮箱账户的用户名认证和密码认证。服务器端返回一个以<code>334</code>代码开头的提示信息，不必追究其语义，而后用户依次输入通过<code>Base64</code>加密的邮箱名和密码，加密网址见后续参考资料。当输入的账号密码无误时，服务端将返回认证成功的提示语。</p>
<h3 id="声明邮箱地址"><a href="#声明邮箱地址" class="headerlink" title="声明邮箱地址"></a>声明邮箱地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C mail from:&lt;182****2872@163.com&gt;</span><br><span class="line">S 250 Mail OK</span><br><span class="line">C rcpt to:&lt;707***098@qq.com&gt;</span><br><span class="line">S 250 Mail OK</span><br></pre></td></tr></table></figure>
<p>账户密码认证结束后，客户端通过<code>mail from:&lt;emailName&gt;</code>以及<code>rcpt to:&lt;nameEmail&gt;</code>声明邮箱的源地址和目的地址。</p>
<h3 id="书写邮件内容"><a href="#书写邮件内容" class="headerlink" title="书写邮件内容"></a>书写邮件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C data</span><br><span class="line">S 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">C From: 182****2872@163.com</span><br><span class="line">C To: 707***098@qq.com</span><br><span class="line">C Subject: Test the use of smtp</span><br><span class="line">C </span><br><span class="line">C   Hello, litreily.                          </span><br><span class="line">C   This is a message edit with telnet.</span><br><span class="line">C </span><br><span class="line">C Best wish to you.</span><br><span class="line">C Litreily</span><br><span class="line">C .</span><br><span class="line">S 250 Mail OK queued as smtp11,D8CowAAnjlqKlZVZXa4QAQ--.18342S2 1502975693</span><br></pre></td></tr></table></figure>
<p>写明邮件地址后，使用指令<code>data</code>进入邮件编辑状态，服务器端会提示当输入<code>&lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</code>时退出编辑状态。</p>
<p>邮件内容有一定的格式要求，不按要求随意书写有可能被当成垃圾邮件或不合法邮件而退信。通常需要指定邮件主题<code>Subject</code>，其它相关信息包括时间<code>Date</code>，邮件地址<code>From</code>，<code>To</code>等，然后再书写邮件主体内容，更详细的格式可以参考文档<strong>【RFC 821】</strong>。编辑结束后，以单行的点号<code>.</code>结束。如果一切正常，服务器端将返回以<code>250</code>开头的应答信息，并提示邮件以进入<code>smtp</code>的发送队列。此时便可以查收邮件予以验证了。</p>
<h3 id="退出Telnet"><a href="#退出Telnet" class="headerlink" title="退出Telnet"></a>退出Telnet</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C quit</span><br><span class="line">S Connection closed by foreign host.</span><br></pre></td></tr></table></figure>
<p>当邮件发送结束后，客户端通过<code>quit</code>退出<code>Telnet</code>。</p>
<h2 id="SMTP-Code"><a href="#SMTP-Code" class="headerlink" title="SMTP Code"></a>SMTP Code</h2><ul>
<li><code>211</code> 系统状态或系统帮助响应</li>
<li><code>214</code> 帮助信息</li>
<li><code>220</code> 服务就绪</li>
<li><code>221</code> 服务关闭传输信道</li>
<li><code>235</code> 用户验证成功</li>
<li><code>250</code> 要求的邮件操作完成</li>
<li><code>251</code> 用户非本地，将转发向</li>
<li><code>334</code> 等待用户输入验证信息</li>
<li><code>354</code> 开始邮件输入，以单行<strong>.</strong>结束</li>
<li><code>421</code> 服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）</li>
<li><code>450</code> 要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）</li>
<li><code>451</code> 放弃要求的操作；处理过程中出错</li>
<li><code>452</code> 系统存储不足，要求的操作未执行</li>
<li><code>500</code> 格式错误，命令不可识别（此错误也包括命令行过长）</li>
<li><code>501</code> 参数格式错误</li>
<li><code>502</code> 命令不可实现</li>
<li><code>503</code> 错误的命令序列</li>
<li><code>504</code> 命令参数不可实现</li>
<li><code>535</code> 用户验证失败</li>
<li><code>550</code> 要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）</li>
<li><code>551</code> 用户非本地，请尝试</li>
<li><code>552</code> 过量的存储分配，要求的操作未执行</li>
<li><code>553</code> 邮箱名不可用，要求的操作未执行（例如邮箱格式错误）</li>
<li><code>554</code> 操作失败</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><code>SMTP</code>文档(<code>RFC 821</code>) : <a href="https://tools.ietf.org/pdf/rfc821.pdf" target="_blank" rel="noopener">https://tools.ietf.org/pdf/rfc821.pdf</a></li>
<li><code>SMTP Code</code> : <a href="http://bbs.csdn.net/topics/80275246" target="_blank" rel="noopener">http://bbs.csdn.net/topics/80275246</a></li>
<li><code>163.com</code> 邮件退信代码 : <a href="http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html" target="_blank" rel="noopener">http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> telnet </tag>
            
            <tag> smtp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下解决wireshark没有权限的问题]]></title>
      <url>http://www.litreily.top/2017/07/28/chmod-wireshark/</url>
      <content type="html"><![CDATA[<p><code>wireshark</code>是常用的网络抓包工具，在<code>ubuntu</code>中安装方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install wireshark</span><br></pre></td></tr></table></figure>
<p>安装以后，打开软件后，在选择网络接口进行抓包时会提示没有权限，为此，可以通过以下方法解决。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户组，命名为wireshark</span></span><br><span class="line">sudo groupadd wireshark  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将dumpcap更改为刚添加的用户组</span></span><br><span class="line">sudo chgrp wireshark /usr/bin/dumpcap  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 为wireshark用户组添加使用dumpcap的root权限</span></span><br><span class="line">sudo chmod 4755 /usr/bin/dumpcap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将自己的用户(本人litreily)添加到wireshark用户组</span></span><br><span class="line">sudo gpasswd -a litreily wireshark</span><br></pre></td></tr></table></figure>
<p>执行完成以后便可以使用<code>wireshark</code>正常抓包了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> wireshark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C程序与Shell脚本混合编程]]></title>
      <url>http://www.litreily.top/2017/07/27/mixwith-shell/</url>
      <content type="html"><![CDATA[<p>对于嵌入式软件开发，有时候需要在使用<code>C</code>语言进行开发的同时，嵌入<code>shell</code>脚本指令，以完成一些特定的任务。</p>
<p>本文结合上一篇博文“初探makefile”的程序代码，加上一个简单的<code>shell</code>脚本，说明两者混合编程的方法。</p>
<h2 id="编写-shell-脚本"><a href="#编写-shell-脚本" class="headerlink" title="编写 shell 脚本"></a>编写 shell 脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shell.sh</span><br></pre></td></tr></table></figure>
<p>使用<code>vim</code>编辑器新建<code>shell.sh</code>脚本文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please input your strings"</span></span><br><span class="line"><span class="built_in">read</span> input_string</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"input_string=<span class="variable">$input_string</span>"</span></span><br></pre></td></tr></table></figure>
<p>脚本首先输出一个“Hello world!”，然后输出一个字符串输入提示语，等待用户输入后，打印出相应的信息。</p>
<h2 id="在-main-c-中调用-shell-脚本"><a href="#在-main-c-中调用-shell-脚本" class="headerlink" title="在 main.c 中调用 shell 脚本"></a>在 main.c 中调用 shell 脚本</h2><p>为了在<code>C</code>文件中调用<code>shell</code>脚本，可以使用<code>stdlib.h</code>库中的<code>system</code>函数，调用方式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"bash ./&lt;script-filename&gt;.sh"</span>);</span><br><span class="line">    <span class="comment">// bash为默认shell，也可改用诸如"zsh"类的shell</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据该用法修改原有的<code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a,b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>,a,b,c);</span><br><span class="line">    system(<span class="string">"zsh ./shell.sh"</span>);     <span class="comment">// 调用 shell 脚本</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Infos:File-%s, Func-%s, Line-%d\n"</span>,__FILE__,__func__,__LINE__);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    __FILE__ : 文件名</span></span><br><span class="line"><span class="comment">    __func__ : 函数名</span></span><br><span class="line"><span class="comment">    __LINE__ : 所在行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编译链接并执行"><a href="#编译链接并执行" class="headerlink" title="编译链接并执行"></a>编译链接并执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ make clean                <span class="comment"># 清除目标文件</span></span><br><span class="line">rm <span class="built_in">test</span> main.o add.o</span><br><span class="line"></span><br><span class="line">$ make                      <span class="comment"># 生成可执行文件</span></span><br><span class="line">cc    -c -o main.o main.c</span><br><span class="line">cc    -c -o add.o add.c</span><br><span class="line">cc -o <span class="built_in">test</span> main.o add.o</span><br><span class="line"></span><br><span class="line">$ ./<span class="built_in">test</span>                    <span class="comment"># 执行可执行文件</span></span><br><span class="line">10 + 1 = 11                 <span class="comment"># 加法运算结果</span></span><br><span class="line">Hello world!                <span class="comment"># shell 脚本欢迎语</span></span><br><span class="line">Please input your strings   <span class="comment"># 提示语</span></span><br><span class="line">whatever                    <span class="comment"># 手动输入的信息  </span></span><br><span class="line">input_string=whatever       <span class="comment"># 显示信息</span></span><br><span class="line">Infos:File-main.c, Func-main, Line-14   <span class="comment"># 显示打印程序所在文件、函数及对应行数</span></span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：当使用<code>printf</code>函数时，如果不在输出信息后添加<code>\n</code>换行符的话，其输出信息有可能与<code>shell</code>脚本执行结果发生错位。为避免该情况的发生，应习惯在<code>printf</code>函数调用过程中加入换行符。</p>
<h2 id="显示脚本指令"><a href="#显示脚本指令" class="headerlink" title="显示脚本指令"></a>显示脚本指令</h2><p>为了追踪每个脚本指令的执行过程，可以修改<code>system</code>函数调用方式，在<code>bash</code>,<code>zsh</code>后添加选项<code>-x</code>.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">"zsh -x ./shell.sh"</span>);</span><br></pre></td></tr></table></figure>
<p>修改后重新执行make，执行<code>./test</code>得到以下结果</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">10 + 1 = 11</span><br><span class="line">+/etc/zsh/zshenv:15&gt; [[ -z /usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin || /usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin == /bin:/usr/bin ]]</span><br><span class="line"></span><br><span class="line">+./shell.sh:3&gt; <span class="built_in">echo</span> <span class="string">'Hello world!'</span></span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">+./shell.sh:4&gt; <span class="built_in">echo</span> <span class="string">'Please input your strings'</span></span><br><span class="line">Please input your strings</span><br><span class="line"></span><br><span class="line">+./shell.sh:5&gt; <span class="built_in">read</span> input_string</span><br><span class="line">what</span><br><span class="line"></span><br><span class="line">+./shell.sh:6&gt; <span class="built_in">echo</span> <span class="string">'input_string=what'</span></span><br><span class="line">input_string=what</span><br><span class="line"></span><br><span class="line">Infos:File-main.c, Func-main, Line-14</span><br></pre></td></tr></table></figure>
<p>使用不同的<code>shell</code>，其显示效果不大一致，下面是使用<code>bash</code>执行后的效果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">10 + 1 = 11</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Hello world!'</span></span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Please input your strings'</span></span><br><span class="line">Please input your strings</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">read</span> input_string</span><br><span class="line">what</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> input_string=what</span><br><span class="line">input_string=what</span><br><span class="line"></span><br><span class="line">Infos:File-main.c, Func-main, Line-14</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：上述执行过程中显示的空行是为了清楚显示执行过程手动添加的，实际执行过程中并无空行。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ubuntu </tag>
            
            <tag> makefile </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初探makefile]]></title>
      <url>http://www.litreily.top/2017/07/25/makefile/</url>
      <content type="html"><![CDATA[<p>嵌入式软件开发少不了使用makefile进行软件编译，写好一个makefile，让其完成所有程序代码的自动化编译链接，可以提高软件开发效率。<code>make</code>是一个命令工具，用于解释并执行makefile中的指令。大多数IDE都有这个命令工具，如<code>Visual C++</code>的<code>nmake</code>，<code>Linux</code>中<code>GNU</code>的<code>make</code>。本文以一个简单例子说明<code>makefile</code>文件的书写规范和执行过程。</p>
<h2 id="创建待编译的文件"><a href="#创建待编译的文件" class="headerlink" title="创建待编译的文件"></a>创建待编译的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mkfiles</span><br><span class="line">vim add.h add.c main.h main.c</span><br></pre></td></tr></table></figure>
<p>然后逐个编辑头文件和源文件，实现一个简单的加法运算。</p>
<h3 id="add-h"><a href="#add-h" class="headerlink" title="add.h"></a>add.h</h3><p>加法函数放于<code>add.c</code>中，对应头文件为<code>add.h</code>，用于存放函数声明。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ADD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __ADD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declaration functions</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __ADD_H_</span></span></span><br></pre></td></tr></table></figure>
<h3 id="add-c"><a href="#add-c" class="headerlink" title="add.c"></a>add.c</h3><p>在<code>add.c</code>中实现加法函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h3><p>在主函数对应的头文件<code>main.h</code>中添加依赖的头文件。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAIN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAIN_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __MAIN_H_</span></span></span><br></pre></td></tr></table></figure>
<h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><p>在<code>main.c</code>中实现主函数，打印出一个加法运算结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> c = add(a,b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>,a,b,c);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建-makefile"><a href="#创建-makefile" class="headerlink" title="创建 makefile"></a>创建 makefile</h2><h3 id="makefile-规则"><a href="#makefile-规则" class="headerlink" title="makefile 规则"></a>makefile 规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">&lt;tab&gt;   <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><code>target</code>: 目标文件，可以是.o（object file）文件，也可以是最终的可执行文件<br><code>prerequisites</code> : 生成目标文件所需的文件或是目标（<em>.h, </em>.c, *.o, …）<br><code>command</code>: <code>make</code>需要执行的编译、链接等指令（所有指令前都以<code>TAB</code>键开头）</p>
<h3 id="makefile-基础写法"><a href="#makefile-基础写法" class="headerlink" title="makefile 基础写法"></a>makefile 基础写法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test : main.o add.o</span><br><span class="line">	cc -o test main.o add.o</span><br><span class="line"></span><br><span class="line">main.o : main.c main.h add.h</span><br><span class="line">	cc -c main.c</span><br><span class="line"></span><br><span class="line">add.o : add.c add.h</span><br><span class="line">	cc -c add.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># make clean : use to clean all the object files</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">	rm test main.o add.o</span><br></pre></td></tr></table></figure>
<p>其中，test, main.o, add.o均是目标文件<code>target</code>；所有源文件及头文件均为<code>prerequisites</code>；</p>
<p><code>cc</code> : 编译器，与<code>gcc</code>相似，<code>-c</code>代表编译，执行后产生对象文件，即”.o”文件；<code>-o</code>代表链接，用于链接”.o”文件并生成可执行文件；</p>
<p><code>.PHONY</code> : 用于声明后面跟着的都是伪目标（类似于C语言中的标签(Label)）；</p>
<p><code>clean</code> ： 一个伪目标，只有在外部执行<code>make clean</code>时方才执行相应的执行，此次用于删除生成的所有目标文件。</p>
<h3 id="makefile-简化版1"><a href="#makefile-简化版1" class="headerlink" title="makefile 简化版1"></a>makefile 简化版1</h3><p>在<code>makefile</code>中可以通过<code>$</code>符号引用变量，简化文件。变量定义以等号连接，类似于宏定义，将需要多处使用的字符串存入变量中可以方便修改和管理，如本例，可定义以下变量：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objs = main.o add.o  <span class="comment"># 引用方法 $(objs)</span></span><br></pre></td></tr></table></figure>
<p>简化后的<code>makefile</code>如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">objs = main.o add.o</span><br><span class="line">test : <span class="variable">$(objs)</span></span><br><span class="line">	cc -o test <span class="variable">$(objs)</span></span><br><span class="line"></span><br><span class="line">main.o : main.c main.h add.h</span><br><span class="line">	cc -c main.c</span><br><span class="line"></span><br><span class="line">add.o : add.c add.h</span><br><span class="line">	cc -c add.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># make clean : use to clean all the object files</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">	rm test (objs)</span><br></pre></td></tr></table></figure>
<p>当项目文件很多时，合理使用变量可以大大简化<code>makefile</code>的编写和修改。</p>
<h3 id="makefile-简化版2"><a href="#makefile-简化版2" class="headerlink" title="makefile 简化版2"></a>makefile 简化版2</h3><p>要知道，<code>make</code>非常强大，具有<strong>自动推导</strong>的功能，可以自动推导”.o”目标文件下面的指令。如果目标文件为”main.o”，那么指令必然为”cc -c main.c”，依赖于<code>make</code>指令的推导功能，<code>makefile</code>可以省略该指令的编写。</p>
<p>此外，每个”.o”目标文件的依赖文件必然包含一个文件名相同的”.c”文件，该文件可以通过自动推导得出，所以在<code>makefile</code>中同样可以省略。</p>
<p>根据以上规则可以对<code>makefile</code>进一步简化：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">objs = main.o add.o</span><br><span class="line">test : <span class="variable">$(objs)</span></span><br><span class="line">	cc -o test <span class="variable">$(objs)</span></span><br><span class="line"></span><br><span class="line">main.o : main.h add.h</span><br><span class="line">add.o : add.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># make clean : use to clean all the object files</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">	rm test (objs)</span><br></pre></td></tr></table></figure>
<h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>编写好<code>makefile</code>文件后，便可以使用<code>make</code>指令进行编译链接并生成可执行文件了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ make  <span class="comment"># 生成可执行文件</span></span><br><span class="line">cc -c main.c</span><br><span class="line">cc -c add.c</span><br><span class="line">cc -o <span class="built_in">test</span> main.o add.o</span><br><span class="line">$ ls</span><br><span class="line">add.c  add.h  add.o  main.c  main.h  main.o  makefile  <span class="built_in">test</span></span><br><span class="line">$ ./<span class="built_in">test</span>  <span class="comment"># 执行可执行文件</span></span><br><span class="line">10 + 1 = 11</span><br><span class="line">$ make clean  <span class="comment"># 清除所有目标文件</span></span><br><span class="line">rm <span class="built_in">test</span> main.o add.o</span><br><span class="line">$ ls</span><br><span class="line">add.c  add.h  main.c  main.h  makefile</span><br></pre></td></tr></table></figure>
<p>至此，一个简单的<code>makefile</code>编写过程及执行过程便结束了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ubuntu </tag>
            
            <tag> makefile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装Ubuntu后的系统精简与美化]]></title>
      <url>http://www.litreily.top/2017/06/11/initial-ubuntu/</url>
      <content type="html"><![CDATA[<p>安装好Ubuntu系统后，通常需要卸载许多用不上的软件，并安装一些常用以及实用的软件。当然，Ubuntu默认的主题实在不敢恭维，为此有必要换一套主题予以美化。</p>
<h2 id="系统精简"><a href="#系统精简" class="headerlink" title="系统精简"></a>系统精简</h2><p>删除不必要的软件</p>
<h3 id="删除libreoffice"><a href="#删除libreoffice" class="headerlink" title="删除libreoffice"></a>删除libreoffice</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove libreoffice-common</span><br></pre></td></tr></table></figure>
<h3 id="删除Amazon链接"><a href="#删除Amazon链接" class="headerlink" title="删除Amazon链接"></a>删除Amazon链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-webapps-common</span><br></pre></td></tr></table></figure>
<h3 id="删除其它极少用的软件"><a href="#删除其它极少用的软件" class="headerlink" title="删除其它极少用的软件"></a>删除其它极少用的软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku</span><br><span class="line">sudo apt-get remove onboard deja-dup</span><br></pre></td></tr></table></figure>
<h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim    <span class="comment"># Vim</span></span><br><span class="line">sudo apt-get install git    <span class="comment"># Git</span></span><br></pre></td></tr></table></figure>
<p>安装<code>Git</code>之后需要配置以下全局变量，并生成<code>ssh-key</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"emailname@email.com"</span></span><br><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"emailname@email.com"</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">gedit id_rsa.pub    <span class="comment"># 将文件内容添加至github或其它代码托管平台</span></span><br></pre></td></tr></table></figure>
<h3 id="系统指示器Syspeek"><a href="#系统指示器Syspeek" class="headerlink" title="系统指示器Syspeek"></a>系统指示器Syspeek</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard/webupd8    </span><br><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install syspeek</span><br></pre></td></tr></table></figure>
<h3 id="Hexo-amp-amp-Gitbook"><a href="#Hexo-amp-amp-Gitbook" class="headerlink" title="Hexo &amp;&amp; Gitbook"></a>Hexo &amp;&amp; Gitbook</h3><p>首先安装<code>node.js</code>与<code>npm</code>,然后使用<code>npm</code>安装<code>hexo</code>与<code>gitbook</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install -g gitbook-cli</span><br><span class="line">gitbook -V</span><br></pre></td></tr></table></figure>
<h3 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h3><ul>
<li>汉字输入法： 搜狗拼音</li>
<li>音乐播放器： 网易云音乐</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb   <span class="comment"># 下载安装包后执行该指令</span></span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
<ul>
<li>视频播放器： VLC（自带software 管理软件中下载安装）</li>
<li>网络浏览器： Google Chrome</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb   <span class="comment"># 下载安装包后执行该指令</span></span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
<ul>
<li>截图软件： Shutter</li>
<li>社交软件： <a href="https://github.com/geeeeeeeeek/electronic-wechat.git" target="_blank" rel="noopener">微信</a></li>
<li>办公软件： WPS</li>
</ul>
<h2 id="系统美化"><a href="#系统美化" class="headerlink" title="系统美化"></a>系统美化</h2><p>参考资料：<a href="http://www.jcodecraeer.com/plus/view.php?aid=3502" target="_blank" rel="noopener">http://www.jcodecraeer.com/plus/view.php?aid=3502</a></p>
<h3 id="安装Flatabulous主题"><a href="#安装Flatabulous主题" class="headerlink" title="安装Flatabulous主题"></a>安装Flatabulous主题</h3><ul>
<li>首先安装 Unity-tweak-tool软件（从Ubuntu软件商店可以找到）</li>
<li>然后在<code>~</code>目录下创建系统主题文件夹<code>.themes</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.themes</span><br></pre></td></tr></table></figure>
<ul>
<li>在<a href="https://github.com/anmoljagetia/Flatabulous/archive/master.zip" target="_blank" rel="noopener">https://github.com/anmoljagetia/Flatabulous/archive/master.zip</a> 下载 Flatabulous 主题</li>
<li>解压主题后移动到<code>~/.themes</code>文件夹下</li>
<li>打开tweak软件，在theme面板中选择Flatabulous主题</li>
</ul>
<h3 id="安装ultra-flat-icons图标主题"><a href="#安装ultra-flat-icons图标主题" class="headerlink" title="安装ultra-flat-icons图标主题"></a>安装ultra-flat-icons图标主题</h3><ul>
<li>安装图标主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab/icons  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure>
<ul>
<li>在tweak软件中的icon面板中选择Ultra-flat</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - DAQ 助手详解]]></title>
      <url>http://www.litreily.top/2017/04/24/labview-DAQ/</url>
      <content type="html"><![CDATA[<h2 id="1-DAQ-助手简介"><a href="#1-DAQ-助手简介" class="headerlink" title="1. DAQ 助手简介"></a>1. DAQ 助手简介</h2><h3 id="1-1-Express-VI"><a href="#1-1-Express-VI" class="headerlink" title="1.1 Express VI"></a>1.1 Express VI</h3><p><code>Express VI</code> 是 LabVIEW 7 及更高版本拥有的快速 VI，此类 VI 将一些常见的功能打包，然后封装在简单易用的交互式的 VI 程序中，方便开发人员配置参数和实现功能。</p>
<p><code>DAQ</code> 助手是完成信号采集任务的常用工具，以 <code>Express VI</code> 的形式呈现，具有交互式的配置界面，配合 NI 公司提供的采集卡，可以完成绝大部分的信号采集任务。</p>
<h3 id="1-2-使用方法简述（采集-AI-信号）"><a href="#1-2-使用方法简述（采集-AI-信号）" class="headerlink" title="1.2 使用方法简述（采集 AI 信号）"></a>1.2 使用方法简述（采集 AI 信号）</h3><h4 id="1-2-1-选择信号类型"><a href="#1-2-1-选择信号类型" class="headerlink" title="1.2.1 选择信号类型"></a>1.2.1 选择信号类型</h4><p><img src="/assets/labview/daqAssistant/selectSignal.png" alt="DAQ助手信号类型选择界面"></p>
<p>在采集卡（虚拟的或实际的均可）已连接的情况下，从 VI 的程序框图中打开 <code>DAQ</code> 助手，选择待采集信号的类型，此处选择模拟输入电压信号。</p>
<h4 id="1-2-2-选择物理通道"><a href="#1-2-2-选择物理通道" class="headerlink" title="1.2.2 选择物理通道"></a>1.2.2 选择物理通道</h4><p><img src="/assets/labview/daqAssistant/selectChannel.png" alt="DAQ助手物理通道选择界面"></p>
<p>选择通道时，按住<code>Ctrl</code> 或 <code>Shift</code> 可同时选择多路通道</p>
<h4 id="1-2-3-配置信号采集参数"><a href="#1-2-3-配置信号采集参数" class="headerlink" title="1.2.3 配置信号采集参数"></a>1.2.3 配置信号采集参数</h4><p><img src="/assets/labview/daqAssistant/daqConfig.png" alt="DAQ助手通道配置界面"></p>
<p>配置界面中可以进行物理通道的删除与添加，通道名称的修改，接线端连接方式的选择，采集模式的选择等操作，配置界面右侧对于每个选项都有详细说明。</p>
<p>信号采集模式包含“1 采样”、“N 采样”和“连续采样” 3 大类。对于连续采样而言，采样率决定了信号采样的间隔时间，通常将其设为最大有效信号频率的 10 倍左右；采样点数指定了连续采样时的数据缓冲区大小，简单来说，就是每次采样后得到的待处理数据长度，待读取采样与采样率之比就是连续采样的间隔时间。</p>
<p>此外，信号输入范围默认为 <code>-10~10v</code> ；接线端配置默认为差分输入，通常情况下，我们会选择单端输入 <code>RSE</code>，表示一端接 <code>AGND</code>，一端接输入端口，不同的接线端配置方式对应的连线图也不一致，在进行信号端口连线时需要按所选方式进行连接。</p>
<h4 id="1-2-4-启用-TDMS-记录"><a href="#1-2-4-启用-TDMS-记录" class="headerlink" title="1.2.4 启用 TDMS 记录"></a>1.2.4 启用 TDMS 记录</h4><p><img src="/assets/labview/daqAssistant/saveTdms.png" alt="DAQ助手启用TDMS记录"></p>
<p>在配置界面中，还可以选择是否将采集的数据记录至 <code>TDMS</code> 文件中，同时可以选择好默认的存储路径、记录模式和组名。如果信号采集结束后需要实时处理，需要将记录模式设为“记录并读取”，如果仅仅是记录而无需处理，则选择“仅记录”。组名将会显示在 <code>TDMS</code> 文件的分组列表中。</p>
<p>如果记录时间很长，长达几个小时甚至几天时，此时由于数据量过大，可以勾选“包含多个文件”，并规定单个文件的存储容量。</p>
<h4 id="1-2-5-配置接口"><a href="#1-2-5-配置接口" class="headerlink" title="1.2.5 配置接口"></a>1.2.5 配置接口</h4><p><img src="/assets/labview/daqAssistant/daqIcon.png" alt="DAQ助手配置完成图"></p>
<p>当采集信息确定好以后，会在程序框图中生成相应的 <code>DAQ</code> 图标，后续如果需要更改参数，可以参考以下两种方法：</p>
<ol>
<li>双击 <code>DAQ</code> 助手，打开配置界面更改需要更新的参数</li>
<li>通过 <code>DAQ</code> 助手提供的输入接口，从前面板或程序框图修改相应参数</li>
</ol>
<h2 id="2-DAQ-助手程序解析"><a href="#2-DAQ-助手程序解析" class="headerlink" title="2. DAQ 助手程序解析"></a>2. DAQ 助手程序解析</h2><p>对 <code>Express VI</code> 而言，双击无法打开程序框图，打开的是配置界面。此外，<code>Express VI</code> 的程序是动态的，对于 <code>DAQ</code> 助手而言，选择不同的通道数，不同的信号类型，其产生的执行程序都不一样。下面以双通道连续采集模拟输入电压信号为例，解析 <code>DAQ</code> 助手的内部执行程序。</p>
<h3 id="2-1-Express-VI-转标准子-VI"><a href="#2-1-Express-VI-转标准子-VI" class="headerlink" title="2.1 Express VI 转标准子 VI"></a>2.1 Express VI 转标准子 VI</h3><p>想要查看 <code>DAQ</code> 助手的程序框图，必须先将其转换为标准子 VI，转换方法很简单，选择 <code>DAQ</code> 助手，右键选择“打开前面板”或“open front panel”（英文版）。</p>
<h3 id="2-2-整体程序框图"><a href="#2-2-整体程序框图" class="headerlink" title="2.2 整体程序框图"></a>2.2 整体程序框图</h3><p><img src="/assets/labview/daqAssistant/daqDiagram.png" alt="DAQ助手程序框图"></p>
<p>上图是 <code>DAQ</code> 助手的程序框图，可简化为如下图所示的程序流程图，图中的一对移位寄存器代指的是信号采集任务句柄。</p>
<p><img src="/assets/labview/daqAssistant/daqDiagram_visio.png" alt="DAQ助手程序框图"></p>
<h3 id="2-3-程序解析"><a href="#2-3-程序解析" class="headerlink" title="2.3 程序解析"></a>2.3 程序解析</h3><p>下面对以上程序框图中的每个模块进行详细分析。</p>
<h4 id="2-3-1-创建采集任务"><a href="#2-3-1-创建采集任务" class="headerlink" title="2.3.1 创建采集任务"></a>2.3.1 创建采集任务</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_1.png" alt="DAQ助手局部程序框图1"></p>
<p>图中包含两个移位寄存器，上面的寄存器用于存储采集任务的引用句柄，当该句柄无效或首次调用该 VI 时会执行 <code>DAQmx Create Task</code> 函数，即创建新的采集任务，并产生新任务的引用句柄。</p>
<h4 id="2-3-2-生成通道名称"><a href="#2-3-2-生成通道名称" class="headerlink" title="2.3.2 生成通道名称"></a>2.3.2 生成通道名称</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_2.png" alt="DAQ助手局部程序框图2"></p>
<p>添加物理通道前，需要选择好相应的通道名称，模拟输入信号简称 <code>ai</code>，通道名称格式为 <code>ain</code>, n 从 0 开始增加。在此例中，所选通道为 <code>ai0</code> 与 <code>ai1</code>。设备名为 <code>Dev1</code>,所以最终得到的通道名称为 <code>Dev1/ai0</code> 与 <code>Dev1/ai1</code>。正常情况下，该条件结构内的程序仅在首次调用时执行一次。</p>
<h4 id="2-3-3-添加物理通道"><a href="#2-3-3-添加物理通道" class="headerlink" title="2.3.3 添加物理通道"></a>2.3.3 添加物理通道</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_3.png" alt="DAQ助手局部程序框图3"></p>
<p>确定好通道名称后，便可根据需求添加相应的物理通道了，如图所示，标志 ① 连接的是输入接线端配置参数，往下的参数可以参考如下的函数 <code>IO</code> 接口图。之所以用 <code>for</code> 循环，是因为每个采集通道均需调用一次 <code>DAQmx Create Channel</code> 函数。本例创建的通道数为 2，所以 <code>for</code> 循环的执行次数为 2。</p>
<p><img src="/assets/labview/daqAssistant/daqDiagram_3_1.png" alt="DAQ助手局部程序框图3-1"></p>
<h4 id="2-3-4-配置采样时钟"><a href="#2-3-4-配置采样时钟" class="headerlink" title="2.3.4 配置采样时钟"></a>2.3.4 配置采样时钟</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_4.png" alt="DAQ助手局部程序框图4"></p>
<p>对于连续采样模式，必须调用 <code>DAQmx Timing</code> 定时函数，配置好采样率和采样点数。但在此处需要注意的是，<code>DAQ</code> 助手并没有实现采集过程中修改采样频率 <code>Sample rate</code> 的功能，也就是说：在信号采集过程中，无法修改采样频率，直到采集任务出错或停止。如果实际应用中有采集过程中修改采样率的需求，只能另行编写采集程序，这也是 <code>Express VI</code> 不够灵活的一个体现。</p>
<h4 id="2-3-5-配置-TDMS-记录"><a href="#2-3-5-配置-TDMS-记录" class="headerlink" title="2.3.5 配置 TDMS 记录"></a>2.3.5 配置 TDMS 记录</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_5.png" alt="DAQ助手局部程序框图5"></p>
<p><code>TDMS</code> 文件记录是非常常用的功能，可以将采集到的信号快速存储至 <code>.tdms</code> 文件中。使用 <code>DAQmx Configure Logging(TDMS)</code> 函数配置 <code>TDMS</code> 记录功能时，可参考如下接口，设置好记录模式、组名、文件路径等。</p>
<p><img src="/assets/labview/daqAssistant/daqDiagram_5_1.png" alt="DAQ助手局部程序框图5-1"></p>
<h4 id="2-3-6-开始任务"><a href="#2-3-6-开始任务" class="headerlink" title="2.3.6 开始任务"></a>2.3.6 开始任务</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_6.png" alt="DAQ助手局部程序框图6"></p>
<p>当采集任务相关的参数都配置完成后，即可开始任务 <code>DAQmx Start Task</code>。</p>
<p>此前 6 个步骤仅需执行一次，直到下一次重启软件或出现异常。</p>
<h4 id="2-3-7-信号采集"><a href="#2-3-7-信号采集" class="headerlink" title="2.3.7 信号采集"></a>2.3.7 信号采集</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_7.png" alt="DAQ助手局部程序框图7"></p>
<p>开始任务后，物理采集卡就将按照给定的参数开始采集，并将数据存放至采集卡内的缓冲区内，通过相应的 <code>DAQmx Read</code> 函数，选择合适的采样方式（此处选为“模拟1D波形N通道N采样”）， <code>DAQ</code> 驱动程序便会从采集卡的缓冲区中读取数据，并默认以动态数据格式 DDT(Dynamic Data Type) 输出。<code>DAQ</code> 助手返回的动态数据便是该函数返回的数据 <code>data</code>。</p>
<h4 id="2-3-8-异常处理"><a href="#2-3-8-异常处理" class="headerlink" title="2.3.8 异常处理"></a>2.3.8 异常处理</h4><p><img src="/assets/labview/daqAssistant/daqDiagram_8.png" alt="DAQ助手局部程序框图8"></p>
<p>所谓异常处理，指的注意异常情况是采集卡在信号采集过程中被拔出，导致采集任务无法继续执行，此时 <code>DAQ</code> 助手将会停止并清除任务，并将任务的引用句柄重置为空。下一次 while 循环将判断出该空句柄，然后重新创建任务，如果采集任务被顺利创建，说明异常已解除，采集卡已重新连接，采集任务便可自动继续进行；如果采集任务创建失败，则循环创建任务直到成功为止。</p>
<p>当然还有一种非异常情况也会停止并清除任务，那就是用户手动点击停止按钮 stop ，任务正常终止。</p>
<h2 id="3-DAQ-助手程序简化"><a href="#3-DAQ-助手程序简化" class="headerlink" title="3. DAQ 助手程序简化"></a>3. DAQ 助手程序简化</h2><p>从上面的解析可以看出，<code>DAQ</code> 助手作为通用型工具，包含了所有需要的配置参数。<code>DAQ</code> 助手有其方便之处，但同时也存在许多不灵活的地方：</p>
<ol>
<li>经测试，对于单通道和 N 通道的采集任务，DAQ 助手的执行程序结构完全一致，生成通道名称和添加物理通道均采用了 for 循环结构，这对单通道采集原本是不需要的；</li>
<li>实际应用中，添加物理通道时，有许多参数使用默认值即可，过多的参数只会使代码显得冗余；</li>
<li>上述提及的一个问题：无法在采集过程中修改采样率；</li>
<li>存储 TDMS 文件时，默认会存储所有通道的数据，无法单独指定需要进行数据存储的通道；</li>
<li>若要采集编码器的计数值时，使用 <code>DAQ</code> 助手的配置界面无法返回整型的原始计数值。</li>
</ol>
<p>鉴于以上种种原因，在实际编程过程中，完全可以使用底层的 <code>DAQmx</code> 函数编写信号采集程序，或者在原有的 <code>DAQ</code> 助手程序基础上修改和简化。</p>
<h3 id="3-1-简化后程序"><a href="#3-1-简化后程序" class="headerlink" title="3.1 简化后程序"></a>3.1 简化后程序</h3><p>此处提供一个将上述代码简化并添加采样率可修改的程序。</p>
<p><img src="/assets/labview/daqAssistant/daqCustomsize.png" alt="DAQ助手简化改进版"></p>
<p>在该修改版中，去掉了大量的默认参数，减少了条件分支个数；添加了一个反馈节点，用以判断采样率的变化情况，在采样率改变时，该程序将删除原有任务，并重新创建新的任务。</p>
<h3 id="3-2-下载链接"><a href="#3-2-下载链接" class="headerlink" title="3.2 下载链接"></a>3.2 下载链接</h3><p><a href="http://pan.baidu.com/s/1i50wss9" target="_blank" rel="noopener">http://pan.baidu.com/s/1i50wss9</a></p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
            <tag> tdms </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 存储 .cfg 配置文件]]></title>
      <url>http://www.litreily.top/2017/03/25/labview-cfg/</url>
      <content type="html"><![CDATA[<h2 id="1-配置文件简介"><a href="#1-配置文件简介" class="headerlink" title="1. 配置文件简介"></a>1. 配置文件简介</h2><p>在 LabVIEW 应用软件开发过程中，对于稍微大型一点的软件而言，一般都需要在本地文件中保存一些配置参数，如在 windows 系统中安装软件时，安装程序在 C 盘 documents 文件夹下自动创建的用户数据。对于需要更新的配置参数或者重要的常值参数，在 LabVIEW 中可以使用 <code>.cfg</code> 格式的配置文件进行存储与读取。</p>
<h3 id="1-1-应用场合"><a href="#1-1-应用场合" class="headerlink" title="1.1 应用场合"></a>1.1 应用场合</h3><ul>
<li>软件的全局配置参数（如：串口通讯参数，DAQ 采样参数，信号处理参数，···）</li>
<li>软件主界面关闭前的输入、输出控件的最新数值</li>
<li>报表生成时的默认信息（如：署名，标题，摘要，···）</li>
<li>统计量（如：游戏最高分，排行榜排名，参与次数，···）</li>
<li>···</li>
</ul>
<h3 id="1-2-cfg-文件格式"><a href="#1-2-cfg-文件格式" class="headerlink" title="1.2 .cfg 文件格式"></a>1.2 .cfg 文件格式</h3><p>如下所示，<code>.cfg</code> 文件的数据存储格式格式满足标记性语言的特点，有点类似于 <code>JSON</code> 和 <code>XML</code>，但与之不同的是 <code>.cfg</code> 不支持数据嵌套。<code>.cfg</code> 文件以<strong>段</strong>为基本单位、以<strong>键</strong>为最小单位组织数据，<strong>段</strong>包含了相应的<strong>段名</strong>及该段包含的所有键，每个<strong>键</strong>包含了相应的<strong>键名</strong>和<strong>键值</strong>，中间用等号连接。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[段名1]</span><br><span class="line">键名1 = 键值1</span><br><span class="line">键名2 = 键值2</span><br><span class="line">键名3 = 键值3</span><br><span class="line"></span><br><span class="line">[段名2]</span><br><span class="line">键名4 = 键值4</span><br><span class="line">键名5 = 键值5</span><br><span class="line">键名6 = 键值6</span><br><span class="line"></span><br><span class="line">[段名3]</span><br><span class="line">键名7 = 键值7</span><br><span class="line">键名8 = 键值8</span><br></pre></td></tr></table></figure>
<p><strong>举例说明</strong>：某人要保存自己每日的就餐时间，此时可用一个<strong>段</strong>来存储，<strong>段名</strong>为“就餐时间”，三个<strong>键名</strong>依次为早餐、午餐和晚餐，具体的时间以字符串格式存储，存储后的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[就餐时间]</span><br><span class="line">早餐 = 07:30</span><br><span class="line">午餐 = 12:00</span><br><span class="line">晚餐 = 05:30</span><br></pre></td></tr></table></figure>
<h3 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h3><p>LabVIEW 提供的与配置文件存取相关的函数支持以下6种数据类型，其中布尔型即开关量，仅包含 <code>TRUE</code>, <code>FALSE</code> 两个值；路径指的是文件或文件夹的路径。</p>
<ul>
<li>有符号整型： <code>I8</code>, <code>I16</code>, <code>I32</code></li>
<li>无符号整型： <code>U8</code>, <code>U16</code>, <code>U32</code></li>
<li>浮点型： <code>DBL</code>, <code>SGL</code></li>
<li>布尔型： <code>BOOL</code></li>
<li>字符串： <code>STRING</code></li>
<li>路径： <code>PATH</code></li>
</ul>
<h3 id="1-4-变体"><a href="#1-4-变体" class="headerlink" title="1.4 变体"></a>1.4 变体</h3><p>LabVIEW 提供了一种特殊的数据类型——变体，变体类似于 C 语言中的空类型指针 <code>void*</code>，不代表具体的类型，但可以存储任意类型的数据。</p>
<p>在存储配置文件时，可以先将满足 <a href="#1-3-数据类型">1.3</a> 中类型的数据转换为变体数据，然后以变体数组形式存储，方便统一管理；同样，在读取配置文件时，也可以先将数据读取到变体数组中，后续再进一步解析。具体操作步骤后面会有详述。</p>
<h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h2><p>了解了配置文件的格式及数据类型，下面介绍如何在 LabVIEW 实现配置文件的存取。</p>
<h3 id="2-1-配置函数"><a href="#2-1-配置函数" class="headerlink" title="2.1 配置函数"></a>2.1 配置函数</h3><p>LabVIEW 提供了以下函数供开发人员使用：</p>
<p><img src="/assets/labview/rwCFG/ConfigFunc.png" alt="ConfigFunc.vi"></p>
<p>但应用较多的与配置文件存取相关的函数主要有：</p>
<pre class="descriptions">
1. 打开配置数据
2. 关闭配置数据
3. 转换至变体
4. 从变体转换至数据
5. 写入键
6. 读取键
</pre>


<h4 id="2-1-1-打开配置数据"><a href="#2-1-1-打开配置数据" class="headerlink" title="2.1.1 打开配置数据"></a>2.1.1 打开配置数据</h4><p><img src="/assets/labview/rwCFG/OpenConfigData.png" alt="OpenConfigData.vi"></p>
<p><code>Open Config Data.vi</code> 用于打开配置文件，如果文件不存在则先创建再打开，返回引用句柄用于后续的数据存取。</p>
<h4 id="2-1-2-关闭配置数据"><a href="#2-1-2-关闭配置数据" class="headerlink" title="2.1.2 关闭配置数据"></a>2.1.2 关闭配置数据</h4><p><img src="/assets/labview/rwCFG/CloseConfigData.png" alt="CloseConfigData.vi"></p>
<p>该函数与 <code>Open Config Data.vi</code> 成对出现，在对配置文件进行存取操作后，需要使用 <code>Close Config Data.vi</code> 关闭对配置文件的引用，释放配置文件占用的内存。</p>
<h4 id="2-1-3-转换至变体"><a href="#2-1-3-转换至变体" class="headerlink" title="2.1.3 转换至变体"></a>2.1.3 转换至变体</h4><p><img src="/assets/labview/rwCFG/ToVariant.png" alt="ToVariant.vi"></p>
<p><code>To Variant.vi</code> 可将任意数据类型的数据转换为变体数据。</p>
<h4 id="2-1-4-从变体转换至数据"><a href="#2-1-4-从变体转换至数据" class="headerlink" title="2.1.4 从变体转换至数据"></a>2.1.4 从变体转换至数据</h4><p><img src="/assets/labview/rwCFG/VariantToData.png" alt="VariantToData.vi"></p>
<p><code>Variant To Data.vi</code> 是 <code>To Variant.vi</code> 的逆过程，通过指定数据类型，可以将变体数据还原为转换为变体前的数据。</p>
<h4 id="2-1-5-写入键"><a href="#2-1-5-写入键" class="headerlink" title="2.1.5 写入键"></a>2.1.5 写入键</h4><p><img src="/assets/labview/rwCFG/WriteKey.png" alt="WriteKey.vi"></p>
<p>除错误簇外，<code>Write Key.vi</code> 包含4个输入：<strong>段</strong>对应字符串类型的<strong>段名</strong>，<strong>键</strong>对应字符串类型的<strong>键名</strong>，<strong>值</strong>对应任意数据类型的<strong>键值</strong>，<strong>引用句柄</strong>用于连接配置文件的引用句柄。说明：LabVIEW 中的引用句柄等同于 <code>C/C++</code> 语言中的引用，即变量的别名。</p>
<p>该函数根据输入参数将键名和键值保存到配置文件的指定段中，如果是首次创建指定的段，则自动在配置文件中添加新的段及键；如果段已存在键不存在，则仅添加键；如果段与键均已存在，则仅用新键值替换旧键值。</p>
<h4 id="2-1-6-读取键"><a href="#2-1-6-读取键" class="headerlink" title="2.1.6 读取键"></a>2.1.6 读取键</h4><p><img src="/assets/labview/rwCFG/ReadKey.png" alt="ReadKey.vi"></p>
<p>使用 <code>Read Key.vi</code> ，通过<strong>段名</strong>和<strong>键名</strong>，我们可以从指定文件中获取所需的数据。</p>
<p>需要说明的是， <code>Read Key.vi</code> 是多态VI，其键值的数据类型是多态可选的，可选项参见 <a href="#1-3-数据类型">1.3</a>。</p>
<h3 id="2-2-存储配置文件"><a href="#2-2-存储配置文件" class="headerlink" title="2.2 存储配置文件"></a>2.2 存储配置文件</h3><p>说了一大堆，那到底如何存储呢，还是用程序框图来说话吧，一目了然。</p>
<ul>
<li><strong><code>RWConfigData.vi</code> 写操作</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/WriteToFile.png" alt="RWConfigData.vi Write Data"></p>
<p>该 VI 名为 <strong><code>RWConfigData.vi</code></strong> ，不涉及配置文件的打开与关闭，是配置文件打开以后的操作，文件的引用句柄为 <code>refnum in</code> 和 <code>refnum out</code> 。函数接口如下：</p>
<p><img src="/assets/labview/rwCFG/WriteToFileInterface.png" alt="RWConfigData.vi Interface"></p>
<p>插播一句，在 LabVIEW 中，许多函数的输入输出都是成对出现的，尤其是引用句柄和错误簇，这有点类似于 java 语言中用于返回当前对象的 this 指针，便于实现函数的链式调用，令代码更简洁，并增强代码的可读性。</p>
<p>言归正传，以上程序框图中，<code>CMD</code> 是个枚举变量，包含 <code>Write</code> 和 <code>Read</code> 两个值，分别对应文件的写操作和读操作；输入参数 <code>DataParam</code> 是一个簇，包含了需要存储的数据，簇包含的数据元素如下：</p>
<pre>
SectionName : 段名（单个字符串）
KeyName : 键名（一维的字符串数组）
DataType : 数据类型（一维的枚举数组，枚举包含了文中提及的 6 种数据类型）
VariantData : 键值数据（一维的变体数组）
</pre>

<p>用变体数组的方式可以批量处理待存参数，高效便捷，唯一繁琐的一点就是需要先将待存参数均都转换为变体数据。上面的程序框图仅显示了布尔型数据的存储方式，其它类型的数据的存储方式与之相似，每种类型的数据对应一个条件分支。</p>
<p><img src="/assets/labview/rwCFG/WriteToFile1.png" alt="RWConfigData.vi Write Data"></p>
<ul>
<li><strong><code>RWSingleElement.vi</code> 写操作</strong></li>
</ul>
<p>对于单个参数的存储，同样可以使用该函数，结合配置文件的打开、关闭函数，具体代码实现如下：</p>
<p><img src="/assets/labview/rwCFG/WriteSingleData.png" alt="RWSingleElement.vi Write Data"></p>
<p>代码中的元素信息就是某个待存参数的相关信息，用到的存储子 VI 就是上面描述的 <strong><code>RWConfigData.vi</code></strong> 。该程序本身 <strong><code>RWSingleElement.vi</code></strong> 的函数接口如下：</p>
<p><img src="/assets/labview/rwCFG/WriteSingleDataInterface.png" alt="RWSingleElement.vi Interface"></p>
<h3 id="2-3-读取配置文件"><a href="#2-3-读取配置文件" class="headerlink" title="2.3 读取配置文件"></a>2.3 读取配置文件</h3><p>与存储相对应的操作是读取，上面提及的两个VI <strong><code>RWConfigData.vi</code></strong> 和 <strong><code>RWSingleElement.vi</code></strong> 对应的 <code>Read</code> 分支分别如下：</p>
<ul>
<li><strong><code>RWConfigData.vi</code> 读操作</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/ReadFromFile.png" alt="RWConfigData.vi Read Data"></p>
<ul>
<li><strong><code>RWSingleElement.vi</code> 读操作</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/ReadSingleData.png" alt="RWSingleElement.vi Read Data"></p>
<h2 id="3-配置文件存储例程"><a href="#3-配置文件存储例程" class="headerlink" title="3. 配置文件存储例程"></a>3. 配置文件存储例程</h2><p>下面给出一个非常简单的配置文件存取示例程序。</p>
<ul>
<li><strong>示例程序前面板</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/DemoFrontPanel.png" alt="RWConfigFileDemo.vi FrontPanel"></p>
<ul>
<li><strong>示例程序框图 写操作</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/DemoWriteData.png" alt="RWConfigFileDemo.vi Block diagram: Write"></p>
<ul>
<li><strong>示例程序框图 读操作</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/DemoReadData.png" alt="RWConfigFileDemo.vi Block diagram: Read"></p>
<ul>
<li><strong>示例程序 执行结果</strong></li>
</ul>
<p><img src="/assets/labview/rwCFG/DemoResultFile.png" alt="RWConfigFileDemo.vi Result File"></p>
<h2 id="4-下载链接"><a href="#4-下载链接" class="headerlink" title="4. 下载链接"></a>4. 下载链接</h2><p><a href="http://pan.baidu.com/s/1eRRVqRg" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRRVqRg</a></p>
<p>PS：最后友情说明一下，其实文件扩展名不一定要设为 <code>.cfg</code> ，其它类似 <code>.ini</code> , <code>.sys</code> 等扩展名也都是可以的。</p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的代码托管平台]]></title>
      <url>http://www.litreily.top/2017/03/23/code-Platform/</url>
      <content type="html"><![CDATA[<p>作为一名程序员，最不缺的就是代码，那自然得选择个好用的代码托管平台，本文将对常用的几个平台进行简要描述。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><img src="/assets/introduction/codePlatform/github.png" alt="github"></p>
<p>毋庸置疑，<a href="https://github.com/" target="_blank" rel="noopener">Github</a> 是全球应用最广的代码托管平台，兼社交平台，本博客便承载于 Github 的 pages 服务。但是使用 Github 保存私有项目是要收费的，所以我主要用其管理可公布于众的开源项目。</p>
<h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p><img src="/assets/introduction/codePlatform/gitlab.png" alt="gitLab"></p>
<p><a href="https://gitlab.com/" target="_blank" rel="noopener">gitLab</a> 相比于 <code>Github</code> 具有更多的特性，官方点明的特性有：</p>
<ul>
<li>Unlimited repositories</li>
<li>Unlimited private collaborators</li>
<li>10GB disk space per project (including Git LFS)</li>
<li>Unlimited total disk space</li>
<li>Completely free, no credit card required</li>
<li>Unlimited CI Runners to do parallel testing</li>
<li>Alternate SSH port for git+ssh (443)</li>
</ul>
<h2 id="Visual-Studio-Team-Services-VSTS"><a href="#Visual-Studio-Team-Services-VSTS" class="headerlink" title="Visual Studio Team Services(VSTS)"></a>Visual Studio Team Services(VSTS)</h2><p><img src="/assets/introduction/codePlatform/VS-team-services.png" alt="VS Team Services"></p>
<p>微软提供的 <a href="https://www.visualstudio.com/team-services/" target="_blank" rel="noopener">Team Services</a> 也是相当出色的团队协作服务平台，为开发人员或团队协助开发提供线上服务，提供了项目管理、版本控制、自动建置、自动测试、部署发行管理等功能，并且支持各种语言、开发平台或是 IDE 工具等，五人以下团队可免费使用。</p>
<p>微软的亲儿子 <a href="https://www.visualstudio.com/" target="_blank" rel="noopener">Visual Studio</a> 现已更新至 2017 版，从早期版本便已集成了 <code>VSTS</code> 工具，在 <code>VS</code> 中，配合 <code>git</code> 或 Team Foundation Version Control (<code>TFVC</code>) 版本控制系统，从团队资源管理器可以方便上传代码至 <code>VSTS</code> 服务器，还可以从 <code>Github</code> 等其它平台进行项目克隆。我通常在使用 <code>VS</code> 进行软件开发时可用它来管理代码。</p>
<p><img src="/assets/introduction/codePlatform/VSTS.png" alt="VSTS"></p>
<h2 id="Bitbucket"><a href="#Bitbucket" class="headerlink" title="Bitbucket"></a>Bitbucket</h2><p><img src="/assets/introduction/codePlatform/bitbucket.png" alt="Bitbucket"></p>
<p><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> 是一个源代码托管网站，采用 Mercurial 和 git 作为版本控制系统，对于小等于5人的小团队提供免费托管服务，算是非常不错的 <code>Github</code> 替代品。</p>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><img src="/assets/introduction/codePlatform/coding.png" alt="coding"></p>
<p><a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 官方介绍：</p>
<blockquote>
<p>CODING 是国内首个一站式云端软件服务平台，于 2014 年 2 月在深圳成立，并于北京、上海、成都、西雅图设立分部。在云计算时代，CODING 致力于通过技术创新推动软件开发与交付模式的转变，让开发更简单。</p>
</blockquote>
<p>coding 是国内少有的做得非常棒的代码托管平台之一，于 2016 年 3 月 2 日收购了 2011 年成立的 <a href="https://coding.net/gitcafe.html" target="_blank" rel="noopener">GitCafe</a>，能够免费存储私有项目和开源项目，包含有趣的社交平台 “冒泡”，大型的众包平台 “码市”，同样支持 pages 服务，我主要用其管理私有项目。</p>
<h2 id="华为-DevCloud"><a href="#华为-DevCloud" class="headerlink" title="华为 DevCloud"></a>华为 DevCloud</h2><p><img src="/assets/introduction/codePlatform/devCloud.png" alt="DevCloud"></p>
<p><code>2017.3.22</code>参加了华为在青岛香格里拉酒店举办的软件开发云大会，又了解了一款企业级的集华为研发实践、前沿研发理念、先进研发工具为一体的研发云平台 <a href="http://www.hwclouds.com/devcloud/" target="_blank" rel="noopener">DevCloud</a> ，面向开发者提供研发工具服务，让软件开发简单高效，对国内开发者而言绝对是一大福音了。同样，该平台功能强大，自然也少不了基础的代码托管功能。</p>
<p><img src="/assets/introduction/codePlatform/devCloudFuncs.png" alt="DevCloudFuntions"></p>
<h2 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h2><p><img src="/assets/introduction/codePlatform/codeCloud.png" alt="codeCloud"></p>
<p><a href="http://git.oschina.net/" target="_blank" rel="noopener">码云</a> 依托于国内知名网站 <a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国</a>，界面与 <code>Github</code> 非常相像，可免费托管私有、开源项目。</p>
<h2 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h2><p><img src="/assets/introduction/codePlatform/csdnCode.png" alt="csdnCode"></p>
<p><a href="http://bbs.csdn.net/" target="_blank" rel="noopener">CSDN</a> 号称全球最大中文IT社区，社区内的 <a href="https://code.csdn.net/" target="_blank" rel="noopener">CODE</a> 模块为开发者提供了代码托管服务，每个项目的使用空间为<code>1GB</code>.</p>
<p>本人目前作为学生党，最常用的还是 <code>Github</code> 和 <code>Coding</code> ，平台再多，还是要选择最合适自己的嘛。</p>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> VS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Schlumberger Digiscope]]></title>
      <url>http://www.litreily.top/2016/12/29/mwd-digiscope/</url>
      <content type="html"><![CDATA[<h2 id="Digiscope"><a href="#Digiscope" class="headerlink" title="Digiscope"></a>Digiscope</h2><iframe src="http://www.tudou.com/programs/view/html5embed.action?type=0&code=__B-y_oAnh4&lcode=&resourceId=98721707_06_05_99" allowtransparency="true" allowfullscreen="true" allowfullscreeninteractive="true" scrolling="no" border="0" frameborder="0" style="width:100%;height:400px;"></iframe>

<h3 id="Slimhole-measurements-while-drilling"><a href="#Slimhole-measurements-while-drilling" class="headerlink" title="Slimhole measurements while drilling"></a>Slimhole measurements while drilling</h3><ul>
<li>High-quality data for reservoir description</li>
<li>High-speed telemetry for faster data</li>
<li>Strong signal for deeper wells</li>
</ul>
<h3 id="DigiScope-Two-Stage-Turbine"><a href="#DigiScope-Two-Stage-Turbine" class="headerlink" title="DigiScope Two-Stage Turbine"></a>DigiScope Two-Stage Turbine</h3><p>High power for a full slimhole suite of LWD services, enabling complete reservoir description</p>
<h3 id="DigiScope-Advanced-Modulation"><a href="#DigiScope-Advanced-Modulation" class="headerlink" title="DigiScope Advanced Modulation"></a>DigiScope Advanced Modulation</h3><p>High-speed and high-quality data with smooth phase shift keying (SPSK) for a strong signal in the deepest wells</p>
<ul>
<li>Physical bit rate up to 36 bps</li>
<li>Orion II data compression effective bit rate &gt; 140 bps</li>
<li>Wide frequency range of 0.25-24Hz</li>
</ul>
<h3 id="MWD-data-for-drilling"><a href="#MWD-data-for-drilling" class="headerlink" title="MWD data for drilling"></a>MWD data for drilling</h3><ul>
<li>Direction &amp; inclination</li>
<li>Toolface</li>
<li>Shock &amp; vibration</li>
<li>Azimuthal gamma ray</li>
<li>Annular pressure while drilling</li>
<li>Internal pressure while drilling</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p>Source Link: <a href="http://www.slb.com/services/drilling/mwd_lwd/mwd/slimhole_measurement_while_drilling.aspx" target="_blank" rel="noopener">http://www.slb.com/services/drilling/mwd_lwd/mwd/slimhole_measurement_while_drilling.aspx</a></p>
</blockquote>
<ul>
<li><a href="http://www.360doc.com/content/16/1031/22/37063808_602893994.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/16/1031/22/37063808_602893994.shtml</a></li>
<li><a href="http://d.wanfangdata.com.cn/Periodical/syjx201607005" target="_blank" rel="noopener">http://d.wanfangdata.com.cn/Periodical/syjx201607005</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> video </tag>
            
            <tag> LWD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Word排版 - 章节编号]]></title>
      <url>http://www.litreily.top/2016/12/28/word-numbering/</url>
      <content type="html"><![CDATA[<p>在论文攥写过程中，少不了对文档进行排版，而对章节名称进行编号就是排版中的一环，本文将以Word2016为例进行说明。</p>
<h2 id="添加标题并设置标题样式"><a href="#添加标题并设置标题样式" class="headerlink" title="添加标题并设置标题样式"></a>添加标题并设置标题样式</h2><p>在word文档中添加好标题，然后对各个标题按层级顺序设置好对应的标题样式。</p>
<p><img src="/assets/word/numbering/addTitle.png" alt="addTitle"></p>
<h2 id="选择默认的多级列表样式"><a href="#选择默认的多级列表样式" class="headerlink" title="选择默认的多级列表样式"></a>选择默认的多级列表样式</h2><p>在菜单栏的“开始”选项卡中选择如下所示的多级列表，单击选中后点击底部的“定义新的多级列表”</p>
<p><img src="/assets/word/numbering/selectType.png" alt="selectType"></p>
<h2 id="定义新的多级列表"><a href="#定义新的多级列表" class="headerlink" title="定义新的多级列表"></a>定义新的多级列表</h2><p>在弹出的设置界面中点击“更多”，然后依次设置三层标题样式</p>
<h3 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h3><p>在编号格式中添加前缀和后缀，在后面添加两个空格，取消制表符，并将文本缩进位置设为0厘米，最后将该样式链接到 “标题1”。</p>
<p><img src="/assets/word/numbering/type1.png" alt="type1"></p>
<h3 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h3><p>与一级标题不同的是，二级标题需要勾选右下方的 “正规形式编号”。</p>
<p><img src="/assets/word/numbering/type2.png" alt="type2"></p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>三级标题和二级标题的样式类似，照着来一遍就行。</p>
<p><img src="/assets/word/numbering/type3.png" alt="type3"></p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>点击确定以后，便可以看到所有标题都已经按给定格式添加好了编号。</p>
<p><img src="/assets/word/numbering/effect.png" alt="effect"></p>
<blockquote>
<p>Notes：</p>
<ol>
<li>由于有的一级标题可能不需要编号，如<strong>参考文献</strong>，所以可以在设计多级列表时把右上角的 “将级别链接到样式” 选为 “(无样式)”，设置好后。对于需要编号的一级标题，可以手动选择标题后选择该多级列表样式。</li>
<li>注意千万不要在设置编号的时候把默认的数字1删掉，即使自己后来再重新写上也不行，因为默认给定的数字都具有自动编号功能，自己手动加上的将视为固定字符而无法完成自动编号。</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Office </category>
            
        </categories>
        
        
        <tags>
            
            <tag> office </tag>
            
            <tag> word </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RSS简介]]></title>
      <url>http://www.litreily.top/2016/12/26/RSS-descr/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前看到好多网站都有下面这个图标，然后点进去就出来个<code>xml</code>文件，一直不明白这个是干什么的，后来自己使用<code>jekyll</code>创建博客，发现自动生成了一个<code>feed.xml</code>，也不明白这是干啥的。</p>
<p><img src="/assets/rss/rss.jpg" alt="RSS logo"></p>
<p>直到近日使用<code>Hexo</code>创建博客，又遇到<code>RSS</code>配置问题，这才决定一探究竟。经过搜索，知道 <code>RSS</code> (Really Simple Syndication, 简易信息聚合)是一种基于<code>XML</code>标准，广泛用于互联网的内容包装和投递协议。</p>
<p>而前面所说的<code>feed.xml</code>就是一个<code>RSS</code>文件，当我们把rss文件通过链接形式放在自己的博客网站上后，其他人就能通过这个链接订阅自己的博客了。</p>
<p>在这个信息爆炸的时代，使用RSS订阅能更快速地获取自己想要关注的信息，避免浪费大量时间在网络上漫无目的的瞎逛。</p>
<h2 id="RSS源"><a href="#RSS源" class="headerlink" title="RSS源"></a>RSS源</h2><p>了解了什么是<code>rss</code>后，我们需要知道的就是如果获取RSS资源，现在的大部分新闻网站和博客网站都提供了RSS订阅功能。如何分辨一个网站是否支持RSS订阅功能，目前我所知道的方法包括：</p>
<ol>
<li>查找网站中的 RSS logo</li>
<li>标注了 “RSS” 文字的地方</li>
<li>标注了 “订阅” 相关的链接</li>
</ol>
<p>嫌麻烦，当然可以找别人已经总结好的订阅源：</p>
<ol>
<li><a href="https://www.zhihu.com/question/19580096" target="_blank" rel="noopener">知乎-你必读的 RSS 订阅源有哪些？</a></li>
<li><a href="https://www.zhihu.com/question/19564031" target="_blank" rel="noopener">哪些 RSS 值得订阅到阅读器？</a></li>
<li>本站点博客：<a href="http://www.litreily.top/atom.xml">http://www.litreily.top/atom.xml</a></li>
<li>本人的Lofter博客：<a href="http://litreily.lofter.com/rss" target="_blank" rel="noopener">http://litreily.lofter.com/rss</a></li>
</ol>
<p>下面这些是我目前订阅的一些资源：</p>
<ol>
<li>知乎日报：<a href="http://feeds.feedburner.com/zhihu-daily" target="_blank" rel="noopener">http://feeds.feedburner.com/zhihu-daily</a></li>
<li>知乎每日精选：<a href="https://www.zhihu.com/rss" target="_blank" rel="noopener">https://www.zhihu.com/rss</a></li>
<li>月光博客：<a href="http://feed.williamlong.info/" target="_blank" rel="noopener">http://feed.williamlong.info/</a></li>
<li>优设-UISDC：<a href="http://www.uisdc.com/feed" target="_blank" rel="noopener">http://www.uisdc.com/feed</a></li>
<li>异次元软件世界：<a href="http://feed.iplaysoft.com/" target="_blank" rel="noopener">http://feed.iplaysoft.com/</a></li>
<li>天涯小筑：<a href="http://tvfantasy.net/feed/" target="_blank" rel="noopener">http://tvfantasy.net/feed/</a></li>
<li>阮一峰的网络日志：<a href="http://www.ruanyifeng.com/blog/atom.xml" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/atom.xml</a></li>
<li>极客公园：<a href="http://www.geekpark.net/rss" target="_blank" rel="noopener">http://www.geekpark.net/rss</a></li>
<li>极客范：<a href="http://www.geekfan.net/feed/" target="_blank" rel="noopener">http://www.geekfan.net/feed/</a></li>
<li>互联网的那些事：<a href="http://www.alibuybuy.com/feed" target="_blank" rel="noopener">http://www.alibuybuy.com/feed</a></li>
</ol>
<h2 id="RSS阅读器"><a href="#RSS阅读器" class="headerlink" title="RSS阅读器"></a>RSS阅读器</h2><p>有了RSS资源，该用什么工具查看呢，这个通常分在线和离线两种。</p>
<ul>
<li><p>在线网站：<a href="http://reader.youdao.com/" target="_blank" rel="noopener">有道阅读</a>，<a href="http://www.yilan.io/" target="_blank" rel="noopener">一览</a> …</p>
</li>
<li><p>离线软件：<a href="http://www.feeddemon.com/" target="_blank" rel="noopener">FeedDemon</a>，<a href="http://www.appinn.com/inoreader/" target="_blank" rel="noopener">inoreader</a> …</p>
</li>
</ul>
<p>更详细的可以看这篇：<a href="https://www.zhihu.com/question/28808592" target="_blank" rel="noopener">2015 国内最好的 RSS 阅读器是什么？</a></p>
<h3 id="FeedDemon"><a href="#FeedDemon" class="headerlink" title="FeedDemon"></a>FeedDemon</h3><p>最后简单讲讲我现在用的离线软件 —— FeedDemon，用法极为简单，打开软件后使用快捷键 <code>Ctrl+N</code> 打开 <code>Subscrobe</code> 添加界面，输入rss文件链接后点击两次<code>next</code>即可。</p>
<p><img src="/assets/rss/feedDemon-addsite.png" alt="feedDemon-addSite"></p>
<p>下面这是我的订阅情况</p>
<p><img src="/assets/rss/feedDemon-sites.png" alt="feedDemon-sites"></p>
<blockquote>
<p>Notes:</p>
<ol>
<li>如果当前页没有感兴趣的文章，可以使用快捷键 <code>Ctrl+D</code> 直接将整页设为“已读”，并自动跳至下一页或下一个订阅源。</li>
<li>该软件包含三种列表模式：标题、摘要和全文</li>
<li>该软件包含三种排序依据：订阅源、时间和标题</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RSS </tag>
            
            <tag> Feed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建站日志]]></title>
      <url>http://www.litreily.top/2016/12/12/blog-log/</url>
      <content type="html"><![CDATA[<p>使用 <code>hexo</code> 建站后，改用了新的主题，但存在许多问题，后续将不断修复更新，本文将记录主要的更新内容。</p>
<h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><p>在使用 <a href="https://github.com/yumemor/hexo-theme-primer" target="_blank" rel="noopener">primer</a> 主题之前，我使用 <code>jekyll</code> 建站，配合 <code>coding-pages</code> 服务部署网站，站点所有样式均为自定义。</p>
<h3 id="Infomation"><a href="#Infomation" class="headerlink" title="Infomation"></a>Infomation</h3><ul>
<li><code>jekyll</code> + <code>coding-pages</code> 建站</li>
<li><code>url</code>: <a href="http://www.litreily.top/">www.litreily.top</a></li>
<li>评论系统：<code>disqus</code> | 友言</li>
<li>统计服务：<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a></li>
</ul>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p><img src="/assets/log/jekyll_home.png" alt="jekyll-homepage"></p>
<p><img src="/assets/log/jekyll_blog.png" alt="jekyll-blogpage"></p>
<p><img src="/assets/log/jekyll_category.png" alt="jekyll-category"></p>
<p><img src="/assets/log/jekyll_about.png" alt="jekyll-about"></p>
<h2 id="2016-12-11"><a href="#2016-12-11" class="headerlink" title="2016-12-11"></a>2016-12-11</h2><p>经好友 <a href="https://www.smslit.top/" target="_blank" rel="noopener">smslit</a> 推荐，使用 <code>hexo</code> 主题建站，纠结许久后决定使用 <code>primer</code> 主题，并根据个人需求进行定制和优化。好了，下面对建站过程进行简要介绍。</p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li>安装 <code>hexo</code></li>
</ul>
<p>在确保安装好 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 以及 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 的情况下执行以下指令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init hexoBlog</span><br><span class="line">$ <span class="built_in">cd</span> hexoBlog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p><code>hexo</code>系统默认下载主题 <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">landscape</a> ，折腾了一小会觉得除了代码高亮不错外，其它样式略显一般，所以直接放弃，改用 <a href="https://github.com/yumemor/hexo-theme-primer" target="_blank" rel="noopener">primer</a>。</p>
<ul>
<li>下载 <code>primer</code></li>
</ul>
<p>在 <code>hexoBlog\themes</code> 目录下克隆主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yumemor/hexo-theme-primer.git</span><br></pre></td></tr></table></figure>
<ul>
<li>新建 <code>github</code> 远程仓库</li>
</ul>
<p>为了使用 <code>github pages</code> ,需要将仓库名称设为 <code>[username].github.io</code> ，后续配置 <code>_config.yml</code> 时，需要将 <code>deploy</code> 的属性 <code>repo</code> 设为该仓库目录。</p>
<ul>
<li>安装插件</li>
</ul>
<p>为了使用 <code>hexo</code> 的发布功能、站内搜索等功能，需要安装以下插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ npm install hexo-renderer-less --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ul>
<li>修改 <strong>根目录</strong> 下的 <code>_config.yml</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">LITREILY</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">simple</span> <span class="string">life</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Stay</span> <span class="string">Hungry,</span> <span class="string">Stay</span> <span class="string">Foolish</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">litreily</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">707922098</span><span class="string">@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">www.litreily.top/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="comment">## transplant from jekyll system which post-name write  with date</span></span><br><span class="line"><span class="comment">## so it's needed to change the name of new posts</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.markdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">primer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:Litreily/Litreily.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改 <strong>主题目录</strong> 下的 <code>_config.yml</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menus:</span></span><br><span class="line"><span class="bullet">    -</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">        link:</span> <span class="string">/</span></span><br><span class="line"><span class="bullet">    -</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">        link:</span> <span class="string">categories/</span></span><br><span class="line"><span class="bullet">    -</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">开源项目</span></span><br><span class="line"><span class="attr">        link:</span> <span class="string">open-source/</span></span><br><span class="line"><span class="bullet">    -</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">留言板</span></span><br><span class="line"><span class="attr">        link:</span> <span class="string">message/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Profile</span></span><br><span class="line"><span class="attr">profile:</span></span><br><span class="line"><span class="attr">    location:</span> <span class="string">QingDao,</span> <span class="string">China</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">litreily</span></span><br><span class="line"><span class="attr">    organization:</span> <span class="string">upc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Github</span></span><br><span class="line"><span class="attr">github:</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">litreily</span></span><br><span class="line"><span class="attr">  popular_repos:</span> <span class="string">[hexoBlogProject,jekyllBlog,Student]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Comments</span></span><br><span class="line"><span class="attr">youyan_username:</span> <span class="string">litreily</span></span><br><span class="line"><span class="attr">duoshuo_username:</span> <span class="string">litreily</span> <span class="comment"># 多说配置</span></span><br><span class="line"><span class="comment">#disqus_username: litreily # disqus 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="comment">## google | local</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>
<h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><ul>
<li><p>将 <code>jekyll</code> 系统中的博客复制到文件夹 <code>/source/_posts</code> 中</p>
</li>
<li><p>发布博客</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<ul>
<li>本地服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo serve</span><br></pre></td></tr></table></figure>
<h3 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h3><ul>
<li>解决代码高亮不正常问题</li>
</ul>
<p>由于 <code>primer</code>主题自带高亮样式，所以需要将原有样式禁用，修改 <strong>根目录</strong> 下的 <code>_config.yml</code> 文件</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure>
<ul>
<li>解决首页显示全部博文问题</li>
</ul>
<p>首次使用 <code>primer</code> 主题，成功发布后发现主页博客列表显示了整个博文内容，而非摘要，后来查找主题文件发现原主人使用了 <code>excerpt</code> 变量，而我原先使用的均是 <code>description</code> ，所以将主题文件 <code>primer\layout\_partial\article.ejs</code> 中的 <code>excerpt</code> 替换为 <code>description</code> 后便可以了。</p>
<ul>
<li>解决留言板样式不正常问题</li>
</ul>
<p>首先需要说明的是， <code>primer</code> 主题自带 <strong>首页</strong>、<strong>分类</strong> 、 <strong>开源项目</strong> 和 <strong>留言板</strong> 4个页面，当然在使用时，需要通过</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page open-source</span><br><span class="line">$ hexo new page message</span><br></pre></td></tr></table></figure>
<p>创建好除首页外的其它三个页面后，因为主题中都有 <code>layout</code> 文件 <code>categories.ejs</code> 与 <code>open.ejs</code>与之对应，所以<code>category</code> 和 <code>open-source</code> 都能够正常显示。</p>
<p>而 <code>message</code> 页面并没有，它默认使用 <code>layout:page</code> ，导致页面中保留了目录栏和分享栏，而这并不是我想要的，所以我在 <code>primer\layout\_partial\</code> 中添加 <code>message.ejs</code> 文件，在 <code>article-post.ejs</code> 文件基础上删除了多余项。</p>
<p>最后在 <code>primer\layout\</code> 中添加 <code>message.ejs</code>（与<code>_partial</code>文件夹中的不同）文件，写入以下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">	&lt;%- partial(&apos;_partial/banner-post&apos;,&#123;post: page,index: true&#125;) %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/message&apos;,&#123;post: page,index: false&#125;) %&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>categories 与 tags</li>
</ul>
<p>在 <code>jekyll</code> 中，分类与标签基本是一个概念，但在 <code>hexo</code> 却截然不同， <code>categories</code> 有级别之分（按先后顺序分级），而 <code>tags</code> 并没有。所以需要将原有博客重新归类并设置标签。</p>
<h2 id="2016-12-12"><a href="#2016-12-12" class="headerlink" title="2016-12-12"></a>2016-12-12</h2><ul>
<li>将评论系统改为 <a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a></li>
<li>将原有博文的 <code>h4</code> 标题统一改为 <code>h3</code></li>
<li>添加博文 “建站日志” ，用以记录网站建设过程</li>
<li>将博客部署到域名 <code>www.litreily.top</code></li>
<li>修改 <code>primer\layout\_partial\footer.ejs</code> ，配置 <code>RSS</code> 路径，将 <code>atom.xml</code> 改为 <code>search.xml</code>。</li>
</ul>
<h2 id="2016-12-14"><a href="#2016-12-14" class="headerlink" title="2016-12-14"></a>2016-12-14</h2><ul>
<li>用PS手绘字母 <code>L</code> ，修改网站logo</li>
<li>修复了博文中所有引用 <code>&gt;</code> 显示异常的问题</li>
<li>修复了博文中图片错位的问题</li>
<li>修改了 <code>footer</code> 中的主题链接，已修改为 <a href="https://github.com/Litreily/hexo-theme-primer" target="_blank" rel="noopener">https://github.com/Litreily/hexo-theme-primer</a></li>
</ul>
<h2 id="2016-12-15"><a href="#2016-12-15" class="headerlink" title="2016-12-15"></a>2016-12-15</h2><ul>
<li>对部分博文重新分类，减少 <code>categories</code> 数量</li>
<li>将分类页面的标签栏 <code>Blog Tags</code> 换为分类栏 <code>Blog Categories</code>，并给所有类型添加链接</li>
<li>去除留言板页面中标题下方的时间显示</li>
</ul>
<ul>
<li>在 <code>css/_partial/article.styl</code> 中添加了 <code>pre.descriptions</code> 样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pre</span><span class="selector-class">.descriptions</span></span><br><span class="line">    <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span> !<span class="selector-tag">important</span>;</span><br><span class="line">    <span class="selector-tag">border-left</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#4996D1</span>;</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 0 !<span class="selector-tag">important</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255,255,255,0) !<span class="selector-tag">important</span>;</span><br><span class="line">    <span class="selector-tag">margin-left</span>: 2<span class="selector-tag">em</span>;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"descriptions"</span>&gt;</span></span><br><span class="line">1. step1</span><br><span class="line">2. step2</span><br><span class="line">3. step3</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre class="descriptions">
1. step1
2. step2
3. step3
</pre>

<hr>
<ul>
<li>针对特定博文添加了两个标签样式 <code>tagBlack</code> &amp; <code>tagGrey</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tagBlack</span> <span class="selector-tag">a</span>, <span class="selector-class">.tagGrey</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background-color .<span class="number">2s</span> ease;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tagBlack</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2f3337</span>;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span><br><span class="line">        <span class="selector-tag">background-color</span>: <span class="selector-id">#0C0D0E</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tagGrey</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#535a60</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eff0f1</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#d6d9dc</span>;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#535a60</span>;</span><br><span class="line">        <span class="selector-tag">background-color</span>: <span class="selector-id">#D6D9DC</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tagBlack"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.mymmqm.com/"</span>&gt;</span>莫明棋妙<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="tagBlack"><a href="http://www.mymmqm.com/" target="_blank" rel="noopener">莫明棋妙</a></div>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tagGrey"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xiami.com/artist/68934"</span>&gt;</span>河图<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="tagGrey"><a href="http://www.xiami.com/artist/68934" target="_blank" rel="noopener">河图</a></div>

<hr>
<ul>
<li>在菜单栏加入 <code>标签</code> 项，并在标签页内中加入 <code>标签云</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags.ejs: 标签云界面</span><br><span class="line">tag.ejs:  单个标签页，显示某标签内的博客列表，并在侧边显示带有链接的标签栏</span><br></pre></td></tr></table></figure>
<ul>
<li><p>修改 <code>search.js</code> 与 <code>search-local-js.ejs</code> ，在搜索后的路径中添加 <code>http://</code> , p修复搜索框链接出错问题</p>
</li>
<li><p>在 <code>themes\primer\source</code> 中添加文件 <code>CNAME</code>，添加域名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.litreily.top</span><br></pre></td></tr></table></figure>
<h2 id="2016-12-23"><a href="#2016-12-23" class="headerlink" title="2016-12-23"></a>2016-12-23</h2><ul>
<li>修复RSS，将主题中的 <code>footer.ejs</code> ，将 <code>search</code> 改为 <code>atom</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/atom.xml"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，让博客成功生成 <code>atom.xml</code> 的前提是安装好 <code>feed</code> 生成插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generate-feed --save</span><br></pre></td></tr></table></figure>
<ul>
<li>参考<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，添加站点流量统计服务</li>
</ul>
<p>在 <code>head</code> 中导入所需的 <code>js</code> 文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>并在 <code>banner.ejs</code> 添加两个标签：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"meta-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"octicon octicon-pulse"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span> <span class="attr">class</span>=<span class="string">"views"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"meta-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"octicon octicon-flame"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span> <span class="attr">class</span>=<span class="string">"views"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加百度统计服务</li>
</ul>
<p>在<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>中添加好站点，根据提示获取统计代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _hmt = _hmt || [];</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span></span><br><span class="line"><span class="javascript">    hm.src = <span class="string">"https://hm.baidu.com/hm.js?d34587ee0aac7488b7dd789f9f17f366"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">    s.parentNode.insertBefore(hm, s);</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>head.ejs</code> 中的 <code>&lt;/head&gt;</code> 前添加以上代码，往后便可在百度统计中查看站点的详细信息啦。</p>
<h2 id="2016-12-24"><a href="#2016-12-24" class="headerlink" title="2016-12-24"></a>2016-12-24</h2><ul>
<li>修复RSS无法被正常获取资源的问题</li>
</ul>
<p>今天用 <code>FeedDemon</code> 获取本站点的 <code>RSS</code> 资源，发现能够得到列表，但点击链接后发现多了一个站点根目录的前缀，后来发现是自己的根目录设置有问题。于是我修改了站点配置文件<code>_config.yml</code>，加上前缀<code>http://</code>就ok了。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">http://www.litreily.top/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>但是修改以后发现搜索功能又出问题了，这才意识到原来修改 <code>search.js</code> 与 <code>search-local-js.ejs</code> 才是多此一举，原来的问题同样出在这个<code>url</code>，所以只能又将这两个文件的 <code>http://</code> 去掉了。</p>
<h2 id="2017-04-29"><a href="#2017-04-29" class="headerlink" title="2017-04-29"></a>2017-04-29</h2><ul>
<li>更换新主题 <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant</a>，大道至简</li>
<li>解决代码高亮不正常问题</li>
<li>替换搜索引擎至本地搜索</li>
</ul>
<h2 id="2017-04-30"><a href="#2017-04-30" class="headerlink" title="2017-04-30"></a>2017-04-30</h2><ul>
<li>更新主题样式，修复部分文章显示异常的问题</li>
<li>更新标签云样式</li>
</ul>
<h2 id="2017-05-01"><a href="#2017-05-01" class="headerlink" title="2017-05-01"></a>2017-05-01</h2><ul>
<li>在About页面添加联系方式和一句简短的介绍</li>
<li>在菜单中添加了gitbook笔记的接口</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ul>
<li>国际域名网：<a href="http://www.yuming.top/" target="_blank" rel="noopener">http://www.yuming.top/</a></li>
</ul>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ul>
<li><code>hexo</code>帮助文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li>
<li><code>primer</code>主题：<a href="https://github.com/yumemor/hexo-theme-primer" target="_blank" rel="noopener">https://github.com/yumemor/hexo-theme-primer</a></li>
<li><code>hexo</code>搭建<code>Github-Pages</code>博客填坑教程：<a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="noopener">http://www.jianshu.com/p/35e197cb1273</a></li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li><strong>不蒜子</strong>站点统计：<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
            <tag> hexo </tag>
            
            <tag> log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to hexo]]></title>
      <url>http://www.litreily.top/2016/12/10/hello-hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-named-new-post"><a href="#Create-a-new-post-named-new-post" class="headerlink" title="Create a new post named new post"></a>Create a new post named new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matlab - 常用函数集锦]]></title>
      <url>http://www.litreily.top/2016/12/09/matlab-Funcs/</url>
      <content type="html"><![CDATA[<p>在使用matlab进行信号处理和图形绘制过程中，某些函数被频繁调用，所以有必要将这些常用函数进行总结归类。</p>
<h2 id="滤波函数"><a href="#滤波函数" class="headerlink" title="滤波函数"></a>滤波函数</h2><h3 id="低通滤波"><a href="#低通滤波" class="headerlink" title="低通滤波"></a>低通滤波</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[filtered_signal,filtb,filta]</span>=<span class="title">lopass_butterworth</span><span class="params">(inputsignal,cutoff_freq,Fs,order)</span></span></span><br><span class="line"><span class="comment">% Low-pass Butterworth filter</span></span><br><span class="line"><span class="comment">% [filtered_signal,filtb,filta] = lopass_butterworth(inputsignal,cutoff_freq,Fs,order)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% This is simply a set of built-in Matlab functions, repackaged for ease of</span></span><br><span class="line"><span class="comment">% use by Chad Greene, October 2012.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% inputsignal = input time series</span></span><br><span class="line"><span class="comment">% cutoff_freq = filter corner frequency</span></span><br><span class="line"><span class="comment">% Fs = data sampling frequency</span></span><br><span class="line"><span class="comment">% order = order of Butterworth filter</span></span><br><span class="line"><span class="comment">%  </span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% filtered_signal = the filtered time series</span></span><br><span class="line"><span class="comment">% filtb, filta = filter numerator and denominator (optional)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% load train</span></span><br><span class="line"><span class="comment">% t = (1:length(y))/Fs;</span></span><br><span class="line"><span class="comment">% y_filt = lopass_butterworth(y,900,Fs,4); % cut off at 900 Hz</span></span><br><span class="line"><span class="comment">% figure</span></span><br><span class="line"><span class="comment">% plot(t,y,'b',t,y_filt,'r')</span></span><br><span class="line"><span class="comment">% xlabel('time in seconds')</span></span><br><span class="line"><span class="comment">% box off</span></span><br><span class="line"><span class="comment">% legend('unfiltered','filtered')</span></span><br><span class="line"><span class="comment">% sound(y,Fs)      % play original time series</span></span><br><span class="line"><span class="comment">% pause(2)         % pause two seconds</span></span><br><span class="line"><span class="comment">% sound(y_filt,Fs) % play filtered time series</span></span><br><span class="line"></span><br><span class="line">nyquist_freq = Fs/<span class="number">2</span>;  <span class="comment">% Nyquist frequency</span></span><br><span class="line">Wn=cutoff_freq/nyquist_freq;    <span class="comment">% non-dimensional frequency</span></span><br><span class="line">[filtb,filta]=butter(order,Wn,<span class="string">'low'</span>); <span class="comment">% construct the filter</span></span><br><span class="line">filtered_signal=filtfilt(filtb,filta,inputsignal); <span class="comment">% filter the data with zero phase</span></span><br></pre></td></tr></table></figure>
<h3 id="高通滤波"><a href="#高通滤波" class="headerlink" title="高通滤波"></a>高通滤波</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[filtered_signal,filtb,filta]</span>=<span class="title">hipass_butterworth</span><span class="params">(inputsignal,cutoff_freq,Fs,order)</span></span></span><br><span class="line"><span class="comment">% High-pass Butterworth filter</span></span><br><span class="line"><span class="comment">% [filtered_signal,filtb,filta] = hipass_butterworth(inputsignal,cutoff_freq,Fs,order)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% This is simply a set of built-in Matlab functions, repackaged for ease of</span></span><br><span class="line"><span class="comment">% use by Chad Greene, October 2012.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% inputsignal = input time series</span></span><br><span class="line"><span class="comment">% cutoff_freq = filter corner frequency</span></span><br><span class="line"><span class="comment">% Fs = data sampling frequency</span></span><br><span class="line"><span class="comment">% order = order of Butterworth filter</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% filtered_signal = the filtered time series</span></span><br><span class="line"><span class="comment">% filtb, filta = filter numerator and denominator (optional)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% load train</span></span><br><span class="line"><span class="comment">% t = (1:length(y))/Fs;</span></span><br><span class="line"><span class="comment">% y_filt = hipass_butterworth(y,900,Fs,4); % cut off at 900 Hz</span></span><br><span class="line"><span class="comment">% figure</span></span><br><span class="line"><span class="comment">% plot(t,y,'b',t,y_filt,'r')</span></span><br><span class="line"><span class="comment">% xlabel('time in seconds')</span></span><br><span class="line"><span class="comment">% box off</span></span><br><span class="line"><span class="comment">% legend('unfiltered','filtered')</span></span><br><span class="line"><span class="comment">% sound(y,Fs)      % play original time series</span></span><br><span class="line"><span class="comment">% pause(2)         % pause two seconds</span></span><br><span class="line"><span class="comment">% sound(y_filt,Fs) % play filtered time series</span></span><br><span class="line"></span><br><span class="line">nyquist_freq = Fs/<span class="number">2</span>;  <span class="comment">% Nyquist frequency</span></span><br><span class="line">Wn=cutoff_freq/nyquist_freq;    <span class="comment">% non-dimensional frequency</span></span><br><span class="line">[filtb,filta]=butter(order,Wn,<span class="string">'high'</span>); <span class="comment">% construct the filter</span></span><br><span class="line">filtered_signal=filtfilt(filtb,filta,inputsignal); <span class="comment">% filter the data with zero phase</span></span><br></pre></td></tr></table></figure>
<h3 id="带通滤波"><a href="#带通滤波" class="headerlink" title="带通滤波"></a>带通滤波</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[filtered_signal,filtb,filta]</span>=<span class="title">bandpass_butterworth</span><span class="params">(inputsignal,cutoff_freqs,Fs,order)</span></span></span><br><span class="line"><span class="comment">% Bandpass Butterworth filter</span></span><br><span class="line"><span class="comment">% [filtered_signal,filtb,filta] = bandpass_butterworth(inputsignal,cutoff_freq,Fs,order)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% This is simply a set of built-in Matlab functions, repackaged for ease of</span></span><br><span class="line"><span class="comment">% use by Chad Greene, October 2012.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% inputsignal = input time series</span></span><br><span class="line"><span class="comment">% cutoff_freqs = filter corner frequencies in the form [f1 f2]</span></span><br><span class="line"><span class="comment">% Fs = data sampling frequency</span></span><br><span class="line"><span class="comment">% order = order of Butterworth filter</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% filtered_signal = the filtered time series</span></span><br><span class="line"><span class="comment">% filtb, filta = filter numerator and denominator (optional)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% load train</span></span><br><span class="line"><span class="comment">% t = (1:length(y))/Fs;</span></span><br><span class="line"><span class="comment">% y_filt = bandpass_butterworth(y,[800 1000],Fs,4); % cut off below 800 Hz and above 1000 Hz</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% figure</span></span><br><span class="line"><span class="comment">% plot(t,y,'b',t,y_filt,'r')</span></span><br><span class="line"><span class="comment">% xlabel('time in seconds')</span></span><br><span class="line"><span class="comment">% box off</span></span><br><span class="line"><span class="comment">% legend('unfiltered','filtered')</span></span><br><span class="line"><span class="comment">% sound(y,Fs)      % play original time series</span></span><br><span class="line"><span class="comment">% pause(2)         % pause two seconds</span></span><br><span class="line"><span class="comment">% sound(y_filt,Fs) % play filtered time series</span></span><br><span class="line"></span><br><span class="line">nyquist_freq = Fs/<span class="number">2</span>;  <span class="comment">% Nyquist frequency</span></span><br><span class="line">Wn=cutoff_freqs/nyquist_freq;    <span class="comment">% non-dimensional frequency</span></span><br><span class="line">[filtb,filta]=butter(order,Wn,<span class="string">'bandpass'</span>); <span class="comment">% construct the filter</span></span><br><span class="line">filtered_signal=filtfilt(filtb,filta,inputsignal); <span class="comment">% filter the data with zero phase</span></span><br></pre></td></tr></table></figure>
<h3 id="带阻滤波"><a href="#带阻滤波" class="headerlink" title="带阻滤波"></a>带阻滤波</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[filtered_signal,filtb,filta]</span>=<span class="title">bandstop_butterworth</span><span class="params">(inputsignal,cutoff_freqs,Fs,order)</span></span></span><br><span class="line"><span class="comment">% Band-stop Butterworth filter</span></span><br><span class="line"><span class="comment">% [filtered_signal,filtb,filta] = bandstop_butterworth(inputsignal,cutoff_freqs,Fs,order)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% This is simply a set of built-in Matlab functions, repackaged for ease of</span></span><br><span class="line"><span class="comment">% use by Chad Greene, October 2012.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% inputsignal = input time series</span></span><br><span class="line"><span class="comment">% cutoff_freqs = filter corner frequencies in the form [f1 f2]</span></span><br><span class="line"><span class="comment">% Fs = data sampling frequency</span></span><br><span class="line"><span class="comment">% order = order of Butterworth filter</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% filtered_signal = the filtered time series</span></span><br><span class="line"><span class="comment">% filtb, filta = filter numerator and denominator (optional)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% load train</span></span><br><span class="line"><span class="comment">% t = (1:length(y))/Fs;</span></span><br><span class="line"><span class="comment">% y_filt = bandstop_butterworth(y,[800 1000],Fs,4); % cut off below 800 Hz and above 1000 Hz</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% figure</span></span><br><span class="line"><span class="comment">% plot(t,y,'b',t,y_filt,'r')</span></span><br><span class="line"><span class="comment">% xlabel('time in seconds')</span></span><br><span class="line"><span class="comment">% box off</span></span><br><span class="line"><span class="comment">% legend('unfiltered','filtered')</span></span><br><span class="line"><span class="comment">% sound(y,Fs)      % play original time series</span></span><br><span class="line"><span class="comment">% pause(2)         % pause two seconds</span></span><br><span class="line"><span class="comment">% sound(y_filt,Fs) % play filtered time series</span></span><br><span class="line"></span><br><span class="line">nyquist_freq = Fs/<span class="number">2</span>;  <span class="comment">% Nyquist frequency</span></span><br><span class="line">Wn=cutoff_freqs/nyquist_freq;    <span class="comment">% non-dimensional frequency</span></span><br><span class="line">[filtb,filta]=butter(order,Wn,<span class="string">'stop'</span>); <span class="comment">% construct the filter</span></span><br><span class="line">filtered_signal=filtfilt(filtb,filta,inputsignal); <span class="comment">% filter the data with zero phase</span></span><br></pre></td></tr></table></figure>
<h2 id="绘图函数"><a href="#绘图函数" class="headerlink" title="绘图函数"></a>绘图函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[  ]</span> = <span class="title">setPlot</span><span class="params">( varargin )</span></span></span><br><span class="line"><span class="comment">% setPlot()</span></span><br><span class="line"><span class="comment">% setPlot(title)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlabel)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlable,ylabel)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlabel,ylabel,xlim)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlable,ylabel,xlim,ylim)</span></span><br><span class="line"></span><br><span class="line">narginchk(<span class="number">0</span>,<span class="number">5</span>);     <span class="comment">% 判断输入参数是否足够</span></span><br><span class="line"></span><br><span class="line">grid on;</span><br><span class="line">axis tight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">1</span></span><br><span class="line">    title(varargin&#123;<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">2</span></span><br><span class="line">    xlabel(varargin&#123;<span class="number">2</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">3</span></span><br><span class="line">    ylabel(varargin&#123;<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">4</span></span><br><span class="line">    xlim(varargin&#123;<span class="number">4</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">5</span></span><br><span class="line">    ylim(varargin&#123;<span class="number">5</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="信号处理函数"><a href="#信号处理函数" class="headerlink" title="信号处理函数"></a>信号处理函数</h2><h3 id="频谱分析"><a href="#频谱分析" class="headerlink" title="频谱分析"></a>频谱分析</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[freq,amp]</span>=<span class="title">fft_signal</span><span class="params">(signal,fs,N)</span></span></span><br><span class="line"><span class="comment">% Spectrum analysis</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% signal = input time series</span></span><br><span class="line"><span class="comment">% fs = data sampling frequency</span></span><br><span class="line"><span class="comment">% N = data length of signal</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% freq = frequency of Spectrum</span></span><br><span class="line"><span class="comment">% amp = amplitude of Spectrum</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% fs = 100;</span></span><br><span class="line"><span class="comment">% N = fs*10;</span></span><br><span class="line"><span class="comment">% t = (0:N-1)/fs;</span></span><br><span class="line"><span class="comment">% y = sin(2*pi*10*t);</span></span><br><span class="line"><span class="comment">% [freq,amp] = fft_signal(y,fs,N);</span></span><br><span class="line"><span class="comment">% plot(freq,amp);</span></span><br><span class="line"></span><br><span class="line">amp = <span class="number">2</span>*<span class="built_in">abs</span>(fft(signal))/N;        <span class="comment">% 求取信号的幅度谱</span></span><br><span class="line">amp = amp(<span class="number">1</span>:<span class="built_in">fix</span>(<span class="built_in">length</span>(amp)/<span class="number">2</span>));       <span class="comment">% 截取有效部分</span></span><br><span class="line">freq=(<span class="number">0</span>:<span class="built_in">length</span>(amp)<span class="number">-1</span>)*fs/N;       <span class="comment">% 横坐标代表频率</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="幅值分布"><a href="#幅值分布" class="headerlink" title="幅值分布"></a>幅值分布</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ amp,dist ]</span> = <span class="title">ampDist</span><span class="params">( signal,sectionNum )</span></span></span><br><span class="line"><span class="comment">% Calculate the amplitude distribution of the signal</span></span><br><span class="line"><span class="comment">% INPUTS:</span></span><br><span class="line"><span class="comment">% signal : The signal to be analyzed</span></span><br><span class="line"><span class="comment">% sectionNum : Number of segments</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS:</span></span><br><span class="line"><span class="comment">% amp : Amplitude after segmentation</span></span><br><span class="line"><span class="comment">% dist :Amplitude distribution</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% fs = 1000;</span></span><br><span class="line"><span class="comment">% N = fs*100;</span></span><br><span class="line"><span class="comment">% y = wgn(1,N,10);     % 高斯白噪声</span></span><br><span class="line"><span class="comment">% [amp,dist] = ampDist(y,500);</span></span><br><span class="line"><span class="comment">% bar(amp,dist);</span></span><br><span class="line"></span><br><span class="line">yMin = min(signal);</span><br><span class="line">yMax = max(signal);</span><br><span class="line"></span><br><span class="line">amp = <span class="built_in">linspace</span>(yMin,yMax,sectionNum);</span><br><span class="line">dist = hist(signal,amp);</span><br><span class="line">dist = dist./<span class="built_in">length</span>(signal);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="LMS最小均方算法"><a href="#LMS最小均方算法" class="headerlink" title="LMS最小均方算法"></a>LMS最小均方算法</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ y_error, y_filter ]</span> = <span class="title">LMS</span><span class="params">( x_input,x_dest,M,u )</span></span></span><br><span class="line"><span class="comment">% LMS 最小均方算法</span></span><br><span class="line"><span class="comment">% INPUTS：</span></span><br><span class="line"><span class="comment">% x_input    原始信号</span></span><br><span class="line"><span class="comment">% x_dest     期望信号</span></span><br><span class="line"><span class="comment">% M          阶次</span></span><br><span class="line"><span class="comment">% u          步长因子</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUTS：</span></span><br><span class="line"><span class="comment">% y_error    误差信号</span></span><br><span class="line"><span class="comment">% y_filter   滤波器信号输出</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% EXAMPLE 1:</span></span><br><span class="line"><span class="comment">% load train</span></span><br><span class="line"><span class="comment">% t = (1:length(y))/Fs;</span></span><br><span class="line"><span class="comment">% M = 2; u = 0.5;</span></span><br><span class="line"><span class="comment">% y_dest = (max(y)-min(y))/2*cos(2*pi*18*t);      % 参考信号</span></span><br><span class="line"><span class="comment">% [y_error,y_filter] = LMS(y,y_dest,M,u);</span></span><br><span class="line"><span class="comment">% plot(t,y_error,t,y_filter);</span></span><br><span class="line"></span><br><span class="line">N = <span class="built_in">length</span>(x_input);</span><br><span class="line">y_filter = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">y_error  = <span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">h = <span class="built_in">zeros</span>(<span class="number">1</span>,M);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k=M:N</span><br><span class="line">    h_old = h;</span><br><span class="line">    y_filter(k) = x_dest(k:<span class="number">-1</span>:k-M+<span class="number">1</span>)*h_old';</span><br><span class="line">    y_error(k)  = x_input(k) - y_filter(k);</span><br><span class="line">    h = h_old + <span class="number">2</span>*u*y_error(k)*x_dest(k:<span class="number">-1</span>:k-M+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="EMD经验模态分解"><a href="#EMD经验模态分解" class="headerlink" title="EMD经验模态分解"></a>EMD经验模态分解</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imf</span> = <span class="title">emd</span><span class="params">(x)</span></span></span><br><span class="line"><span class="comment">% Empiricial Mode Decomposition (Hilbert-Huang Transform)</span></span><br><span class="line"><span class="comment">% imf = emd(x)</span></span><br><span class="line"><span class="comment">% Funcs : ismonotonic, isimf, getspline, findpeaks</span></span><br><span class="line"></span><br><span class="line">x   = transpose(x(:));      <span class="comment">% 将x变为一维向量</span></span><br><span class="line">imf = [];</span><br><span class="line"><span class="keyword">while</span> ~ismonotonic(x)</span><br><span class="line">   x1 = x;</span><br><span class="line">   sd = Inf;</span><br><span class="line">   cnt=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (sd &gt; <span class="number">0.1</span>) || ~isimf(x1)</span><br><span class="line">      s1 = getspline(x1);</span><br><span class="line">      s2 = -getspline(-x1);</span><br><span class="line">      x2 = x1-(s1+s2)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">      sd = sum((x1-x2).^<span class="number">2</span>)/sum(x1.^<span class="number">2</span>);</span><br><span class="line">      x1 = x2;</span><br><span class="line">      cnt=cnt+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="comment">%    cnt</span></span><br><span class="line"></span><br><span class="line">   imf&#123;end+<span class="number">1</span>&#125; = x1;</span><br><span class="line">   x          = x-x1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">imf&#123;end+<span class="number">1</span>&#125; = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">% FUNCTIONS</span></span><br><span class="line"><span class="comment">% 判断信号的单调性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span> = <span class="title">ismonotonic</span><span class="params">(x)</span></span></span><br><span class="line"></span><br><span class="line">u1 = <span class="built_in">length</span>(findpeaks(x))*<span class="built_in">length</span>(findpeaks(-x));</span><br><span class="line"><span class="keyword">if</span> u1 &gt; <span class="number">0</span></span><br><span class="line">    u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    u = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 判断信号是否满足IMF条件</span></span><br><span class="line"><span class="comment">% 条件：极大值点数和极小值点数之和与过零点数相等或相差1？</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span> = <span class="title">isimf</span><span class="params">(x)</span></span></span><br><span class="line"></span><br><span class="line">N  = <span class="built_in">length</span>(x);</span><br><span class="line">u1 = sum(x(<span class="number">1</span>:N<span class="number">-1</span>).*x(<span class="number">2</span>:N) &lt; <span class="number">0</span>);</span><br><span class="line">u2 = <span class="built_in">length</span>(findpeaks(x))+<span class="built_in">length</span>(findpeaks(-x));</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(u1-u2) &gt; <span class="number">1</span></span><br><span class="line">    u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    u = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 使用三次样条函数，得到包络线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">getspline</span><span class="params">(x)</span></span></span><br><span class="line"></span><br><span class="line">N = <span class="built_in">length</span>(x);</span><br><span class="line">p = findpeaks(x);</span><br><span class="line">s = spline([<span class="number">0</span> p N+<span class="number">1</span>],[<span class="number">0</span> x(p) <span class="number">0</span>],<span class="number">1</span>:N);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 寻找极大值点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span> = <span class="title">findpeaks</span><span class="params">(x)</span></span></span><br><span class="line"><span class="comment">% Find peaks.</span></span><br><span class="line"><span class="comment">% n = findpeaks(x)</span></span><br><span class="line"></span><br><span class="line">n    = <span class="built_in">find</span>(diff(diff(x) &gt; <span class="number">0</span>) &lt; <span class="number">0</span>);</span><br><span class="line">u    = <span class="built_in">find</span>(x(n+<span class="number">1</span>) &gt; x(n));</span><br><span class="line">n(u) = n(u)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Matlab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
            <tag> algorithm </tag>
            
            <tag> signal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stm32 - DAC基本输出方式]]></title>
      <url>http://www.litreily.top/2016/12/05/stm32-dac/</url>
      <content type="html"><![CDATA[<h2 id="1-DAC简介"><a href="#1-DAC简介" class="headerlink" title="1. DAC简介"></a>1. DAC简介</h2><p>数模转换器(DAC)是极为常用的电子器件，可以将数字量转换为以参考量为基准的模拟量，以满足应用需求。</p>
<h3 id="1-1-电压输出模式"><a href="#1-1-电压输出模式" class="headerlink" title="1.1 电压输出模式"></a>1.1 电压输出模式</h3><p>在<code>stm32</code>中，<code>D/A</code>转换器包含以下三种输出方式：</p>
<ol>
<li>输出电压</li>
<li>噪声生成</li>
<li>三角波生成</li>
</ol>
<p>本文将着重介绍最基本的电压输出方式。</p>
<h3 id="1-2-主要特征"><a href="#1-2-主要特征" class="headerlink" title="1.2 主要特征"></a>1.2 主要特征</h3><p>DAC的主要特征有：</p>
<ol>
<li>2个DAC转换器：1个输出通道对应1个转换器</li>
<li>8位或者12位单调输出</li>
<li>12位模式下数据左对齐或者右对齐</li>
<li>同步更新功能</li>
<li>噪声波形生成</li>
<li>三角波形生成</li>
<li>双DAC通道同时或者分别转换</li>
<li>每个通道都有DMA功能</li>
<li>外部触发转换</li>
<li>输入参考电压V_REF+</li>
</ol>
<h3 id="1-3-数据对齐方式"><a href="#1-3-数据对齐方式" class="headerlink" title="1.3 数据对齐方式"></a>1.3 数据对齐方式</h3><p>DAC 输出通道的数据对齐方式包含以下三种：</p>
<ol>
<li>8位右对齐</li>
<li>12位左对齐</li>
<li>12位右对齐</li>
</ol>
<p>此外，在单 DAC 通道模式下，数据寄存器的存储方式如下：</p>
<p><img src="/assets/stm32/dacAlignMode.png" alt="dacAlignMode1"></p>
<p>在双 DAC 通道模式下，数据寄存器的存储方式则为：</p>
<p><img src="/assets/stm32/dacAlignMode2.png" alt="dacAlignMode2"></p>
<p>我通常会选择12位右对齐方式，并在单通道模式设置数据时与<code>0x0fff</code>进行&quot;位与&quot;。</p>
<h3 id="1-4-DAC转换"><a href="#1-4-DAC转换" class="headerlink" title="1.4 DAC转换"></a>1.4 DAC转换</h3><p><img src="/assets/stm32/dacConvert.png" alt="dacConvert"></p>
<p>用户无法直接对DAC的数据寄存器 DAC_DORx 写入数据，只能通过修改数据保持寄存器 DAC_DHRx 装入数据。</p>
<ol>
<li>未选择&quot;硬件触发&quot;时，保持寄存器 DAC_DHRx 的值将在1个APB1周期后自动传入数据寄存器 DAC_DORx；</li>
<li>已选择&quot;硬件触发&quot;时，保持寄存器 DAC_DHRx 的值将在触发发生后3个APB1后传入数据寄存器 DAC_DORx。</li>
<li>当数据存入 DAC_DORx 后再经过时间 t_settings（与负载和电源电压有关），输出变为有效。</li>
</ol>
<h3 id="1-5-DAC触发方式"><a href="#1-5-DAC触发方式" class="headerlink" title="1.5 DAC触发方式"></a>1.5 DAC触发方式</h3>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_None                   ((uint32_t)0x00000000)</span></span><br><span class="line"><span class="comment">/*!&lt; Conversion is automatic once the DAC1_DHRxxxx register</span></span><br><span class="line"><span class="comment">has been loaded, and not by external trigger */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T6_TRGO                ((uint32_t)0x00000004)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM6 TRGO selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T8_TRGO                ((uint32_t)0x0000000C)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM8 TRGO selected as external conversion trigger for DAC channel</span></span><br><span class="line"><span class="comment">only in High-density devices*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T3_TRGO                ((uint32_t)0x0000000C)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM8 TRGO selected as external conversion trigger for DAC channel</span></span><br><span class="line"><span class="comment">only in Connectivity line, Medium-density and Low-density Value Line devices */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T7_TRGO                ((uint32_t)0x00000014)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM7 TRGO selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T5_TRGO                ((uint32_t)0x0000001C)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM5 TRGO selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T15_TRGO               ((uint32_t)0x0000001C)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM15 TRGO selected as external conversion trigger for DAC channel</span></span><br><span class="line"><span class="comment">only in Medium-density and Low-density Value Line devices*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T2_TRGO                ((uint32_t)0x00000024)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM2 TRGO selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_T4_TRGO                ((uint32_t)0x0000002C)</span></span><br><span class="line"><span class="comment">/*!&lt; TIM4 TRGO selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_Ext_IT9                ((uint32_t)0x00000034)</span></span><br><span class="line"><span class="comment">/*!&lt; EXTI Line9 event selected as external conversion trigger for DAC channel */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAC_Trigger_Software               ((uint32_t)0x0000003C)</span></span><br><span class="line"><span class="comment">/*!&lt; Conversion started by software trigger for DAC channel */</span></span><br></pre></td></tr></table></figure>
<p><strong>触发方式</strong> 大致可分为四类：</p>
<ol>
<li>DAC_Trigger_None : 无触发;</li>
<li>DAC_Trigger_Tx_TRGO : 来自片上定时器的TRGO输出</li>
<li>DAC_Trigger_Ext_IT9 : 来自外部中断线9的上升沿</li>
<li>DAC_Trigger_Software : 来自软件控制位 SWTRIG</li>
</ol>
<p>当 DAC 接口检测到来自定时器 <strong>TRGO输出</strong> 或 <strong>EXTI9</strong> 的上升沿时，最近存入 DAC_DHRx 中的数据将被传入 DAC_DORx 中。经3个APB1周期后更新 DAC_DORx 的值。对于 &quot;软件触发&quot;，需要在程序中对 <strong>SWTRIG</strong> 置位完成触发，该触发位将被硬件自动清零。</p>
<h3 id="1-6-DAC输出电压"><a href="#1-6-DAC输出电压" class="headerlink" title="1.6 DAC输出电压"></a>1.6 DAC输出电压</h3><p>DAC输出 = V_reference × DOR /4095;</p>
<p>式中，V_reference 为参考电压，DOR 为 DAC 输出数据寄存器的值（0~255/0~4095）。</p>
<h2 id="2-DAC-基本输出方式"><a href="#2-DAC-基本输出方式" class="headerlink" title="2. DAC 基本输出方式"></a>2. DAC 基本输出方式</h2><h3 id="2-1-DAC-参数设置"><a href="#2-1-DAC-参数设置" class="headerlink" title="2.1 DAC 参数设置"></a>2.1 DAC 参数设置</h3><p>在<code>stm32f103</code>中包含2个通道的12位<code>D/A</code>转换器，<code>PA4</code>与<code>PA5</code>作为两个通道输出接口，在使用时需要配置为模拟输入<code>AIN</code>。当使能 DAC 的输出通道后，相应的 GPIO 管脚将自动与 DAC 的模拟输出接口（DAC_OUTx）相连。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dacConfig</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">  DAC_InitTypeDef DAC_InitStructure;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 开启GPIOA时钟 */</span></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">  <span class="comment">/* 配置DAC输出通道 */</span></span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 开启DAC时钟 */</span></span><br><span class="line">  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);</span><br><span class="line"></span><br><span class="line">  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;                  <span class="comment">// 无触发</span></span><br><span class="line">  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;    <span class="comment">// 无波形生成</span></span><br><span class="line">  DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;</span><br><span class="line">  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;     <span class="comment">// 禁用输出缓存</span></span><br><span class="line">  <span class="comment">/* 配置DAC参数 */</span></span><br><span class="line">  DAC_Init(DAC_Channel_1,&amp;DAC_InitStructure);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* enable dac1 */</span></span><br><span class="line">  DAC_Cmd(DAC_Channel_1,ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-设置-DAC-输出电压"><a href="#2-2-设置-DAC-输出电压" class="headerlink" title="2.2 设置 DAC 输出电压"></a>2.2 设置 DAC 输出电压</h3><p>经测试，我所用最小系统板的DA参考电压并非<code>3.3v</code>，而是接近于<code>3.24v</code>，我们可以通过宏定义配置好参考电压。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REFERENCE_VOLTAGE 3.24f      <span class="comment">// DAC 参考电压</span></span></span><br></pre></td></tr></table></figure>
<p>根据公式 <code>data = 4095*(v/v_ref)</code>可以求得电压v对应的12位数。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVoltage</span><span class="params">(<span class="keyword">double</span> voltage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint16_t</span> temp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(voltage &lt; <span class="number">0.0</span> || voltage &gt; REFERENCE_VOLTAGE)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  temp = (<span class="keyword">uint16_t</span>)(<span class="number">4095</span>*voltage/REFERENCE_VOLTAGE) &amp; <span class="number">0x0fff</span>;</span><br><span class="line"></span><br><span class="line">  DAC_SetChannel1Data(DAC_Align_12b_R,temp);     <span class="comment">// 电压输出：12位右对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-产生正弦波信号"><a href="#2-3-产生正弦波信号" class="headerlink" title="2.3 产生正弦波信号"></a>2.3 产生正弦波信号</h3><p>使用宏定义<code>PI</code>以及采样频率，并添加头文件<code>math.h</code>。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI  3.14159f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FSAMPLE 100                 <span class="comment">// 采样频率 （Hz）</span></span></span><br></pre></td></tr></table></figure>
<p>使用<code>sin</code>函数和一个<code>static</code>变量即可生成正弦信号。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createSinWave</span><span class="params">(<span class="keyword">double</span> baseAmp, <span class="keyword">double</span> amp, <span class="keyword">double</span> frequency, <span class="keyword">double</span> fSample)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint32_t</span> time = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> voltage = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  voltage = amp*<span class="built_in">sin</span>(<span class="number">2</span>*PI*frequency*time/fSample) + baseAmp;</span><br><span class="line">  time++;</span><br><span class="line"></span><br><span class="line">  setVoltage(voltage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>main</code>函数，每隔一个采样周期修改一次DA输出电压，完成正弦信号的输出。</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dacConfig();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    createSinWave(<span class="number">2</span>,<span class="number">0.5</span>,<span class="number">1</span>,FSAMPLE); <span class="comment">// 产生 2±0.5v , 1Hz 的正弦信号</span></span><br><span class="line">    delayMs(<span class="number">1000.0</span>/FSAMPLE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-查看波形"><a href="#2-4-查看波形" class="headerlink" title="2.4 查看波形"></a>2.4 查看波形</h3><p>使用示波器或NI采集卡即可查看生成的正弦信号。</p>
<p><img src="/assets/stm32/dacOutput.png" alt="DacOutput"></p>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> stm32 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matlab - 经VS将.m文件转换为.dll文件]]></title>
      <url>http://www.litreily.top/2016/11/25/matlab-coder/</url>
      <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在使用 LabVIEW 进行软件开发的过程中，有时需要使用 Matlab 强大的数据处理功能，以提高开发效率，此时可以通过 Matlab Coder 将 Matlab 中的函数转换为 C/C++ 源文件，然后通过 Visual Studio 将这些源文件封装为 .dll 文件，最后通过 LabVIEW 调用库函数实现对 Matlab 函数的调用。</p>
<p>本文将通过一个实例讲述以上功能的实现过程，大体步骤如下：</p>
<ol>
<li>Matlab 编写代码<br> 1.1 编写 .m 函数<br> 1.2 使用 Coder 生成 C/C++ 文件</li>
<li>Visual Studio 生成 .dll 文件</li>
<li>LabVIEW 调用 .dll文件</li>
</ol>
<p>软件版本说明：</p>
<ol>
<li>Matlab 2016a       (64bit)</li>
<li>LabVIEW 2015       (64bit)</li>
<li>Visual Studio 2015 (64bit)</li>
</ol>
<h2 id="2-通过-Matlab-生成-C-C-源文件"><a href="#2-通过-Matlab-生成-C-C-源文件" class="headerlink" title="2. 通过 Matlab 生成 C/C++ 源文件"></a>2. 通过 Matlab 生成 C/C++ 源文件</h2><h3 id="2-1-m-函数编码"><a href="#2-1-m-函数编码" class="headerlink" title="2.1 .m 函数编码"></a>2.1 .m 函数编码</h3><p>在 Matlab 文件目录中新建文件夹&quot;CreateDll&quot;，在该文件夹下新建两个函数文件，分别实现简单加法运算函数，以及一个用自相关求解周期信号频率的函数。</p>
<div class="smallTitle">add( a,b )</div>

<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ answer ]</span> = <span class="title">add</span><span class="params">( a,b )</span></span></span><br><span class="line"><span class="comment">% 加法运算</span></span><br><span class="line"><span class="comment">% a,b 均为 double 型数据</span></span><br><span class="line"></span><br><span class="line">answer = a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<div class="smallTitle">getFreq( signal, fs )</div>

<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ frequency ]</span> = <span class="title">getFreq</span><span class="params">( signal,fs )</span></span></span><br><span class="line"><span class="comment">%GETFREQ 自相关法求周期信号频率</span></span><br><span class="line"><span class="comment">% [input]</span></span><br><span class="line"><span class="comment">% signal    : double 1*n</span></span><br><span class="line"><span class="comment">% fs        : double 1*1</span></span><br><span class="line"><span class="comment">% [output]</span></span><br><span class="line"><span class="comment">% frequency : double  1*1</span></span><br><span class="line"></span><br><span class="line">y_xcorr = xcorr(signal,<span class="string">'coeff'</span>);            <span class="comment">% 信号自相关</span></span><br><span class="line">[~,locs] = findpeaks(y_xcorr);              <span class="comment">% 获取峰值位置</span></span><br><span class="line">middlePosition = <span class="built_in">fix</span>(<span class="built_in">length</span>(locs)/<span class="number">2</span>);       <span class="comment">% 计算处于中部的峰值位置</span></span><br><span class="line">frequency = fs/(locs(middlePosition)-locs(middlePosition<span class="number">-1</span>)); <span class="comment">% 计算信号频率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-使用-Coder-生成-C-C-文件"><a href="#2-2-使用-Coder-生成-C-C-文件" class="headerlink" title="2.2 使用 Coder 生成 C/C++ 文件"></a>2.2 使用 Coder 生成 C/C++ 文件</h3><ul>
<li>1.在命令行中输入 coder 打开 Matlab Coder 工具。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; coder</span><br></pre></td></tr></table></figure>
<p><img src="/assets/matlab/coder1.png" alt="Matlab Coder"></p>
<ul>
<li>2.添加 add 函数及 getFreq 函数</li>
</ul>
<p><img src="/assets/matlab/coder2.png" alt="Matlab Coder"></p>
<ul>
<li>3.定义函数输入参数的数据类型（两种定义方式）</li>
</ul>
<ol>
<li>手动修改输入参数的数据类型</li>
<li>输入函数调用示例，通过 Coder 工具的自定义输入功能自动匹配输入参数类型</li>
</ol>
<p>调用示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; add(3,4);</span><br></pre></td></tr></table></figure>
<p><img src="/assets/matlab/coder3.png" alt="Matlab Coder"></p>
<p>手动可选择的数据类型如下图所示：</p>
<p><img src="/assets/matlab/coder3_1.png" alt="Input types"></p>
<ul>
<li>4.设定数据长度</li>
</ul>
<ol>
<li>对于大部分变量，数据长度为 1×1</li>
<li>对于一维<strong>向量、数组</strong><br>2.1 固定长度的变量：直接设定具体值（如：一个星期每天的工作时间，可设为 1×7）<br>2.2 不定长度但有上限的变量：设定 1×:100 （假定上限值为 100）<br>2.3 不定长度上限不定的变量：设定 1×:inf （inf代表无限）</li>
<li>二维数组设定规则与一维数组类似</li>
</ol>
<p><img src="/assets/matlab/coder3_2.png" alt="Input length"></p>
<ul>
<li>5.Check for Run-Time Issues</li>
</ul>
<p>这一步可以跳过，这是用来生成试用代码以及用于 Matlab 的 MEX 文件。</p>
<p><img src="/assets/matlab/coder4.png" alt="Check for Run-Time Issues"></p>
<ul>
<li>6.Generate Code</li>
</ul>
<p>选择 C++ 语言，通过 &quot; More Settings &quot; 修改代码生成相关的配置选项,最后点击 &quot; Generate &quot; 按钮生成源代码。</p>
<div class="smallTitle">选择语言</div>

<p><img src="/assets/matlab/coder5.png" alt="Generate Code"></p>
<div class="smallTitle">配置选项</div>

<p><img src="/assets/matlab/coder5_1.png" alt="More Settings"></p>
<div class="smallTitle">生成代码</div>

<p><img src="/assets/matlab/coder6.png" alt="C++ Code"></p>
<p>在代码生成界面可以看到以下内容：</p>
<ol>
<li>Source Code : Matlab 中创建的函数源代码</li>
<li>Output Files : Coder 工具生成得到的 .h 头文件和 .cpp 源文件</li>
<li>Build Log : 用于查看代码生成报告</li>
<li>Variables : 选中 Matlab 文件时显示函数的输入输出数据类型和大小</li>
</ol>
<ul>
<li>7.Finsh Workflow</li>
</ul>
<div class="smallTitle">完成工作流程</div>

<p><img src="/assets/matlab/coder7.png" alt="Finish WorkFlow"></p>
<div class="smallTitle">查看代码</div>

<p><img src="/assets/matlab/coder8.png" alt="Select Code"></p>
<p>可以看出，最终生成的文件较多，代码量较大，这可以归结为以下几个原因：</p>
<ol>
<li>重新实现fft等复杂算法</li>
<li>考虑各种异常情况的处理</li>
<li>考虑不定长数组或向量的内存分配问题</li>
<li>考虑无限值 inf 和 无效值 NaN</li>
<li>不同编程语言间数据类型的转换</li>
</ol>
<p>当然，我们可以在代码生成前根据需求进行相关设置，以避免不必要文件的产生，此处不予详述。</p>
<p>最后将生成的所有 .h/.cpp 文件复制到剪切板中以备后用。至此，Matlab 部分的工作已经全部完成。</p>
<h2 id="3-通过-Visual-Studio-生成-dll-文件"><a href="#3-通过-Visual-Studio-生成-dll-文件" class="headerlink" title="3. 通过 Visual Studio 生成 .dll 文件"></a>3. 通过 Visual Studio 生成 .dll 文件</h2><p>在 VS 中要做的就是将 Matlab Coder 生成的 C++ 文件封装为 dll 文件，以供 LabVIEW 程序调用。</p>
<h3 id="3-1-创建-win32-项目"><a href="#3-1-创建-win32-项目" class="headerlink" title="3.1 创建 win32 项目"></a>3.1 创建 win32 项目</h3><p><img src="/assets/matlab/CreateDll.png" alt="Create VS Project"></p>
<p>在win32应用程序向导中选择 <strong>DLL</strong>，并勾选 <strong>空项目</strong> ，然后点击完成。</p>
<p><img src="/assets/matlab/CreateDll1.png" alt="Create VS Project"></p>
<h3 id="3-2-添加文件"><a href="#3-2-添加文件" class="headerlink" title="3.2 添加文件"></a>3.2 添加文件</h3><p>将从 Matlab 中复制的 C++ 文件粘贴到 CreateDll 项目的本地文件中，然后在项目中添加这些文件。</p>
<p><img src="/assets/matlab/CreateDll2_1.png" alt="Add Source Files to VS Project"></p>
<p><img src="/assets/matlab/CreateDll2.png" alt="Add Source Files to VS Project"></p>
<h3 id="3-3-新建模块定义文件"><a href="#3-3-新建模块定义文件" class="headerlink" title="3.3 新建模块定义文件"></a>3.3 新建模块定义文件</h3><p>在 VS 中新建 .def 模块定义文件，输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY CreateDll</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line"></span><br><span class="line">add</span><br><span class="line">getFreq</span><br></pre></td></tr></table></figure>
<p>LIBRARY 后面添加库名称，EXPORTS 后面添加需要导出的函数名称。</p>
<p><img src="/assets/matlab/CreateDll3.png" alt=".def file"></p>
<p>编辑完成后，可以在 &quot;项目属性&gt;&gt;链接器&gt;&gt;输入&gt;&gt;模块定义文件&quot; 中看到，项目已将该选项自动添加为了当前 .def 文件，对于低版本的 VS 可能需要手动添加。</p>
<h3 id="3-4-生成-dll-文件"><a href="#3-4-生成-dll-文件" class="headerlink" title="3.4 生成 .dll 文件"></a>3.4 生成 .dll 文件</h3><p>最后一步，选中项目名称，点击右键选择 &quot;<strong>生成</strong>&quot; ，从本地项目目录的 Debug 文件夹中可以找到已生成的 .dll 文件。</p>
<p>值得注意的是：</p>
<ol>
<li>选择 Debug 模式为 x64 时生成 64 位 dll 文件，文件存于 .\x64\Debug\Create.dll</li>
<li>选择 Debug 模式为 x86 时生成 32 位 dll 文件，文件存于 .\Debug\Create.dll</li>
</ol>
<p>对于不同位数的 LabVIEW 程序，我们可以选择对应的 Debug 模式，这个功能真的是非常棒！</p>
<p><img src="/assets/matlab/CreateDll4.png" alt="Bulid .dll file"></p>
<h3 id="3-5-函数接口"><a href="#3-5-函数接口" class="headerlink" title="3.5 函数接口"></a>3.5 函数接口</h3><p>经 VS 生成的 API 函数接口说明如下：</p>
<p><strong>add</strong><br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>getFreq</strong><br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getFreq</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> b_signal[<span class="number">1000</span>], <span class="keyword">double</span> fs)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>因为例程所用数据为定长数组（1×1000），所以输入参数的数据类型为基本的 double 型。倘若定义的 b_signal 为不定长数组 （1×:inf） ,其格式将变为：</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getFreq</span><span class="params">(<span class="keyword">const</span> emxArray_real_T *b_signal, <span class="keyword">double</span> fs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这是因为程序需要为不确定长度的数组动态分配内存，所以有效数据与其描述信息将被封装到结构体中，该结构体为 &quot;<strong>emxArray_real_T</strong>&quot;</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">emxArray_real_T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">double</span> *data;</span><br><span class="line">  <span class="keyword">int</span> *size;</span><br><span class="line">  <span class="keyword">int</span> allocatedSize;</span><br><span class="line">  <span class="keyword">int</span> numDimensions;</span><br><span class="line">  boolean_T canFreeData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结构体中的 &quot;<strong>boolean_T</strong>&quot; 定义如下</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> boolean_T;</span><br></pre></td></tr></table></figure>
<p>由于不定长数据会导致大量冗余代码，并且在 LabVIEW 中调用时非常麻烦，除非必须，否则不建议使用，本文后续所述也是定长数组。</p>
<h2 id="4-通过-LabVIEW-调用-dll文件"><a href="#4-通过-LabVIEW-调用-dll文件" class="headerlink" title="4. 通过 LabVIEW 调用 .dll文件"></a>4. 通过 LabVIEW 调用 .dll文件</h2><p>通过 VS，我们已经得到了想要的 .dll 文件，那么在 LabVIEW 中该如何调用呢？这里提供两种方法。</p>
<ol>
<li>通过调用库函数节点（Call Library Function Node）</li>
<li>通过 LabVIEW 导入工具（Tools-&gt;Import-&gt;Shared Library(.dll)…）</li>
</ol>
<p>两种方法的原理一致，以第一种方法为例进行讲解。</p>
<h3 id="4-1-Call-Library-Function-Node"><a href="#4-1-Call-Library-Function-Node" class="headerlink" title="4.1 Call Library Function Node"></a>4.1 Call Library Function Node</h3><p>在 LabVIEW 函数面板搜索 &quot;Call Library&quot; ，中文版可直接搜索 <code>dll</code>。将调用库函数节点放入程序框图中。</p>
<p><strong>调用 add 函数</strong></p>
<ul>
<li>选择 CreateDll.dll 文件</li>
</ul>
<p><img src="/assets/matlab/UseDll1.png" alt="select CreateDll.dll"></p>
<ul>
<li>配置 add 函数接口</li>
</ul>
<p><img src="/assets/matlab/UseDll1_1.png" alt="Config add function"></p>
<ul>
<li>函数调用示例</li>
</ul>
<p><img src="/assets/matlab/UseDll1_2.png" alt="Use add function"></p>
<p><strong>调用 getFreq 函数</strong></p>
<ul>
<li>配置 getFreq 函数接口</li>
</ul>
<p><img src="/assets/matlab/UseDll2.png" alt="Config getFreq function"></p>
<ul>
<li>函数调用示例</li>
</ul>
<p><img src="/assets/matlab/UseDll2_2.png" alt="getFreq front panel"></p>
<p>先产生一个数据长度为 1000 ，频率可调的正弦信号，采样频率 1kHz；然后调用 .dll文件中的 getFreq 函数，通过自相关方法求取信号频率，并输出到变量 getFreq 中。</p>
<p><img src="/assets/matlab/UseDll2_3.png" alt="getFreq block diagram"></p>
<h3 id="4-2-不定长数组问题"><a href="#4-2-不定长数组问题" class="headerlink" title="4.2 不定长数组问题"></a>4.2 不定长数组问题</h3><p>这里对不定长数组问题进行简单介绍：.dll 文件中的函数将不再是简单的 double 指针，而是一个结构体指针；在 LabVIEW 中调用时，可以创建自定义控件，用簇代替该结构体，簇的引用作为结构体指针；簇的内容包括以下几部分。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> *pData : 一维数组引用，用于传递信号数据</span><br><span class="line"><span class="keyword">int</span>    *pSize : 一维数组引用，用于传递数据长度</span><br><span class="line"><span class="keyword">int</span> allocatedSize : 分配内存大小，调用时可设为 <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> numDimensions : 数组维数，设为 <span class="number">1</span> 或 <span class="number">2</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> canFreeData : 布尔变量，确定能否释放数据内存</span><br></pre></td></tr></table></figure>
<p><img src="/assets/matlab/UseDll2_1.png" alt="Create customsize control"></p>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>本文对 &quot;Matlab Coder 生成 C++ 代码&quot;，&quot;VS 生成 .dll 文件&quot;，&quot;LabVIEW 调用外部库函数&quot; 这三部分内容进行讲述。通过Matlab , VS , LabVIEW 的结合使用，我们便可实现 LabVIEW 程序调用 Matlab 函数的目的。</p>
<p>此外，在 64 位的 VS 中可以通过修改 Debug 模式生成 32 位或 64 位的动态链接库，以适配不同版本的 LabVIEW。当然最后不要忘了，不同编译模式下生成的 .dll 文件存放在不同的目录下。</p>
]]></content>
      
        <categories>
            
            <category> Matlab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
            <tag> labview </tag>
            
            <tag> VS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[信号处理 - 滤波器截止频率]]></title>
      <url>http://www.litreily.top/2016/11/14/signal-Process/</url>
      <content type="html"><![CDATA[<h2 id="1-截止频率"><a href="#1-截止频率" class="headerlink" title="1. 截止频率"></a>1. 截止频率</h2><p>通常，我们将信号幅值衰减3dB处的频率作为截止频率，这是为何？</p>
<p>首先，明确以下两点：</p>
<pre class="descriptions">
1. 幅值的平方为功率
2. 信号功率衰减一半时的频率被称为<strong>截止频率</strong>
</pre>

<p>当信号功率衰减一半 (1/2) 时，幅值衰减 sqrt(1/2) ，那么其对应的 dB 值为：</p>
<pre class="textContainer">20*log10(sqrt(2)/2) ≈ -3dB</pre>

<h2 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2. 举例说明"></a>2. 举例说明</h2><h3 id="2-1-滤波器设计"><a href="#2-1-滤波器设计" class="headerlink" title="2.1 滤波器设计"></a>2.1 滤波器设计</h3><p>设计一个 butterworth 低通滤波器，采样频率 100Hz ，截止频率 20Hz ，阶次为 4 。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">fs = <span class="number">100</span>;           <span class="comment">% 采样频率</span></span><br><span class="line">tLen = <span class="number">2</span>;           <span class="comment">% 时间长度</span></span><br><span class="line">pointNum = fs*<span class="number">2</span>;    <span class="comment">% 采样点数</span></span><br><span class="line">fpass = <span class="number">20</span>;         <span class="comment">% 通带频率</span></span><br><span class="line"></span><br><span class="line">wp = fpass/(fs/<span class="number">2</span>);      <span class="comment">% 计算归一化角频率</span></span><br><span class="line">[b,a] = butter(<span class="number">4</span>,wp);   <span class="comment">% 设计滤波器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 获取频率特性</span></span><br><span class="line">[H,F] = freqz(b,a,pointNum,fs);</span><br><span class="line">H = <span class="number">20</span>*<span class="built_in">log10</span>(<span class="built_in">abs</span>(H));</span><br><span class="line"></span><br><span class="line">hold off</span><br><span class="line">plot(F,H);grid on;hold on</span><br><span class="line"></span><br><span class="line">fcAmp = H(fpass*<span class="number">2</span>*pointNum/fs+<span class="number">1</span>);</span><br><span class="line">stem(fpass,fcAmp,<span class="string">'linewidth'</span>,<span class="number">2</span>);</span><br><span class="line">text(fpass+<span class="number">2</span>,fcAmp<span class="number">-1</span>,num2str(fcAmp));</span><br><span class="line"></span><br><span class="line">setPlot(<span class="string">'滤波器幅频特性'</span>,<span class="string">'frequency(Hz)'</span>,<span class="string">'amptitude(dB)'</span>,[F(<span class="number">1</span>) F(end)],[<span class="number">-50</span>,<span class="number">10</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="2-2-setPlot"><a href="#2-2-setPlot" class="headerlink" title="2.2 setPlot"></a>2.2 setPlot</h3><p>程序中用到的 setPlot 函数用于设置图形的 title , xlabel , ylabel , xlim , ylim.</p>
  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[  ]</span> = <span class="title">setPlot</span><span class="params">( varargin )</span></span></span><br><span class="line"><span class="comment">% setPlot()</span></span><br><span class="line"><span class="comment">% setPlot(title)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlabel)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlable,ylabel)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlabel,ylabel,xlim)</span></span><br><span class="line"><span class="comment">% setPlot(title,xlable,ylabel,xlim,ylim)</span></span><br><span class="line"></span><br><span class="line">narginchk(<span class="number">0</span>,<span class="number">5</span>);     <span class="comment">% 判断输入参数是否足够</span></span><br><span class="line"></span><br><span class="line">grid on;</span><br><span class="line">axis tight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">1</span></span><br><span class="line">    title(varargin&#123;<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">2</span></span><br><span class="line">    xlabel(varargin&#123;<span class="number">2</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">3</span></span><br><span class="line">    ylabel(varargin&#123;<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">4</span></span><br><span class="line">    xlim(varargin&#123;<span class="number">4</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nargin&gt;=<span class="number">5</span></span><br><span class="line">    ylim(varargin&#123;<span class="number">5</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-滤波器幅频特性"><a href="#2-3-滤波器幅频特性" class="headerlink" title="2.3 滤波器幅频特性"></a>2.3 滤波器幅频特性</h3><p><img src="/assets/matlab/fc20Hz.png" alt="截止频率"></p>
<p>从图中可以看出，按照要求设计得到的滤波器，截止频率 20Hz 对应的幅值衰减为 -3.0103dB ,约为 -3dB ，与理论所述相吻合。</p>
]]></content>
      
        <categories>
            
            <category> 信号处理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
            <tag> signal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stm32 - FreeRTOS系统移植]]></title>
      <url>http://www.litreily.top/2016/11/02/FreeRTOS/</url>
      <content type="html"><![CDATA[<p>前段时间研究了一下 FreeRTOS 在 stm32 的系统移植，觉得有必要做个总结，记录这研发路上的点点滴滴。</p>
<h2 id="1-FreeRTOS"><a href="#1-FreeRTOS" class="headerlink" title="1. FreeRTOS"></a>1. FreeRTOS</h2><p>从 <a href="http://www.freertos.org/" target="_blank" rel="noopener">FreeRTOS官网</a> 下载最新源码，我下载的是 <a href="http://pan.baidu.com/s/1jIbOqDg" target="_blank" rel="noopener">FreeRTOSv9.0.0</a> ，其文件结构如下，根目录主要包含 FreeRTOS 和 FreeRTOS-Plus 两个文件夹， Plus 版系统添加了 TCP/UDP 等网络通信功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\FREERTOSV9.0.0</span><br><span class="line">│  New - Direct to Task Notifications.html</span><br><span class="line">│  New - FreeRTOS+TCP.html</span><br><span class="line">│  Quick_Start_Guide.html</span><br><span class="line">│  Upgrading-to-FreeRTOS-9.html</span><br><span class="line">│  readme.txt</span><br><span class="line">│</span><br><span class="line">├─FreeRTOS</span><br><span class="line">│   │  links_to_doc_pages_for_the_demo_projects.html</span><br><span class="line">│   │  readme.txt</span><br><span class="line">│   │</span><br><span class="line">│   ├─Demo</span><br><span class="line">│   ├─License</span><br><span class="line">│   └─Source</span><br><span class="line">│</span><br><span class="line">└─FreeRTOS-Plus</span><br><span class="line">    │  readme.txt</span><br><span class="line">    │</span><br><span class="line">    ├─Demo</span><br><span class="line">    └─Source</span><br></pre></td></tr></table></figure>
<p>暂且不考虑plus版，打开FreeRTOS文件夹，其中包含3个文件夹：</p>
<ol>
<li>Demo：不同处理器的FreeRTOS系统移植例程</li>
<li>License：许可证，对FreeRTOS使用范围进行授权</li>
<li>Source：FreeRTOS源码</li>
</ol>
<h3 id="1-1-Demo"><a href="#1-1-Demo" class="headerlink" title="1.1 Demo"></a>1.1 Demo</h3><p>Demo 包含了官方提供的所有已适配处理器的移植例程，我们可以根据自己所用芯片和开发环境选择合适的例程进行学习。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">ARM7_AT91FR40008_GCC</span><br><span class="line">ARM7_AT91SAM7S64_IAR</span><br><span class="line">ARM7_AT91SAM7X256_Eclipse</span><br><span class="line">ARM7_LPC2106_GCC</span><br><span class="line">ARM7_LPC2129_IAR</span><br><span class="line">ARM7_LPC2129_Keil_RVDS</span><br><span class="line">ARM7_LPC2138_Rowley</span><br><span class="line">ARM7_LPC2368_Eclipse</span><br><span class="line">ARM7_LPC2368_Rowley</span><br><span class="line">ARM7_STR71x_IAR</span><br><span class="line">ARM7_STR75x_GCC</span><br><span class="line">ARM7_STR75x_IAR</span><br><span class="line">ARM9_AT91SAM9XE_IAR</span><br><span class="line">ARM9_STR91X_IAR</span><br><span class="line">AVR32_UC3</span><br><span class="line">AVR_ATMega323_IAR</span><br><span class="line">AVR_ATMega323_WinAVR</span><br><span class="line">ColdFire_MCF51CN128_CodeWarrior</span><br><span class="line">ColdFire_MCF52221_CodeWarrior</span><br><span class="line">ColdFire_MCF52233_Eclipse</span><br><span class="line">ColdFire_MCF52259_CodeWarrior</span><br><span class="line">ColdFire_MCF5282_Eclipse</span><br><span class="line">Common</span><br><span class="line">CORTEX_A2F200_IAR_and_Keil</span><br><span class="line">CORTEX_A2F200_SoftConsole</span><br><span class="line">CORTEX_A53_64-bit_UltraScale_MPSoC</span><br><span class="line">CORTEX_A5_SAMA5D2x_Xplained_IAR</span><br><span class="line">CORTEX_A5_SAMA5D3x_Xplained_IAR</span><br><span class="line">CORTEX_A5_SAMA5D4x_EK_IAR</span><br><span class="line">CORTEX_A9_Cyclone_V_SoC_DK</span><br><span class="line">CORTEX_A9_RZ_R7S72100_IAR_DS-5</span><br><span class="line">CORTEX_A9_Zynq_ZC702</span><br><span class="line">CORTEX_AT91SAM3U256_IAR</span><br><span class="line">CORTEX_ATSAM3S-EK2_Atmel_Studio</span><br><span class="line">CORTEX_ATSAM3X_Atmel_Studio</span><br><span class="line">CORTEX_CY8C5588_PSoC_Creator_GCC</span><br><span class="line">CORTEX_CY8C5588_PSoC_Creator_Keil</span><br><span class="line">CORTEX_CY8C5588_PSoC_Creator_RVDS</span><br><span class="line">CORTEX_EFM32_Giant_Gecko_Simplicity_Studio</span><br><span class="line">CORTEX_EFM32_Pearl_Gecko_Simplicity_Studio</span><br><span class="line">CORTEX_EFMG890F128_IAR</span><br><span class="line">CORTEX_Kinetis_K60_Tower_IAR</span><br><span class="line">CORTEX_LM3S102_GCC</span><br><span class="line">CORTEX_LM3S102_Rowley</span><br><span class="line">CORTEX_LM3S316_IAR</span><br><span class="line">CORTEX_LM3S811_GCC</span><br><span class="line">CORTEX_LM3S811_IAR</span><br><span class="line">CORTEX_LM3S811_KEIL</span><br><span class="line">CORTEX_LM3Sxxxx_Eclipse</span><br><span class="line">CORTEX_LM3Sxxxx_IAR_Keil</span><br><span class="line">CORTEX_LM3Sxxxx_Rowley</span><br><span class="line">CORTEX_LPC1768_GCC_RedSuite</span><br><span class="line">CORTEX_LPC1768_GCC_Rowley</span><br><span class="line">CORTEX_LPC1768_IAR</span><br><span class="line">CORTEX_M0+_Atmel_SAMD20_XPlained</span><br><span class="line">CORTEX_M0_Infineon_XMC1000_IAR_Keil_GCC</span><br><span class="line">CORTEX_M0_LPC1114_LPCXpresso</span><br><span class="line">CORTEX_M0_STM32F0518_IAR</span><br><span class="line">CORTEX_M4F_ATSAM4E_Atmel_Studio</span><br><span class="line">CORTEX_M4F_CEC1302_Keil_GCC</span><br><span class="line">CORTEX_M4F_CEC1302_MikroC</span><br><span class="line">CORTEX_M4F_Infineon_XMC4000_GCC_Dave</span><br><span class="line">CORTEX_M4F_Infineon_XMC4000_IAR</span><br><span class="line">CORTEX_M4F_Infineon_XMC4000_Keil</span><br><span class="line">CORTEX_M4F_Infineon_XMC4000_Tasking</span><br><span class="line">CORTEX_M4F_Infineon_XMC4500_GCC_Atollic</span><br><span class="line">CORTEX_M4F_M0_LPC43xx_Keil</span><br><span class="line">CORTEX_M4F_MSP432_LaunchPad_IAR_CCS_Keil</span><br><span class="line">CORTEX_M4F_STM32F407ZG-SK</span><br><span class="line">CORTEX_M4_ATSAM4L_Atmel_Studio</span><br><span class="line">CORTEX_M4_ATSAM4S_Atmel_Studio</span><br><span class="line">CORTEX_M7_SAME70_Xplained_AtmelStudio</span><br><span class="line">CORTEX_M7_SAMV71_Xplained_AtmelStudio</span><br><span class="line">CORTEX_M7_SAMV71_Xplained_IAR_Keil</span><br><span class="line">CORTEX_M7_STM32F7_STM32756G-EVAL_IAR_Keil</span><br><span class="line">CORTEX_MB9A310_IAR_Keil</span><br><span class="line">CORTEX_MB9B500_IAR_Keil</span><br><span class="line">CORTEX_MPU_LM3Sxxxx_Rowley</span><br><span class="line">CORTEX_MPU_LPC1768_GCC_RedSuite</span><br><span class="line">CORTEX_MPU_Simulator_Keil_GCC</span><br><span class="line">CORTEX_R4F_RZ_T_GCC_IAR</span><br><span class="line">CORTEX_R4_RM48_TMS570_CCS5</span><br><span class="line">CORTEX_R5_UltraScale_MPSoC</span><br><span class="line">CORTEX_SmartFusion2_M2S050_SoftConsole</span><br><span class="line">CORTEX_STM32F100_Atollic</span><br><span class="line">CORTEX_STM32F103_GCC_Rowley</span><br><span class="line">CORTEX_STM32F103_IAR</span><br><span class="line">CORTEX_STM32F103_Keil</span><br><span class="line">CORTEX_STM32F103_Primer_GCC</span><br><span class="line">CORTEX_STM32F107_GCC_Rowley</span><br><span class="line">CORTEX_STM32L152_Discovery_IAR</span><br><span class="line">CORTEX_STM32L152_IAR</span><br><span class="line">CORTUS_APS3_GCC</span><br><span class="line">Cygnal</span><br><span class="line">dsPIC_MPLAB</span><br><span class="line">Flshlite</span><br><span class="line">H8S</span><br><span class="line">HCS12_CodeWarrior_banked</span><br><span class="line">HCS12_CodeWarrior_small</span><br><span class="line">HCS12_GCC_banked</span><br><span class="line">IA32_flat_GCC_Galileo_Gen_2</span><br><span class="line">lwIP_AVR32_UC3</span><br><span class="line">lwIP_Demo_Rowley_ARM7</span><br><span class="line">lwIP_MCF5235_GCC</span><br><span class="line">MB91460_Softune</span><br><span class="line">MB96340_Softune</span><br><span class="line">MB96350_Softune_Dice_Kit</span><br><span class="line">MCF5235_GCC</span><br><span class="line">MicroBlaze_Kintex7_EthernetLite</span><br><span class="line">MicroBlaze_Spartan-6_EthernetLite</span><br><span class="line">MSP430X_MSP430F5438_CCS</span><br><span class="line">MSP430X_MSP430F5438_IAR</span><br><span class="line">MSP430X_MSP430FR5969_LaunchPad_IAR_CCS</span><br><span class="line">msp430_CrossWorks</span><br><span class="line">msp430_GCC</span><br><span class="line">msp430_IAR</span><br><span class="line">NEC_78K0R_IAR</span><br><span class="line">NEC_V850ES_IAR</span><br><span class="line">NiosII_CycloneIII_DBC3C40_GCC</span><br><span class="line">PC</span><br><span class="line">PIC18_MPLAB</span><br><span class="line">PIC18_WizC</span><br><span class="line">PIC24_MPLAB</span><br><span class="line">PIC32MEC14xx_MPLAB</span><br><span class="line">PIC32MX_MPLAB</span><br><span class="line">PIC32MZ_MPLAB</span><br><span class="line">PPC405_FPU_Xilinx_Virtex4_GCC</span><br><span class="line">PPC405_Xilinx_Virtex4_GCC</span><br><span class="line">PPC440_DP_FPU_Xilinx_Virtex5_GCC</span><br><span class="line">PPC440_SP_FPU_Xilinx_Virtex5_GCC</span><br><span class="line">PPC440_Xilinx_Virtex5_GCC</span><br><span class="line">RL78_multiple_IAR</span><br><span class="line">RL78_RL78G13_Promo_Board_IAR</span><br><span class="line">RX100-RSK_GCC_e2studio</span><br><span class="line">RX100-RSK_IAR</span><br><span class="line">RX100-RSK_Renesas_e2studio</span><br><span class="line">RX100_RX113-RSK_GCC_e2studio_IAR</span><br><span class="line">RX100_RX113-RSK_Renesas_e2studio</span><br><span class="line">RX200_RX210-RSK_Renesas</span><br><span class="line">RX200_RX231-RSK_GCC_e2studio_IAR</span><br><span class="line">RX200_RX231-RSK_Renesas_e2studio</span><br><span class="line">RX600_RX62N-RDK_GNURX</span><br><span class="line">RX600_RX62N-RDK_IAR</span><br><span class="line">RX600_RX62N-RDK_Renesas</span><br><span class="line">RX600_RX62N-RSK_GNURX</span><br><span class="line">RX600_RX62N-RSK_IAR</span><br><span class="line">RX600_RX62N-RSK_Renesas</span><br><span class="line">RX600_RX630-RSK_Renesas</span><br><span class="line">RX600_RX63N-RDK_Renesas</span><br><span class="line">RX600_RX64M_RSK_GCC_e2studio</span><br><span class="line">RX600_RX64M_RSK_Renesas_e2studio</span><br><span class="line">RX700_RX71M_RSK_GCC_e2studio_IAR</span><br><span class="line">RX700_RX71M_RSK_Renesas_e2studio</span><br><span class="line">SuperH_SH7216_Renesas</span><br><span class="line">TriCore_TC1782_TriBoard_GCC</span><br><span class="line">uIP_Demo_IAR_ARM7</span><br><span class="line">uIP_Demo_Rowley_ARM7</span><br><span class="line">Unsupported_Demos</span><br><span class="line">WIN32-MingW</span><br><span class="line">WIN32-MSVC</span><br><span class="line">WIN32-MSVC-Static-Allocation-Only</span><br><span class="line">WizNET_DEMO_GCC_ARM7</span><br><span class="line">WizNET_DEMO_TERN_186</span><br><span class="line">Xilinx_FreeRTOS_BSP</span><br></pre></td></tr></table></figure>
<h3 id="1-2-Source"><a href="#1-2-Source" class="headerlink" title="1.2 Source"></a>1.2 Source</h3><p>Source 是 FreeRTOS 的核心，包含了系统内核及各类处理器系统移植所需的源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">D:\FREERTOSV9.0.0\FREERTOS\SOURCE</span><br><span class="line">│  croutine.c</span><br><span class="line">│  event_groups.c</span><br><span class="line">│  list.c</span><br><span class="line">│  queue.c</span><br><span class="line">│  readme.txt</span><br><span class="line">│  tasks.c</span><br><span class="line">│  timers.c</span><br><span class="line">│</span><br><span class="line">├─include</span><br><span class="line">│      croutine.h</span><br><span class="line">│      deprecated_definitions.h</span><br><span class="line">│      event_groups.h</span><br><span class="line">│      FreeRTOS.h</span><br><span class="line">│      list.h</span><br><span class="line">│      mpu_prototypes.h</span><br><span class="line">│      mpu_wrappers.h</span><br><span class="line">│      portable.h</span><br><span class="line">│      projdefs.h</span><br><span class="line">│      queue.h</span><br><span class="line">│      semphr.h</span><br><span class="line">│      StackMacros.h</span><br><span class="line">│      stdint.readme</span><br><span class="line">│      task.h</span><br><span class="line">│      timers.h</span><br><span class="line">│</span><br><span class="line">└─portable</span><br><span class="line">    │  readme.txt</span><br><span class="line">    │</span><br><span class="line">    ├─BCC</span><br><span class="line">    │  └─16BitDOS</span><br><span class="line">    │      ├─common</span><br><span class="line">    │      │      portasm.h</span><br><span class="line">    │      │      portcomn.c</span><br><span class="line">    │      │</span><br><span class="line">    │      ├─Flsh186</span><br><span class="line">    │      │      port.c</span><br><span class="line">    │      │      prtmacro.h</span><br><span class="line">    │      │</span><br><span class="line">    │      └─PC</span><br><span class="line">    │              port.c</span><br><span class="line">    │              prtmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─CCS</span><br><span class="line">    │  ├─ARM_CM4F</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.asm</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_Cortex-R4</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.asm</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  └─MSP430X</span><br><span class="line">    │          data_model.h</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portext.asm</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─CodeWarrior</span><br><span class="line">    │  ├─ColdFire_V1</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ColdFire_V2</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  └─HCS12</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Common</span><br><span class="line">    │      mpu_wrappers.c</span><br><span class="line">    │</span><br><span class="line">    ├─GCC</span><br><span class="line">    │  ├─ARM7_AT91FR40008</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portISR.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM7_AT91SAM7S</span><br><span class="line">    │  │      AT91SAM7X256.h</span><br><span class="line">    │  │      ioat91sam7x256.h</span><br><span class="line">    │  │      lib_AT91SAM7X256.c</span><br><span class="line">    │  │      lib_AT91SAM7X256.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portISR.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM7_LPC2000</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portISR.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM7_LPC23xx</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portISR.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CA53_64_BIT</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CA9</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM0</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM3</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM3_MPU</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM4F</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM4_MPU</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM7</span><br><span class="line">    │  │  │  ReadMe.txt</span><br><span class="line">    │  │  │</span><br><span class="line">    │  │  └─r0p1</span><br><span class="line">    │  │          port.c</span><br><span class="line">    │  │          portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CR5</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CRx_No_GIC</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ATMega323</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─AVR32_UC3</span><br><span class="line">    │  │      exception.S</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ColdFire_V2</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─CORTUS_APS3</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─H8S2329</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─HCS12</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─IA32_flat</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MCF5235</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MicroBlaze</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MicroBlazeV8</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_exceptions.c</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MicroBlazeV9</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_exceptions.c</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MSP430F449</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─NiosII</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.S</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─PPC405_Xilinx</span><br><span class="line">    │  │      FPU_Macros.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─PPC440_Xilinx</span><br><span class="line">    │  │      FPU_Macros.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RL78</span><br><span class="line">    │  │      isr_support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX100</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX600</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX600v2</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─STR75x</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portISR.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  └─TriCore_1782</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │          porttrap.c</span><br><span class="line">    │</span><br><span class="line">    ├─IAR</span><br><span class="line">    │  ├─78K0R</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s26</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CA5_No_GIC</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.h</span><br><span class="line">    │  │      portASM.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CA9</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.h</span><br><span class="line">    │  │      portASM.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM0</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM3</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM4F</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM7</span><br><span class="line">    │  │  │  ReadMe.txt</span><br><span class="line">    │  │  │</span><br><span class="line">    │  │  └─r0p1</span><br><span class="line">    │  │          port.c</span><br><span class="line">    │  │          portasm.s</span><br><span class="line">    │  │          portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CRx_No_GIC</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ATMega323</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      portmacro.s90</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─AtmelSAM7S64</span><br><span class="line">    │  │      AT91SAM7S64.h</span><br><span class="line">    │  │      AT91SAM7S64_inc.h</span><br><span class="line">    │  │      AT91SAM7X128.h</span><br><span class="line">    │  │      AT91SAM7X128_inc.h</span><br><span class="line">    │  │      AT91SAM7X256.h</span><br><span class="line">    │  │      AT91SAM7X256_inc.h</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      lib_AT91SAM7S64.h</span><br><span class="line">    │  │      lib_AT91SAM7X128.h</span><br><span class="line">    │  │      lib_AT91SAM7X256.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─AtmelSAM9XE</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─AVR32_UC3</span><br><span class="line">    │  │      exception.s82</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      read.c</span><br><span class="line">    │  │      write.c</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─LPC2000</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MSP430</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.h</span><br><span class="line">    │  │      portext.s43</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─MSP430X</span><br><span class="line">    │  │      data_model.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portext.s43</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RL78</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s87</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX100</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.s</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX600</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.s</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RXv2</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.s</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─STR71x</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─STR75x</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─STR91x</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm.s79</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  └─V850ES</span><br><span class="line">    │          ISR_Support.h</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portasm.s85</span><br><span class="line">    │          portasm_Fx3.s85</span><br><span class="line">    │          portasm_Hx2.s85</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Keil</span><br><span class="line">    │      See-also-the-RVDS-directory.txt</span><br><span class="line">    │</span><br><span class="line">    ├─MemMang</span><br><span class="line">    │      heap_1.c</span><br><span class="line">    │      heap_2.c</span><br><span class="line">    │      heap_3.c</span><br><span class="line">    │      heap_4.c</span><br><span class="line">    │      heap_5.c</span><br><span class="line">    │      ReadMe.url</span><br><span class="line">    │</span><br><span class="line">    ├─MikroC</span><br><span class="line">    │  └─ARM_CM4F</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─MPLAB</span><br><span class="line">    │  ├─PIC18F</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      stdio.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─PIC24_dsPIC</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portasm_dsPIC.S</span><br><span class="line">    │  │      portasm_PIC24.S</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─PIC32MEC14xx</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.S</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─PIC32MX</span><br><span class="line">    │  │      ISR_Support.h</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.S</span><br><span class="line">    │  │</span><br><span class="line">    │  └─PIC32MZ</span><br><span class="line">    │          ISR_Support.h</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │          port_asm.S</span><br><span class="line">    │</span><br><span class="line">    ├─MSVC-MingW</span><br><span class="line">    │      port.c</span><br><span class="line">    │      portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─oWatcom</span><br><span class="line">    │  └─16BitDOS</span><br><span class="line">    │      ├─common</span><br><span class="line">    │      │      portasm.h</span><br><span class="line">    │      │      portcomn.c</span><br><span class="line">    │      │</span><br><span class="line">    │      ├─Flsh186</span><br><span class="line">    │      │      port.c</span><br><span class="line">    │      │      portmacro.h</span><br><span class="line">    │      │</span><br><span class="line">    │      └─PC</span><br><span class="line">    │              port.c</span><br><span class="line">    │              portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Paradigm</span><br><span class="line">    │  └─Tern_EE</span><br><span class="line">    │      ├─large_untested</span><br><span class="line">    │      │      port.c</span><br><span class="line">    │      │      portasm.h</span><br><span class="line">    │      │      portmacro.h</span><br><span class="line">    │      │</span><br><span class="line">    │      └─small</span><br><span class="line">    │              port.c</span><br><span class="line">    │              portasm.h</span><br><span class="line">    │              portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Renesas</span><br><span class="line">    │  ├─RX100</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.src</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX200</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.src</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX600</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.src</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─RX600v2</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      port_asm.src</span><br><span class="line">    │  │</span><br><span class="line">    │  └─SH2A_FPU</span><br><span class="line">    │          ISR_Support.inc</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portasm.src</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Rowley</span><br><span class="line">    │  ├─ARM7</span><br><span class="line">    │  │      readme.txt</span><br><span class="line">    │  │</span><br><span class="line">    │  └─MSP430F449</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portasm.h</span><br><span class="line">    │          portext.asm</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─RVDS</span><br><span class="line">    │  ├─ARM7_LPC21xx</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      portmacro.inc</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CA9</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portASM.s</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      portmacro.inc</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM0</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM3</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM4F</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─ARM_CM4_MPU</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │</span><br><span class="line">    │  └─ARM_CM7</span><br><span class="line">    │      │  ReadMe.txt</span><br><span class="line">    │      │</span><br><span class="line">    │      └─r0p1</span><br><span class="line">    │              port.c</span><br><span class="line">    │              portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─SDCC</span><br><span class="line">    │  └─Cygnal</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │</span><br><span class="line">    ├─Softune</span><br><span class="line">    │  ├─MB91460</span><br><span class="line">    │  │      port.c</span><br><span class="line">    │  │      portmacro.h</span><br><span class="line">    │  │      __STD_LIB_sbrk.c</span><br><span class="line">    │  │</span><br><span class="line">    │  └─MB96340</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │          __STD_LIB_sbrk.c</span><br><span class="line">    │</span><br><span class="line">    ├─Tasking</span><br><span class="line">    │  └─ARM_CM4F</span><br><span class="line">    │          port.c</span><br><span class="line">    │          portmacro.h</span><br><span class="line">    │          port_asm.asm</span><br><span class="line">    │</span><br><span class="line">    └─WizC</span><br><span class="line">        └─PIC18</span><br><span class="line">            │  addFreeRTOS.h</span><br><span class="line">            │  Install.bat</span><br><span class="line">            │  port.c</span><br><span class="line">            │  portmacro.h</span><br><span class="line">            │</span><br><span class="line">            └─Drivers</span><br><span class="line">                └─Tick</span><br><span class="line">                        isrTick.c</span><br><span class="line">                        Tick.c</span><br></pre></td></tr></table></figure>
<h2 id="2-系统移植"><a href="#2-系统移植" class="headerlink" title="2. 系统移植"></a>2. 系统移植</h2><p>以 stm32f103RCT6 为例，选择 Keil MDK v5.21.1.0 作为开发平台进行系统移植。</p>
<h3 id="2-1-功能描述"><a href="#2-1-功能描述" class="headerlink" title="2.1 功能描述"></a>2.1 功能描述</h3><ol>
<li>PB10 作为输出口，控制 LED 的亮灭；</li>
<li>编写延时函数 delay ，以毫秒为单位；</li>
<li>使用 USART2 循环发送数据，波特率9600，8位数据位，1位停止位，无校验，无硬件控制流；</li>
<li>系统移植，添加 3 个 task：vLEDOnTask，vLEDOffTask，vUasrtSendTask</li>
</ol>
<h3 id="2-2-创建项目-BrightLed"><a href="#2-2-创建项目-BrightLed" class="headerlink" title="2.2 创建项目 (BrightLed)"></a>2.2 创建项目 (BrightLed)</h3><ul>
<li>选择芯片 (stm32f103RCT6)</li>
</ul>
<p><img src="/assets/stm32/selectChip.png" alt="选择芯片"></p>
<ul>
<li>选择外设</li>
</ul>
<p>自从 Keil MDK 更新至 v5.0 以后，软件安装完成便可使用 &quot;Pack installer&quot; 让其自动下载所需的软件包；新建项目也变得更加简单方便，可以使用 &quot;manager run-time environment&quot; 选择所需的片内外设。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Software Compoent</span><br><span class="line">├─CMSIS</span><br><span class="line">│    │  CORE</span><br><span class="line">│    │</span><br><span class="line">└─Device</span><br><span class="line">     │  GPIO</span><br><span class="line">     │  Startup</span><br><span class="line">     │</span><br><span class="line">     └─stdPeriph Drivers</span><br><span class="line">         │  Framework</span><br><span class="line">         │  GPIO</span><br><span class="line">         │  RCC</span><br><span class="line">         │  USARTs</span><br></pre></td></tr></table></figure>
<p>外设说明：</p>
<ol>
<li><strong>CORE</strong>(必选)： 提供与 Cortex-M0、<strong>Cortex-M3</strong>、Cortex-M4、SC000 和 SC300 处理器与外围寄存器之间的接口</li>
<li><strong>Framework</strong>(必选)： 标准外设驱动框架(Standard Peripheral Drivers Framework)</li>
<li><strong>RCC</strong>(必选)： 提供与系统时钟相关的库函数</li>
<li><strong>GPIO</strong>： 提供与通用IO接口相关的库函数</li>
<li><strong>USART</strong>： 提供与UART/USART相关的库函数</li>
</ol>
<p><img src="/assets/stm32/selectDevice.png" alt="选择外设"></p>
<ul>
<li>设置参数</li>
</ul>
<p>打开 <code>Options for target</code>，依次设置下列参数：</p>
<pre class="descriptions">
1. Target > Xtal(MHz)): 8.0
2. C/C++  > Define: USE_STDPERIPH_DRIVER,STM32F10X_MD
3. Debug  > Use: ST-Link Debugger
    3.1 Settings > Debug > Debug Adapter: ST-LINK/V2; Port:SW; Max: 1.8MHz
    3.2 Settings > Flash Download > Reset and Run:[√]
    3.3 Settings > Flash Download > Programming Algorithm: STM32f10x Med-density Flash
</pre>

<p>所有参数均设置完成后，项目创建过程就结束了。</p>
<p><img src="/assets/stm32/setSymbols.png" alt="设置Processing Symbols"></p>
<p><img src="/assets/stm32/selectFlash.png" alt="选择flash大小"></p>
<h3 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h3><p>创建项目后，需要编写代码以实现对系统时钟及所需外设的初始化。</p>
<ul>
<li>初始化流程</li>
</ul>
<pre class="descriptions">
1. 首先，将默认组名称改为 `USER` ，并在本地项目目录下添加文件夹，命名为 &quot;USER&quot; 。
2. 其次，新建并保存以下文件至 &quot;USER&quot; 文件夹，同时添加其中的 .c 文件到项目组 `USER`中。
    2.1 主程序：main.c / main.h
    2.2 中断程序：stm32f10x_it.c / stm32f10x_it.h
    2.3 延时模块: delay.c / delay.h
    2.4 led控制模块：led.c / led.h
    2.5 串口通信模块：usart.c / usart.h
3. 最后，对各个文件进行编码，完成各项初始化任务
</pre>

<ul>
<li>项目文件结构</li>
</ul>
<p><img src="/assets/stm32/projectFile.png" alt="项目目录"></p>
<ul>
<li>初始化程序设计</li>
</ul>
<blockquote>
<p><strong>delay.c / delay.h</strong></p>
</blockquote>
<div class="smallTitle">delay.c</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> u32 TimingDelay;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delayInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* SystemFrequency / 1000    1ms</span></span><br><span class="line"><span class="comment">   * SystemFrequency / 100000   10us</span></span><br><span class="line"><span class="comment">   * SystemFrequency / 1000000 1us</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> SYSCLK_FREQ_72MHz  72000000    <span class="comment">// 系统主频</span></span></span><br><span class="line">  <span class="keyword">if</span> (SysTick_Config(SYSCLK_FREQ_72MHz / <span class="number">1000000</span>))</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">/* Capture error */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ms级延时函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(__IO u32 nTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TimingDelay = nTime * <span class="number">1000</span>;</span><br><span class="line">  SysTick-&gt;CTRL |= SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">  <span class="keyword">while</span>(TimingDelay != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// us级延时函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delayMicroseconds</span><span class="params">(__IO u32 nTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TimingDelay = nTime;</span><br><span class="line">  SysTick-&gt;CTRL |= SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">  <span class="keyword">while</span>(TimingDelay != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="smallTitle">delay.h</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DELAY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELAY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delayInit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(__IO u32 nTime)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delayMicroseconds</span><span class="params">(__IO u32 nTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* DELAY_H_ */</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>led.c / led.h</strong></p>
</blockquote>
<div class="smallTitle">led.c</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledGPIOConfiguration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="smallTitle">led.h</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_PORT (GPIO_Pin_10)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledGPIOConfiguration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LED_H */</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>usart.c / usart.h</strong></p>
</blockquote>
<div class="smallTitle">usart.c</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usart.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//串口驱动应用标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> Derive_UART2SendFlag, Derive_UART2TxIntState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开串口 并执行初始化</span></span><br><span class="line"><span class="comment">//8位数据位 无校验 1位起始位/1位停止位 允许收发中断  宏定义BAUDRATE设定波特率 低优先级中断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart2Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//波特率设置</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span>   UART_BAUDDEF  9600</span></span><br><span class="line">  GPIO_InitTypeDef    GPIO_InitStructure;</span><br><span class="line">  USART_InitTypeDef   USART_InitStructure;</span><br><span class="line">  NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);</span><br><span class="line">  <span class="comment">//管脚配置</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);      <span class="comment">/* TXIO */</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);       <span class="comment">/* RXIO */</span></span><br><span class="line">  <span class="comment">//串口工作模式配置</span></span><br><span class="line">  USART_InitStructure.USART_BaudRate = UART_BAUDDEF;</span><br><span class="line">  USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">  USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line">  USART_InitStructure.USART_Parity = USART_Parity_No ;</span><br><span class="line">  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line">  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</span><br><span class="line">  USART_Init(USART2, &amp;USART_InitStructure);</span><br><span class="line">  <span class="comment">//中断设置</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;       <span class="comment">//低优先级别的中断</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;        <span class="comment">//响应中断等级为0</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">  Derive_UART2TxIntState = <span class="literal">false</span>;</span><br><span class="line">  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);</span><br><span class="line">  <span class="comment">//START</span></span><br><span class="line">  USART_Cmd(USART2, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从串口发送一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UARTSendByByter</span><span class="params">(u16 Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//发送数据</span></span><br><span class="line">  USART_SendData(USART2, (u8)Data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!Derive_UART2TxIntState)</span><br><span class="line">  &#123;</span><br><span class="line">    Derive_UART2TxIntState = <span class="literal">true</span>;</span><br><span class="line">    USART_ITConfig(USART2, USART_IT_TXE, ENABLE);</span><br><span class="line">  &#125;</span><br><span class="line">  Derive_UART2SendFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口收发中断处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_TRxOver_Interrupt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(USART_GetITStatus(USART2, USART_IT_TXE) == SET)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//发送中断</span></span><br><span class="line">    <span class="comment">//清零标志</span></span><br><span class="line">    USART_ClearITPendingBit(USART2, USART_IT_TXE);</span><br><span class="line">    Derive_UART2SendFlag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//tx interrupt..</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(!Derive_UART2SendFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);</span><br><span class="line">        Derive_UART2TxIntState = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(USART_GetITStatus(USART2, USART_IT_RXNE) == SET)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//接收中断</span></span><br><span class="line">    <span class="comment">//-------- 回传接收到的数据 --------</span></span><br><span class="line">    UARTSendByByter(USART_ReceiveData(USART2));</span><br><span class="line">    USART_ClearFlag(USART2,USART_FLAG_RXNE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="smallTitle">usart.h</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> USART_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_rcc.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_gpio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">bool</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart2Config</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UARTSendByByter</span><span class="params">(u16 Data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* USART_H */</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>stm32f10x_it.c / stm32f10x_it.h</strong></p>
</blockquote>
<div class="smallTitle">stm32f10x_it.c</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_it.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NMI_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HardFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Go to infinite loop when Hard Fault exception occurs */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MemManage_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Go to infinite loop when Memory Manage exception occurs */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BusFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Go to infinite loop when Bus Fault exception occurs */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UsageFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Go to infinite loop when Usage Fault exception occurs */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RTE_RTOS_RTX</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SVC_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugMon_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RTE_RTOS_RTX</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PendSV_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> u32 TimingDelay;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (TimingDelay != <span class="number">0x00</span>) &#123;</span><br><span class="line">    TimingDelay--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">UART_TRxOver_Interrupt</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  UART_TRxOver_Interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="smallTitle">stm32f10x_it.h</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STM32F10x_IT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __STM32F10x_IT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"> <span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="comment">/* Exported types ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Exported constants --------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Exported macro ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Exported functions --------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NMI_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HardFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MemManage_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BusFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UsageFault_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SVC_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugMon_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PendSV_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STM32F10x_IT_H */</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>main.c / main.h</strong></p>
</blockquote>
<div class="smallTitle">main.c</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * Header       : Learning FreeRTOS</span></span><br><span class="line"><span class="comment"> * File Name    : main.c</span></span><br><span class="line"><span class="comment"> * Author       : wgt</span></span><br><span class="line"><span class="comment"> * Date         : 2016.11.2</span></span><br><span class="line"><span class="comment"> * Description  :</span></span><br><span class="line"><span class="comment"> *******************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ENABLE the clk of GPIO */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deviceInit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* setup the hardware of system */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvSetupHardware</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : main</span></span><br><span class="line"><span class="comment">* Description    : main function,the interface of system</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  prvSetupHardware();  <span class="comment">// 设备初始化</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : prvSetupHardware</span></span><br><span class="line"><span class="comment">* Description    : initial hardwares</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvSetupHardware</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deviceInit();</span><br><span class="line">  delayInit();    <span class="comment">// SysTick滴答时钟初始化</span></span><br><span class="line">  ledGPIOConfiguration();</span><br><span class="line">  usart2Config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : deviceInit</span></span><br><span class="line"><span class="comment">* Description    : ENABLE the clk of GPIO</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deviceInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//--------------------------- CLK INIT, HSE PLL ----------------------------</span></span><br><span class="line">  ErrorStatus HSEStartUpStatus;</span><br><span class="line">  <span class="comment">//RCC reset</span></span><br><span class="line">  RCC_DeInit();</span><br><span class="line">  <span class="comment">//开启外部时钟 并执行初始化</span></span><br><span class="line">  RCC_HSEConfig(RCC_HSE_ON);</span><br><span class="line">  <span class="comment">//等待外部时钟准备好</span></span><br><span class="line">  HSEStartUpStatus = RCC_WaitForHSEStartUp();</span><br><span class="line">  <span class="comment">//启动失败 在这里等待</span></span><br><span class="line">  <span class="keyword">while</span>(HSEStartUpStatus == ERROR);</span><br><span class="line">  <span class="comment">//设置内部总线时钟</span></span><br><span class="line">  RCC_HCLKConfig(RCC_SYSCLK_Div1);</span><br><span class="line">  RCC_PCLK1Config(RCC_HCLK_Div1);</span><br><span class="line">  RCC_PCLK2Config(RCC_HCLK_Div1);</span><br><span class="line">  <span class="comment">//外部时钟为8M 这里倍频到72M</span></span><br><span class="line">  RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);</span><br><span class="line">  RCC_PLLCmd(ENABLE);</span><br><span class="line">  <span class="keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);</span><br><span class="line">  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);</span><br><span class="line">  <span class="keyword">while</span>(RCC_GetSYSCLKSource() != <span class="number">0x08</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//----------------------------- CLOSE HSI ---------------------------</span></span><br><span class="line">  <span class="comment">//关闭内部时钟HSI</span></span><br><span class="line">  RCC_HSICmd(DISABLE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//中断配置 2-level interrupt</span></span><br><span class="line">  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//开总中断</span></span><br><span class="line">  __enable_irq();</span><br><span class="line">  <span class="comment">/******************   OPEN GPIO CLK   **************/</span></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="smallTitle">main.h</div>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* MAIN_H */</span></span></span><br></pre></td></tr></table></figure>
<p>至此，系统时钟及外设的初始化程序已经完成。以上程序，除去 led.c/led.h, usart.c/usart.h 外，可作为无需操作系统的stm32项目模板。</p>
<h3 id="2-4-内核移植"><a href="#2-4-内核移植" class="headerlink" title="2.4 内核移植"></a>2.4 内核移植</h3><ul>
<li>新建组<ul>
<li>在项目中添加一个组，命名为 <strong>FreeRTOS</strong> ；</li>
<li>在本地目录新建文件夹，同样命名为 FreeRTOS ，用于存放系统内核的源文件；</li>
<li>在 FreeRTOS 文件夹下新建子文件夹 include ，用于存放系统内核的头文件。</li>
</ul>
</li>
<li>复制文件<ul>
<li>从系统 FreeRTOSv9.0.0 的源码 <code>FreeRTOS\Source</code> 中找到以下源文件，并将其复制至 FreeRTOS 文件夹；<ul>
<li><code>Source</code> 中的 <strong>list.c</strong>, <strong>queue.c</strong>, <strong>tasks.c</strong></li>
<li><code>Source\portable\RVDS\ARM_CM3</code> 中的 <strong>port.c</strong></li>
<li><code>Source\portable\MemMang</code> 中的 <strong>heap_2.c</strong></li>
</ul>
</li>
<li>从系统 FreeRTOSv9.0.0 的源码 <code>FreeRTOS</code> 中找到以下头文件，并将其复制至 FreeRTOS/include 文件夹；<ul>
<li><code>Source\include</code> 中的所有头文件，包括其中的 stdint.readme 文件</li>
<li><code>Source\portable\RVDS\ARM_CM3</code> 中的 <strong>portmacro.h</strong></li>
<li><code>Demo\CORTEX_STM32F103_Keil</code> 中的 <strong>FreeRTOSConfig.h</strong></li>
</ul>
</li>
<li>在项目组 FreeRTOS 中添加以上已复制好的源文件</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>说明</strong>：FreeRTOS可以在很多不同编译器中编译，其中的一些编译器比同类有更高级特性。因为这个原因，FreeRTOS不使用任何非C语言标准的特性或语法。一个例外情况是头文件stdint.h。在文件夹FreeRTOS/Source/include下包含一个叫做stdint.readme的文件，如果你的编译器不提供stdint类型定义，可以将stdint.readme文件重命名为stdint.h。</p>
</blockquote>
<p>参考：<a href="http://blog.csdn.net/zhzht19861011/article/details/50057531" target="_blank" rel="noopener">FreeRTOS编码标准及风格指南</a></p>
<p>完成以上步骤后，文件结构应该如下各图所示：</p>
<div class="smallTitle">File - FreeRTOS</div>

<p><img src="/assets/stm32/folderfreeRTOS.png" alt="本地文件中的FreeRTOS文件夹"></p>
<div class="smallTitle">File - FreeRTOS\include</div>

<p><img src="/assets/stm32/folderfreeRTOSInclude.png" alt="本地文件中的include文件夹"></p>
<div class="smallTitle">MDK - FreeRTOS</div>

<p><img src="/assets/stm32/groupfreeRTOS.png" alt="MDK中的FreeRTOS组"></p>
<ul>
<li>添加路径</li>
</ul>
<p>再次打开 <code>Options for target</code>&gt;&gt;<code>C/C++</code>，在 Include Paths 中添加:</p>
<ol>
<li>.\USER</li>
<li>.\FreeRTOS</li>
<li>.\FreeRTOS\include</li>
</ol>
<p><img src="/assets/stm32/addPath.png" alt="添加路径"></p>
<ul>
<li>修改启动文件</li>
</ul>
<p>打开文件 &quot;startup_stm32f10x_md.s&quot;，在 50 行附近找到以下代码段：</p>
<div class="smallTitle">文件修改前</div>

<p><img src="/assets/stm32/beforeAddExport.png" alt="添加Export之前的启动文件"></p>
<div class="smallTitle">修改方式</div>

<pre class="descriptions">
在 &quot;__heap_limit&quot;后添加：
<pre>
IMPORT xPortPendSVHandler
IMPORT xPortSysTickHandler
IMPORT vPortSVCHandler
</pre>将 75 行左右的
<pre>
DCD     SVC_Handler
DCD     PendSV_Handler
DCD     SysTick_Handler
</pre>依次修改为：
<pre>
DCD     vPortSVCHandler
DCD     xPortPendSVHandler
DCD     xPortSysTickHandler
</pre></pre>

<div class="smallTitle">文件修改后</div>

<p><img src="/assets/stm32/afterAddExport.png" alt="添加Export之前的启动文件"></p>
<h3 id="2-5-内核裁剪文件"><a href="#2-5-内核裁剪文件" class="headerlink" title="2.5 内核裁剪文件"></a>2.5 内核裁剪文件</h3><p>前面添加的头文件 &quot;FreeRTOSConfig.h&quot; 是系统内核配置文件，通过修改文件中的宏定义，可以对内核进行裁剪，保留所需功能。从例程中得到的该文件源码如下，更加详细的设置方法和各变量用途将在后续应用中介绍。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Application specific definitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These definitions should be adjusted for your particular hardware and</span></span><br><span class="line"><span class="comment"> * application requirements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE</span></span><br><span class="line"><span class="comment"> * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See http://www.freertos.org/a00110.html.</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PREEMPTION    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_IDLE_HOOK      0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICK_HOOK      0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCPU_CLOCK_HZ      ( ( unsigned long ) 72000000 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTICK_RATE_HZ      ( ( TickType_t ) 1000 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_PRIORITIES    ( 5 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMINIMAL_STACK_SIZE  ( ( unsigned short ) 128 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTOTAL_HEAP_SIZE    ( ( size_t ) ( 17 * 1024 ) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_TASK_NAME_LEN    ( 16 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TRACE_FACILITY  0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_16_BIT_TICKS    0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configIDLE_SHOULD_YIELD    1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Co-routine definitions. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_CO_ROUTINES     0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES ( 2 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the following definitions to 1 to include the API function, or zero</span></span><br><span class="line"><span class="comment">to exclude the API function. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskPrioritySet    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_uxTaskPriorityGet    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelete        1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskCleanUpResources  0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskSuspend      1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelayUntil      1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelay        1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255</span></span><br><span class="line"><span class="comment">(lowest) to 0 (1?) (highest). */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY     255</span></span><br><span class="line"><span class="comment">/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!</span></span><br><span class="line"><span class="comment">See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY   191 <span class="comment">/* equivalent to 0xb0, or priority 11. */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the value being used as per the ST library which permits 16</span></span><br><span class="line"><span class="comment">priority values, 0 to 15.  This must correspond to the</span></span><br><span class="line"><span class="comment">configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest</span></span><br><span class="line"><span class="comment">NVIC value of 255. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_KERNEL_INTERRUPT_PRIORITY  15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FREERTOS_CONFIG_H */</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-6-功能实现"><a href="#2-6-功能实现" class="headerlink" title="2.6 功能实现"></a>2.6 功能实现</h3><p>经过以上步骤，系统移植工作已经完成，现在便可以创建多个任务，并启动任务调度器进行任务调度。</p>
<ul>
<li>在 &quot;main.h&quot; 添加 FreeRTOS 相关的头文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;FreeRTOS.h&quot;</span><br><span class="line">#include &quot;task.h&quot;</span><br><span class="line">#include &quot;queue.h&quot;</span><br><span class="line">#include &quot;list.h&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写任务</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时亮灯任务</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">vLEDOnTask</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TickType_t xLastWakeTime;</span><br><span class="line">  <span class="keyword">const</span> TickType_t xFrequency = <span class="number">1000</span>/portTICK_RATE_MS;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* xLastWakeTime需要被初始化为当前心跳计数值，此次赋值过后，</span></span><br><span class="line"><span class="comment">  该变量将在vTaskDelayUntil函数中自动更新 */</span></span><br><span class="line">  xLastWakeTime = xTaskGetTickCount();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    GPIO_ResetBits(GPIOB,LED_PORT);</span><br><span class="line">    UARTSendByByter(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">    vTaskDelayUntil(&amp;xLastWakeTime,xFrequency);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时灭灯任务</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">vLEDOffTask</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">        GPIO_SetBits(GPIOB,LED_PORT);</span><br><span class="line">    UARTSendByByter(<span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line">      vTaskDelay(<span class="number">2000</span>/portTICK_RATE_MS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时串口发送任务</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">vUasrtSendTask</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> cnt=<span class="number">0</span>;</span><br><span class="line">  TaskHandle_t xTaskLedOffHandle = (TaskHandle_t)pvParameters;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    UARTSendByByter(cnt++);</span><br><span class="line">    <span class="keyword">if</span>(xTaskLedOffHandle!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(cnt==<span class="number">50</span>)</span><br><span class="line">        vTaskSuspend(xTaskLedOffHandle);    <span class="comment">// 挂起灭灯任务</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">100</span>)</span><br><span class="line">        vTaskResume(xTaskLedOffHandle);    <span class="comment">// 唤醒灭灯任务</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">255</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        vTaskDelete(xTaskLedOffHandle);    <span class="comment">// 删除灭灯任务</span></span><br><span class="line">        xTaskLedOffHandle=<span class="literal">NULL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vTaskDelay(<span class="number">1500</span>/portTICK_RATE_MS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建任务并启动调度器</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TaskHandle_t xTaskLedOffHandle;    <span class="comment">/* 定义灭灯任务句柄 */</span></span><br><span class="line">  prvSetupHardware();            <span class="comment">/* 设备初始化 */</span></span><br><span class="line"></span><br><span class="line">  xTaskCreate(vLEDOffTask,           <span class="comment">/* 指向任务函数的指针 */</span></span><br><span class="line">      <span class="string">"vLEDOffTask"</span>,           <span class="comment">/* 任务的文本名字，只在调试中用到 */</span></span><br><span class="line">      configMINIMAL_STACK_SIZE,   <span class="comment">/* 分配的栈空间大小 */</span></span><br><span class="line">      <span class="literal">NULL</span>,                 <span class="comment">/* 没有给当前任务提供参数 */</span></span><br><span class="line">      tskIDLE_PRIORITY+<span class="number">1</span>,        <span class="comment">/* 设置任务优先级 */</span></span><br><span class="line">      &amp;xTaskLedOffHandle        <span class="comment">/* 获取任务句柄，存入xTaskLedOffHandle */</span></span><br><span class="line">      );</span><br><span class="line">  xTaskCreate(vLEDOnTask, <span class="string">"vLEDOnTask"</span>, configMINIMAL_STACK_SIZE, <span class="literal">NULL</span>, tskIDLE_PRIORITY+<span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">  xTaskCreate(vUasrtSendTask, <span class="string">"vUasrtSendTask"</span>, configMINIMAL_STACK_SIZE,</span><br><span class="line">              (TaskHandle_t)(xTaskLedOffHandle), tskIDLE_PRIORITY+<span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 启动任务调度器 */</span></span><br><span class="line">  vTaskStartScheduler();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>功能测试</li>
</ul>
<p><img src="/assets/stm32/tasksTest.png" alt="任务测试结果"></p>
<p>从图中可以看出，16 进制数据 0x31, 0x32 交替出现，同时有一变量(假设为 y )从 0x01 逐一增至 0xff 后返回 0x01 继续增加，在 y 处于 0x32(50) 与 0x64(100) 之间时，0x32 暂停出现，后重新出现，直到 y 增至 0xff 后永不再现。此外，硬件部分，PB10 外接的 LED 也随着任务进行亮灭交替变换，最后保持在灯亮状态。</p>
<p><img style="display:inline" alt="LedOn" src="/assets/stm32/ledOn.jpg"></p>
<p><img style="display:inline" alt="LedOff" src="/assets/stm32/ledOff.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> stm32 </tag>
            
            <tag> FreeRTOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在博客中添加音乐]]></title>
      <url>http://www.litreily.top/2016/10/28/add-Music/</url>
      <content type="html"><![CDATA[<h2 id="1-音乐来源"><a href="#1-音乐来源" class="headerlink" title="1. 音乐来源"></a>1. 音乐来源</h2><p>现在要找个 <code>.mp3</code> 外链资源可真不容易，以往的酷狗歌曲信息里带着，现在也不见了，百度音乐下载也得用客户端，还不显示链接，各大音乐网站真是越来越小心了啊。</p>
<h3 id="1-1-网易云音乐"><a href="#1-1-网易云音乐" class="headerlink" title="1.1 网易云音乐"></a>1.1 网易云音乐</h3><p>想要从网站获取音乐链接的方法还是有的，比如说  <a href="http://music.163.com/#" target="_blank" rel="noopener">网易云音乐</a>  。使用Google/firefox/edge等带开发者工具的浏览器打开网易云音乐，搜索自己想要的音乐，并进行播放，然后打开开发者工具。开发工具打开方式：</p>
<ol>
<li>谷歌：右键点击  <strong>检查</strong>，或使用快捷键 <code>Ctrl+Shift+I</code> ;</li>
<li>edge：右键点击 <strong>检查元素</strong>/ <strong>查看源</strong>，或使用快捷键 <code>F12</code> ;</li>
<li>firefox：快捷键 <code>Shift+F2</code> 。</li>
</ol>
<p><img src="/assets/music/xishanyao.png" alt="网易云音乐"></p>
<p>以  <a href="http://music.163.com/#/song?id=405253647" target="_blank" rel="noopener">夕山谣</a>  为例，打开开发工具，找到  <code>Application</code> ，打开 <code>Frames/top/Media</code> 。</p>
<p><img src="/assets/music/xishanyaoLink.png" alt="开发工具"></p>
<p>右键选择&quot; Open link in new tab &quot; 或者 &quot; Copy link address &quot;，选取链接的前半部分,以 <code>.mp3</code> 结尾。得到链接：</p>
<pre>
夕山谣
http://m10.music.126.net/20161028204714/808f68e0d3afc7d68d6945d0ce8336eb/ymusic/5a20/163f/3437/9a6871479b12bc82fff53821676faedc.mp3
</pre>


<h3 id="1-2-本地上传"><a href="#1-2-本地上传" class="headerlink" title="1.2 本地上传"></a>1.2 本地上传</h3><p>除了上述方法外，也可以手动制作音乐外链，当然，这需要借助于其它网站，比如  <a href="http://www.111ttt.com/up/" target="_blank" rel="noopener">www.111ttt.com/up/</a>  。在该网站上传已经下好的音乐文件，然后点击播放地址，在弹出的页面底部就有已生成的外链地址了。</p>
<p><img src="/assets/music/upFile.png" alt="上传音乐"></p>
<pre>
Critty 杏花弦外雨
http://sc.111ttt.com/up/mp3/193721/278DF18856D56FEC6B4E6EDC15D97906.mp3
</pre>


<h3 id="1-3-七牛云存储"><a href="#1-3-七牛云存储" class="headerlink" title="1.3 七牛云存储"></a>1.3 七牛云存储</h3><p><a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a> 作为国内领先的企业级云服务商，当然提供了最基本的云存储服务。当前可以免费注册并进行实名认证，之后可以获取 10GB 的免费存储空间。</p>
<p><img src="/assets/music/qiniuyunSpace.png" alt="七牛云免费空间"></p>
<p>注册并登录后，需要先创建一个空间，如 <code>litreily</code>，然后打开 <code>对象存储</code> &gt;&gt; <code>litreily</code> &gt;&gt; <code>内容管理</code>。此时便可上传文件，文件类型不限，我们可以将本地音乐文件上传后获取其外链地址。</p>
<p><img src="/assets/music/qiniuyunLink.png" alt="七牛云外链获取方法"></p>
<p>所得外链地址为：</p>
<pre>
CRITTY - 轮回之境
http://ofx35z92m.bkt.clouddn.com/CRITTY%20-%20%E8%BD%AE%E5%9B%9E%E4%B9%8B%E5%A2%83.mp3
</pre>

<audio class="musicPlayer" src="http://ofx35z92m.bkt.clouddn.com/CRITTY%20-%20%E8%BD%AE%E5%9B%9E%E4%B9%8B%E5%A2%83.mp3" autoplay></audio>



<h2 id="2-音乐播放器"><a href="#2-音乐播放器" class="headerlink" title="2. 音乐播放器"></a>2. 音乐播放器</h2><h3 id="2-1-网易云音乐插件"><a href="#2-1-网易云音乐插件" class="headerlink" title="2.1 网易云音乐插件"></a>2.1 网易云音乐插件</h3><p>网易云音乐提供了外链播放器，官方提供的使用方法如下：</p>
<ol>
<li>在 <a href="http://music.163.com/" target="_blank" rel="noopener">music.163.com</a> 进入单曲、歌单、专辑、电台节目页面后，点击 “生成外链播放器” 链接。</li>
<li>歌单和专辑外链播放器可以选择大中小三种尺寸，单曲和电台节目可以选择中小两种尺寸。你可以选择最适合你网站设计的尺寸。</li>
<li>还可以选择是否要自动播放，打上勾后，别人访问网站时播放器会自动开始播放。</li>
<li>最后将播放器的代码黏贴到你的网站上，大功告成！</li>
</ol>
<p>[示例：杏花轩外雨]</p>
<p><img src="/assets/music/wlPlayer.png" alt="网易云音乐外链播放器"></p>
<p>[示例代码]</p>
<p><img src="/assets/music/wlDemo.png" alt="网易云音乐外链demo"></p>
<p>[示例说明]</p>
<ol>
<li>HTML源码中的 &quot; auto=1 &quot; 代表自动播放，改为0即可取消自动播放功能；</li>
<li>在markdown文件中引用该插件时，需要将 <code>iframe</code> 的 <code>width</code> 和 <code>height</code> 属性值用双引号包围起来，即 width=&quot;330&quot; height=&quot;86&quot; ,否则可能出现无法解析该代码的情况；</li>
<li>使用插件时可以添加一个类（如：class=&quot;musicPlayer&quot;），参考以下代码可以设置播放器的长宽。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.musicPlayer</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[示例播放1：height=66 auto=1]</p>
<iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=32957012&auto=1&height=66"></iframe>

 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"musicPlayer"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"330"</span></span></span><br><span class="line"><span class="tag"><span class="attr">height</span>=<span class="string">"86"</span> <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;id=32957012&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[示例播放2：height=32 auto=0]</p>
<iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="https://music.163.com/outchain/player?type=2&id=32548265&auto=0&height=32"></iframe>

 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"musicPlayer"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"298"</span></span></span><br><span class="line"><span class="tag"><span class="attr">height</span>=<span class="string">"52"</span> <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;id=32548265&amp;auto=0&amp;height=32"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-audio-js"><a href="#2-2-audio-js" class="headerlink" title="2.2 audio.js"></a>2.2 audio.js</h3><p><a href="https://kolber.github.io/audiojs/" target="_blank" rel="noopener">audio.js</a>是一款轻量级的音乐播放器，下载文件后，将文件夹 &quot;audiojs&quot; 放在网站文件目录中，通过以下代码的形式将该播放器引入网页中。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/audiojs/audio.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      audiojs.events.ready(function() &#123;</span></span><br><span class="line"><span class="undefined">        audiojs.createAll();</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- 音乐播放器位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- preload="auto" 可以替换为 autoplay 或者 loop  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">class</span>=<span class="string">"musicPlayer"</span> <span class="attr">src</span>=<span class="string">"https://sc.111ttt.com/up/mp3/397401/2A97E1C49899C77A559BCD1E224FCBAB.mp3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 说明：使用该插件后，其脚本语言将自动为其添加以下内容：</span></span><br><span class="line"><span class="comment">        class="audiojs" classname="audiojs" id="audiojs_wrapper0"</span></span><br><span class="line"><span class="comment">        如果一个页面中存在多个audiojs播放器，其id尾数将从0逐一增加</span></span><br><span class="line"><span class="comment">        通过css修改这些属性，我们可以改变播放器的外观 --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[示例：杏花轩外雨，链接由上述1.2方式而得]</p>
<audio class="musicPlayer" src="https://sc.111ttt.com/up/mp3/397401/2A97E1C49899C77A559BCD1E224FCBAB.mp3" preload="auto"></audio>

<p>[示例html源码]</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"audiojs   playing"</span> <span class="attr">classname</span>=<span class="string">"audiojs"</span> <span class="attr">id</span>=<span class="string">"audiojs_wrapper0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">class</span>=<span class="string">"musicPlayer"</span> <span class="attr">src</span>=<span class="string">"https://sc.111ttt.com/up/mp3/397401/2A97E1C49899C77A559BCD1E224FCBAB.mp3"</span> <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"play-pause"</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"play"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pause"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scrubber"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span> <span class="attr">style</span>=<span class="string">"width: 167.146px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loaded"</span> <span class="attr">style</span>=<span class="string">"width: 280px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"played"</span>&gt;</span>02:22<span class="tag">&lt;/<span class="name">em</span>&gt;</span>/<span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"duration"</span>&gt;</span>03:57<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error-message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-其它"><a href="#2-3-其它" class="headerlink" title="2.3 其它"></a>2.3 其它</h3><ul>
<li><a href="http://www.ithome.com/html/it/195970.htm" target="_blank" rel="noopener">7 款高颜值 HTML5 播放器</a></li>
<li><a href="http://www.oschina.net/news/27466/html5-audio-players" target="_blank" rel="noopener">10 个基于 Web 的 HTML5 音乐播放器</a></li>
<li><a href="http://www.shejidaren.com/free-audio-players.html" target="_blank" rel="noopener">10 个免费开源的 JS 音乐播放器插件</a></li>
<li><a href="http://www.17sucai.com/pins/tag/3189.html" target="_blank" rel="noopener">播放器 jquery 特效代码</a></li>
</ul>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>网易云音乐的播放器插件使用方便，但是连接效率太低，经常获取不到资源或者获取速度过慢，而  audiojs  播放器虽然外观简陋些，但资源下载效率还不错，而且资源地址可以自定义，不会受限。所以，各有利弊，依情况而定吧。</p>
]]></content>
      
        <categories>
            
            <category> Media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优美的古风歌曲]]></title>
      <url>http://www.litreily.top/2016/10/27/antiquity-music/</url>
      <content type="html"><![CDATA[<h2 id="古风"><a href="#古风" class="headerlink" title="古风"></a>古风</h2><blockquote>
<p><a href="http://baike.baidu.com/subview/297/9729252.htm" target="_blank" rel="noopener">古风</a> 是一类新型的文化，是现代人对古代曲风的称呼。&quot;古风&quot; 以中国的传统文化为基调，结合中国传统的文学、琴棋书画、诗词歌赋等，经过不断的发展磨合，形成了比较完备的音乐、文学、绘画等艺术形式。</p>
</blockquote>
<h3 id="古风音乐社团"><a href="#古风音乐社团" class="headerlink" title="古风音乐社团"></a>古风音乐社团</h3><div class="tagBlack"><a href="http://www.mymmqm.com/" target="_blank" rel="noopener">墨明棋妙</a><a href="http://5sing.kugou.com/lfmmusic/default.html" target="_blank" rel="noopener">鸾凤鸣</a><a href="http://5sing.kugou.com/pingshaluoyan/default.html" target="_blank" rel="noopener">平纱落雁</a><a href="http://music.163.com/#/user/home?id=64846286" target="_blank" rel="noopener">满汉全席</a><a href="http://www.oyinyue.com/11388725" target="_blank" rel="noopener">声自在</a><a href="http://5sing.kugou.com/qianchengzuige/default.html" target="_blank" rel="noopener">千城醉歌</a><a href="http://5sing.kugou.com/liushangqushui/default.html" target="_blank" rel="noopener">流觞曲水</a><a href="http://5sing.kugou.com/5590972/default.html" target="_blank" rel="noopener">花魁楼</a><a href="http://5sing.kugou.com/qiange/default.html" target="_blank" rel="noopener">千歌未央</a><a href="http://5sing.kugou.com/27373394/default.html" target="_blank" rel="noopener">云歌落</a></div>

<hr>
<h3 id="古风音乐人"><a href="#古风音乐人" class="headerlink" title="古风音乐人"></a>古风音乐人</h3><div class="tagGrey"><a href="http://www.xiami.com/artist/68934" target="_blank" rel="noopener">河图</a><a href="http://www.xiami.com/artist/52636" target="_blank" rel="noopener">董贞</a><a href="http://www.xiami.com/artist/98637" target="_blank" rel="noopener">小曲儿</a><a href="http://www.xiami.com/artist/103550" target="_blank" rel="noopener">少司命</a><a href="http://y.baidu.com/qingnong914" target="_blank" rel="noopener">清弄</a><a href="http://bd.kuwo.cn/mingxing/%E6%BD%87%E6%A2%A6%E4%B8%B4.htm?from=baidu" target="_blank" rel="noopener">潇梦临</a><a href="http://www.xiami.com/artist/87301" target="_blank" rel="noopener">檀烧</a><a href="http://www.xiami.com/artist/65156" target="_blank" rel="noopener">心然</a><a href="http://www.xiami.com/artist/55553" target="_blank" rel="noopener">萧人凤</a><a href="http://bd.kuwo.cn/mingxing/%E5%87%8C%E4%B9%8B%E8%BD%A9.htm?from=baidu" target="_blank" rel="noopener">凌之轩</a><a href="http://i.xiami.com/huanger117" target="_blank" rel="noopener">晃儿</a><a href="http://www.xiami.com/artist/102392" target="_blank" rel="noopener">重小烟</a><a href="http://www.xiami.com/artist/80464" target="_blank" rel="noopener">音频怪物</a></div>

<hr>
<h3 id="古风网站"><a href="#古风网站" class="headerlink" title="古风网站"></a>古风网站</h3><div class="tagGrey"><a href="http://5sing.kugou.com/" target="_blank" rel="noopener">5sing</a><a href="http://xingmaow.com/" target="_blank" rel="noopener">古风杏猫网</a><a href="http://www.gufengquan.com/" target="_blank" rel="noopener">古风圈论坛</a></div>

<hr>
<h2 id="古风歌曲品鉴"><a href="#古风歌曲品鉴" class="headerlink" title="古风歌曲品鉴"></a>古风歌曲品鉴</h2><h3 id="杏花弦外雨"><a href="#杏花弦外雨" class="headerlink" title="杏花弦外雨"></a>杏花弦外雨</h3><blockquote>
<p><a href="http://baike.baidu.com/subview/10846918/19226803.htm" target="_blank" rel="noopener">杏花弦外雨</a>  是由  潇梦临  作曲及编曲，若紫鸢作词，由  <a href="http://baike.baidu.com/view/3113695.htm" target="_blank" rel="noopener">西国的海妖</a>、<a href="http://baike.baidu.com/view/8616563.htm" target="_blank" rel="noopener">CRITTY</a>  演唱的一首优质古风歌曲。收录在CRITTY的《弦上春雪》原创古风非实体专辑中。MV由尉迟嘉馨制作，展现了江南水乡的美丽风景，讲述了西厢记中一段才子佳人相思空守的故事。</p>
</blockquote>
<iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=32957012&auto=0&height=66"></iframe>

<p><div class="poem"></div></p>
<pre class="poemText">
作曲/编曲：潇梦临
作词：若紫鸢
演唱：西国的海妖、CRITTY

流莺悄飞近船侧  伴桨声低语浅说
柳梢沾绿了烟波  绕堤三分春色
旧书翻入寻常调  隔岸依稀吴越歌
反复着几回啼笑  往来几段离合
有书生翩翩风流  有佳人独坐楼阁
有一日擦肩而过  惹来两情脉脉
诗文里风月渐浓  只不见天长地久
心事落在琴弦外  又与谁轻轻说
说那年烟雨空濛  杏花船摇摆而过
过谁家楼台  一声弦歌拂落

他素白衣着  山水间几程远游
堪折何折年年柳色
当柳梢下的集句  尽数流过眼底
拈一缕春风浅浅作序
待到行间字里
再不是眼前朝夕
曲中人早已离题
当一阵阵临窗雨  洗旧那时心绪
曲中人远隔千里万里  不知不觉的停笔
留下余韵待续  就在那片烟波外淡成了迤逦

后来事不知如何  那佳人还在楼阁
独对着雨帘萧瑟  一字一句斟酌
诗文里风月残留  不经意换了角色
陈词落在琴弦外  还有谁轻轻说
说那年烟雨空濛  杏花船摇摆而过
过谁家楼台  一声弦歌落寞

她等过几番  绵绵飞絮亦白头
空折还折年年柳色
当柳梢下的集句  尽数流过眼底
拈一缕春风浅浅作序  待到行间字里
再不是眼前朝夕  曲中人早已离题
当一阵阵临窗雨  洗旧那时心绪
曲中人远隔千里万里  不知不觉的停笔
留下余韵待续  就在那片烟波外淡成了迤逦
</pre>

<p><img class="poemCover" src="/assets/music/xinghuaxianwaiyu.png" alt="杏花弦外雨"><br><br><br></p>
<h3 id="遇萤"><a href="#遇萤" class="headerlink" title="遇萤"></a>遇萤</h3><blockquote>
<p>由  YT君  制作的橙光文字游戏《逆袭之星途闪耀》的剧中剧《遇龙》的主题曲《遇萤》。  <a href="http://baike.baidu.com/item/%E9%81%87%E8%90%A4" target="_blank" rel="noopener">遇萤</a>  是<a href="http://baike.baidu.com/view/8616563.htm" target="_blank" rel="noopener">CRITTY</a> 演唱歌曲，由执素兮作曲，顾聆落作词。</p>
</blockquote>
<iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=32548265&auto=0&height=66"></iframe>

<p><div class="poem"></div></p>
<pre class="poemText">
演唱：CRITTY
    歌曲监制：我是YT
    作曲/策划/和声编写：执素兮
    作词：顾聆落
    编曲：潇梦临

    尉迟龙炎(龙王)：既然你叫流萤...
    那不如…
    不如我就赠你漫天流萤吧…

    若千年的光阴 轮回里
　　是否只为寻觅着你
　　恍若所有月明
　　圆缺或是阴晴 都只为了你
　　尘缘似一场花雨
　　眉目缱绻中枯寂
　　指间的瞬息
　　拾得你一颗泪滴
　　若忘川的涟漪 随我心
　　是否只为不忘记你
　　恍若所有思绪
　　怜惜或是悲戚 都只为了你
　　尘缘似一场烟影
　　眉目缱绻中飘零
　　心之所寄
　　劫数应声而起

　　前生今世来生
　　与你相遇 在每一个梦里
　　拂袖唤漫天流萤
　　掌心微光谁眼中倒映
　　回眸不舍离去
　　此情为你 在心上停栖
　　下一世 再与你永不分离

    尉迟龙炎(龙王)：只是从今往后，
    你都要学会自己一个人...
    勇敢走下去，即便没有我，也不要害怕…

    若忘川的涟漪 随我心
　　是否只为不忘记你
　　恍若所有思绪
　　怜惜或是悲戚 都只为了你
　　尘缘似一场流萤
　　眉目缱绻中宁静
　　照谁前行
　　灿若彻夜繁星
　　前生今世来生
　　与你相遇 在每一个梦里
　　拂袖唤漫天流萤
　　掌心微光谁眼中倒映
　　回眸不舍离去
　　此情为你 在心上停栖
　　下一世 再与你永不分离

　　前生今世来生
　　与你相遇 在每一个梦里
　　拂袖唤漫天流萤
　　掌心微光谁眼中倒映
　　回眸不舍离去
　　此情为你 在心上停栖
　　这一世 愿与你共存天地
　　这一世 愿与你共存天地
</pre>

<p><img class="poemCover" src="/assets/music/yuying.png" alt="遇萤"></p>
<p><br><br></p>
<h3 id="倾尽天下"><a href="#倾尽天下" class="headerlink" title="倾尽天下"></a>倾尽天下</h3><blockquote>
<p>倾尽天下 是音乐团队 <a href="http://baike.baidu.com/view/1204149.htm" target="_blank" rel="noopener">墨明棋妙</a> 创作的古风歌曲，由 <a href="http://baike.baidu.com/subview/649792/11273294.htm" target="_blank" rel="noopener">finale</a> 作词，<a href="http://baike.baidu.com/subview/4151/9915126.htm" target="_blank" rel="noopener">河图</a> 作曲、编曲并演唱。</p>
</blockquote>
<iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=27571867&auto=0&height=66"></iframe>

<p><div class="poem"></div></p>
<pre class="poemText">
作词：Finale
作曲/编曲/演唱：河图

刀戟声共丝竹沙哑
谁带你看城外厮杀
七重纱衣 血溅了白纱
兵临城下六军不发
谁知再见已是 生死无话
当时缠过红线千匝
一念之差作为人嫁
那道伤疤 谁的旧伤疤
还能不动声色饮茶
踏碎这一场 盛世烟花
血染江山的画
怎敌你眉间 一点朱砂
覆了天下也罢
始终不过 一场繁华
碧血染就桃花
只想再见 你泪如雨下
听刀剑喑哑
高楼奄奄一息 倾塌

是说一生命犯桃花
谁为你算的那一卦
最是无瑕风流不假
画楼西畔 反弹琵琶
暖风处处 谁心猿意马
色授魂与颠倒容华
兀自不肯相对照蜡
说爱折花 不爱青梅竹马
到头来算的那一卦
终是为你 覆了天下
明月照亮天涯
最后谁又得到了蒹葭
江山嘶鸣战马
怀抱中那寂静的喧哗
风过天地肃杀
容华谢后 君临天下
登上九重宝塔
皇妃 朱砂
皇妃 朱砂
看一夜流星飒沓
回到那一刹那
岁月无声也让人害怕
枯藤长出枝桠
原来时光已翩然轻擦
梦中楼上月下
站着眉目依旧的你啊
拂去衣上雪花
并肩看 天地浩大
回到那一刹那
岁月无声也让人害怕
枯藤长出枝桠
原来时光已翩然轻擦
梦中楼上月下
站着眉目依旧的你啊
拂去衣上雪花
并肩看 天地浩大
梦中楼上月下
站着眉目依旧的你啊
拂去衣上雪花
并肩看 天地浩大
</pre>

<p><img class="poemCover" src="/assets/music/qingjintianxia.png" alt="倾尽天下"><br><br><br></p>
<h2 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h2><iframe class="musicPlayer" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="https://music.163.com/outchain/player?type=0&id=427280392&auto=0&height=430"></iframe>
]]></content>
      
        <categories>
            
            <category> Media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下安装常用软件]]></title>
      <url>http://www.litreily.top/2016/10/12/installSW/</url>
      <content type="html"><![CDATA[<h2 id="1-apt-get-install"><a href="#1-apt-get-install" class="headerlink" title="1. apt-get install"></a>1. apt-get install</h2><h3 id="1-1-Atom"><a href="#1-1-Atom" class="headerlink" title="1.1 Atom"></a>1.1 Atom</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:webupd8team/atom</span><br><span class="line">$ sudo apt-get update  </span><br><span class="line">$ sudo apt-get install atom</span><br></pre></td></tr></table></figure>
<p><code>add-apt-repository</code>用于添加软件源，<code>apt-get update</code>用于更新软件源，更新后即可使用<code>apt-get install</code>安装所需的软件。</p>
<h3 id="1-2-Sublime-Text-3"><a href="#1-2-Sublime-Text-3" class="headerlink" title="1.2 Sublime Text 3"></a>1.2 Sublime Text 3</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:webupd8team/sublime-text-3  </span><br><span class="line">$ sudo apt-get update  </span><br><span class="line">$ sudo apt-get install sublime-text-install</span><br></pre></td></tr></table></figure>
<h2 id="2-添加快捷方式"><a href="#2-添加快捷方式" class="headerlink" title="2. 添加快捷方式"></a>2. 添加快捷方式</h2><p>在Ubuntu下，有些deb安装包，安装完成后只能通过终端启动，而且不能关闭终端，为此，我们可以给应用程序添加快捷方式。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /usr/share/applications/appName.desktop</span><br></pre></td></tr></table></figure>
<p>以eclipse为例在新添加的文件<code>eclipse.desktop</code>中添加以下内容：</p>
<pre class="textContainer">
[Desktop Entry]  
Type=application  
Name=eclipse  
Commit=Eclipse Integrated Development Environment  
Exec=/opt/eclipse/eclipse  
Icon=/opt/eclipse/icon.xpm  
Terminal=false  
StartupNotify=true  
Categories=Development;IDE;Java;
</pre>


<p>其中Exec指定应用路径，Icon指定应用图标，Categories用于分类。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> atom </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的排序算法]]></title>
      <url>http://www.litreily.top/2016/09/20/algor-sort/</url>
      <content type="html"><![CDATA[<h2 id="1-算法复杂度及稳定性"><a href="#1-算法复杂度及稳定性" class="headerlink" title="1. 算法复杂度及稳定性"></a>1. 算法复杂度及稳定性</h2><table class="normalTable"><tr><th>排序方法</th><th>最好时间</th><th>平均时间</th><th>最坏时间</th><th>辅助空间</th><th>稳定性</th></tr><tr><td>直接插入</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>二分插入</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔</td><td></td><td>O(n^1.25)</td><td></td><td>O(1)</td><td>不稳定</td></tr><tr><td>冒泡</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速</td><td>O(nlgn)</td><td>O(nlgn)</td><td>O(n^2)</td><td>O(lgn)</td><td>不稳定</td></tr><tr><td>直接选择</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>堆</td><td>O(nlgn)</td><td>O(nlgn)</td><td>O(nlgn)</td><td></td><td>不稳定</td></tr><tr><td>归并</td><td>O(nlgn)</td><td>O(nlgn)</td><td>O(nlgn)</td><td>O(n)</td><td>稳定</td></tr><tr><td>基数</td><td>O(d(rd+n))</td><td>O(d(rd+n))</td><td>O(d(rd+n))</td><td>O(rd+n)</td><td>稳定</td></tr></table>

<h2 id="2-算法实现"><a href="#2-算法实现" class="headerlink" title="2. 算法实现"></a>2. 算法实现</h2><h3 id="2-1-直接插入"><a href="#2-1-直接插入" class="headerlink" title="2.1 直接插入"></a>2.1 直接插入</h3><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a><strong>算法步骤</strong></h4><ol>
<li>将序列的第一个元素作为<strong>有序序列</strong>，第二个元素直至最后一个元素作为<strong>待排序序列</strong>;</li>
<li>从前往后依次扫描<strong>待排序序列</strong>，将扫描的元素依次插入到<strong>有序序列</strong>的适当位置。</li>
</ol>
<h4 id="原理示意"><a href="#原理示意" class="headerlink" title="原理示意"></a><strong>原理示意</strong></h4><p><img src="/assets/algorithm/insertSort.gif" alt="insertSort"></p>
<h4 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertsort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> index, temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;length; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 保存 array[i] 至中间变量</span></span><br><span class="line">    temp = <span class="built_in">array</span>[i];</span><br><span class="line">    index = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找插入位置, index = 1,2,...,i</span></span><br><span class="line">    <span class="keyword">while</span> (index&gt;<span class="number">0</span> &amp;&amp; temp&lt;<span class="built_in">array</span>[index - <span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">array</span>[index] = <span class="built_in">array</span>[index - <span class="number">1</span>];</span><br><span class="line">      index--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    <span class="built_in">array</span>[index] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123; <span class="number">23</span>,<span class="number">34</span>,<span class="number">22</span>,<span class="number">67</span>,<span class="number">87</span>,<span class="number">56</span>,<span class="number">15</span>,<span class="number">62</span>,<span class="number">74</span>,<span class="number">46</span> &#125;;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">  insertsort(<span class="built_in">array</span>, length);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-二分查找插入"><a href="#2-2-二分查找插入" class="headerlink" title="2.2 二分查找插入"></a>2.2 二分查找插入</h3><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><strong>算法思想</strong></h4><p>二分查找插入是在直接插入的基础上进行优化，由于在插入前需要查找插入位置，而插入位置处于<strong>有序</strong>序列中，所以可以使用<strong>二分查找</strong>替代原先的逐个扫描，提高查找效率。</p>
<h4 id="程序实现-1"><a href="#程序实现-1" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binaryInsertsort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> index, temp, left, right, middle;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    temp = <span class="built_in">array</span>[i];      <span class="comment">// 将本次待插入数据存入temp</span></span><br><span class="line">    left = <span class="number">0</span>;</span><br><span class="line">    right = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt;= <span class="built_in">array</span>[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 二分查找</span></span><br><span class="line">      <span class="keyword">while</span> (left&lt;=right)</span><br><span class="line">      &#123;</span><br><span class="line">        middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="built_in">array</span>[middle])</span><br><span class="line">          right = middle - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          left = middle + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动数据，left即为查找到的插入位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= left; j--)</span><br><span class="line">      <span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">array</span>[j];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">array</span>[left] = temp;      <span class="comment">// 插入temp到指定位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-希尔排序"><a href="#2-3-希尔排序" class="headerlink" title="2.3 希尔排序"></a>2.3 希尔排序</h3><p>持续更新中…</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端岗位模拟试题2]]></title>
      <url>http://www.litreily.top/2016/09/12/algor-WYMN2/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>二货小易有一个W*H的网格盒子，网格的行编号为0~H-1，网格的列编号为0~W-1。每个格子至多可以放一块蛋糕，任意两块蛋糕的欧几里得距离不能等于2。</p>
<p>对于两个格子坐标(x1,y1),(x2,y2)的欧几里得距离为：((x1-x2)<em>(x1-x2)+(y1-y2)</em>(y1-y2))的算术平方根。</p>
<p>小易想知道最多可以放多少块蛋糕在网格盒子里。</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><blockquote>
<p>每组数组包含网格长宽W,H，用空格分隔。(1&lt;=W、H&lt;=1000)</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><blockquote>
<p>输出一个最多可以放的蛋糕数</p>
</blockquote>
<h3 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子"></a>输入例子</h3><blockquote>
<p>3 2</p>
</blockquote>
<h3 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h3><blockquote>
<p>4</p>
</blockquote>
<h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>根据题意，可以推测出蛋糕数最多的放置方案：将网格进行分区，每四个构成一个正方形的网格作为一个分区，类似于坐标变换。假设原坐标为(x,y),那么变换后的分区坐标为(x/2,y/2)。当变换后的分区坐标满足横纵坐标之和为偶数时，该分区内的4个网格均可放置蛋糕。</p>
<p><img src="/assets/algorithm/putCake.png" alt="putCake"></p>
<h2 id="解题程序"><a href="#解题程序" class="headerlink" title="解题程序"></a>解题程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> W,H;</span><br><span class="line">  <span class="keyword">int</span> cnt=<span class="number">0</span>;                   <span class="comment">// 定义可放的蛋糕数</span></span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;W&gt;&gt;H;                <span class="comment">// 输入盒子网格的行列数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;H;i++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;W;j++)</span><br><span class="line">      	<span class="keyword">if</span>((i/<span class="number">2</span>+j/<span class="number">2</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">          cnt++;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端岗位模拟试题1]]></title>
      <url>http://www.litreily.top/2016/09/12/algor-WYMN1/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>正整数A的&quot;DA(1位整数)部分&quot;定义为由A中所有组成的新整数PA。例如：给定A=3862767，DA=6，则A的&quot;6部分&quot;PA是66，因为A中有2个6。</p>
<p>现给定A、DA、B、DB，请编写程序计算PA+PB。</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><blockquote>
<p>输入在一行中依次给出A，DA，B,DB，中间以空格分隔，其中 0&lt; A,B &lt;1e10</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><blockquote>
<p>在一行中输出PA+PB的值</p>
</blockquote>
<h3 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子"></a>输入例子</h3><blockquote>
<p>3862767 6 13530293 3</p>
</blockquote>
<h3 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h3><blockquote>
<p>399</p>
</blockquote>
<h2 id="解题程序"><a href="#解题程序" class="headerlink" title="解题程序"></a>解题程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPA</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> num, <span class="keyword">int</span> DA, <span class="keyword">unsigned</span> <span class="keyword">long</span> &amp; PA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)           <span class="comment">// 循环查找num中DA的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(num%<span class="number">10</span>==DA)</span><br><span class="line">        PA = PA*<span class="number">10</span>+DA;</span><br><span class="line">      num/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> A,B;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> PA=<span class="number">0</span>,PB=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> DA,DB;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A&gt;&gt;DA&gt;&gt;B&gt;&gt;DB;</span><br><span class="line">    getPA(A,DA,PA);      <span class="comment">// 计算PA</span></span><br><span class="line">    getPA(B,DB,PB);      <span class="comment">// 计算PB</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;PA+PB&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决atom无法安装插件的问题]]></title>
      <url>http://www.litreily.top/2016/08/21/atom-packages/</url>
      <content type="html"><![CDATA[<h2 id="1-出错信息"><a href="#1-出错信息" class="headerlink" title="1. 出错信息"></a>1. 出错信息</h2><p>倘若使用<a href="https://atom.io/" target="_blank" rel="noopener">atom</a>自带的插件安装工具&quot;File-&gt;Settings-&gt;Install&quot;安装插件，通常会报错，以&quot;pp-markdown&quot;为例，其错误信息如下：</p>
<pre>
  gyp info it worked if it ends with ok
  gyp info using node-gyp@2.0.2
  gyp info using node@0.10.40 | win32 | ia32
  gyp http GET http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist/v0.37.8/node-v0.37.8.tar.gz
  gyp WARN install got an error, rolling back install
  gyp

  ! Compiler tools not found
  Packages that depend on modules that contain C/C++ code will fail to install.
  Read <a href="http://flight-manual.atom.io/" target="_blank" rel="noopener">here</a> for instructions on installing Python and Visual Studio.
  Run apm install --check after installing to test compiling a native module.
</pre>

<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-安装node-js"><a href="#2-1-安装node-js" class="headerlink" title="2.1 安装node.js"></a>2.1 安装node.js</h3><p>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>的目的在于使用npm工具，放弃apm工具。如果已经安装好，那么这一步自然可以略过。</p>
<h3 id="2-2-下载插件"><a href="#2-2-下载插件" class="headerlink" title="2.2 下载插件"></a>2.2 下载插件</h3><p>在atom的插件安装界面搜索所需的插件，点击插件名称将会从网页打开atom的插件库。</p>
<p><img src="/assets/atom/package.png" alt="atompackage"></p>
<p>此时我们点击<code>Repo</code>可以转至其github页面，复制插件的远程仓库目录。</p>
<p><img src="/assets/atom/package_git.png" alt="gitpackage"></p>
<p>在本地打开文件夹&quot;C:\Users\USER_NAME\.atom\packages&quot;，使用git指令将插件<code>clone</code>到该目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 插件的远程仓库目录</span><br></pre></td></tr></table></figure>
<h3 id="2-3-安装插件"><a href="#2-3-安装插件" class="headerlink" title="2.3 安装插件"></a>2.3 安装插件</h3><p>转至插件目录，使用<code>npm install</code>完成插件安装，重启atom即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> pp-markdown</span><br><span class="line">$ npm install</span><br><span class="line">marked@0.3.6 node_modules\marked</span><br><span class="line"></span><br><span class="line">atom-space-pen-views@2.2.0 node_modules\atom-space-pen-views</span><br><span class="line">├── fuzzaldrin@2.1.0</span><br><span class="line">└── space-pen@5.1.2 (underscore-plus@1.6.6, jquery@2.1.4, grim@1.5.0)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-效果预览"><a href="#2-4-效果预览" class="headerlink" title="2.4 效果预览"></a>2.4 效果预览</h3><p><img src="/assets/atom/pp-markdown.png" alt="pp-markdown"></p>
<p>该方案看似有点繁琐，却也能够达到目的，毕竟我们需要安装的插件并不会太多，它日有更好的方法再用不迟。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消除utorrent中的广告]]></title>
      <url>http://www.litreily.top/2016/08/17/clearAD/</url>
      <content type="html"><![CDATA[<p>其实，网上已有大把的教程教我如何去广告，但每次都要谷歌百度却也烦不胜烦，这也就只好搬运到这咯，一劳永逸。</p>
<h2 id="去广告前"><a href="#去广告前" class="headerlink" title="去广告前"></a>去广告前</h2><p><img src="/assets/utorrent/haveAD.png" alt="haveAD"></p>
<h2 id="去广告"><a href="#去广告" class="headerlink" title="去广告"></a>去广告</h2><ol>
<li>在utorrent的菜单栏中选择&quot;选项&quot;，打开“设置”界面，或者按快捷键<code>ctrl+p</code>;</li>
<li>在设置界面中选择最后一项&quot;高级&quot;;</li>
<li>在过滤中输入&quot;offers.&quot;，将以下两项设为false：<ul>
<li>&quot;offers.sponsored_torrent_offer_enabled&quot; ,</li>
<li>&quot;offers.left_rail_offer_enabled&quot;</li>
</ul>
</li>
<li>在过滤中输入&quot;gui.&quot;,将&quot;gui.show_notorrents_node&quot;设为false.</li>
</ol>
<p><img src="/assets/utorrent/settingPanel.png" alt="haveAD"></p>
<h2 id="去广告后"><a href="#去广告后" class="headerlink" title="去广告后"></a>去广告后</h2><p><img src="/assets/utorrent/noAD.png" alt="haveAD"></p>
<p>好了，至此广告一扫全无，enjoy it！</p>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> utorrent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 存储txt文件]]></title>
      <url>http://www.litreily.top/2016/06/10/labview-rwTxt/</url>
      <content type="html"><![CDATA[<h2 id="1-存储文件"><a href="#1-存储文件" class="headerlink" title="1. 存储文件"></a>1. 存储文件</h2><h3 id="1-1-简单存储"><a href="#1-1-简单存储" class="headerlink" title="1.1 简单存储"></a>1.1 简单存储</h3><p>写个简单的小程序，用于存储四列随机数，每隔1s存储一次，数据之间以tab作为分隔符。</p>
<p><img src="/assets/labview/rwTxt/readTxt.png" alt="readTxt"></p>
<p>存储后的文件:</p>
<p><img src="/assets/labview/rwTxt/testTxt.png" alt="testTxt"></p>
<h3 id="1-2-加入表头"><a href="#1-2-加入表头" class="headerlink" title="1.2 加入表头"></a>1.2 加入表头</h3><p>看着上面这个文件，总感觉少点什么，对了，表头还没加。那就加个判断，首次创建文件时添个表头。为了简化点，定时结构就不截图了。</p>
<p><img src="/assets/labview/rwTxt/addTitle.png" alt="addTitle"></p>
<p>现在再来看看这个txt文件，表头已经被加上了，虽然看着没怎么对齐，但这是正常的，如果导入至Excel就可以看出来。</p>
<p><img src="/assets/labview/rwTxt/testTitle.png" alt="testTitle"></p>
<h3 id="1-3-存储时间"><a href="#1-3-存储时间" class="headerlink" title="1.3 存储时间"></a>1.3 存储时间</h3><p>大部分情况下，我们在存储数据的同时需要记录存储时间，那么就再稍稍修改一下程序。</p>
<p><img src="/assets/labview/rwTxt/addTime.png" alt="addTime"></p>
<p>添加的东西也不多，就是多了个表头，每组数据前多了个时间标识，需要说明一点的是，这里用到的&quot;格式化日期/时间字符串&quot;，它的格式化方法可以参考以下说明。</p>
<p><img src="/assets/labview/rwTxt/timeStrHelp.png" alt="timeStrHelp"></p>
<blockquote>
<p> 下列代码为部分常用的时间格式代码：%c可显示依据地域语言设定的日期/时间。<br><br><strong>时间</strong>相关格式代码为：%X（指定地域的时间），%H（小时，24小时），%I（小时，12小时），%M（分钟），%S（秒），%<digit>u（分数秒，精度<digit>），%p（a.m./p.m.标识）。<br><strong>日期</strong>相关格式代码为：%x（指定地域日期），%y（两位年份），%Y（四位年份），%m（月份），%b（月名缩写），%d（一个月中的天值），%a（星期名缩写）。</digit></digit></p>
</blockquote>
<p>好了，改好了就测试一下，看看时间已经被加上了。</p>
<p><img src="/assets/labview/rwTxt/testTime.png" alt="testTime"></p>
<h3 id="1-4-有趣实例"><a href="#1-4-有趣实例" class="headerlink" title="1.4 有趣实例"></a>1.4 有趣实例</h3><p>好了，现在来写个有趣的小程序，定时存储一组数据至txt文件，包含人的姓名、性别、年龄、身高和名族。具体要求如下表所示。</p>
<table class="normalTable"><th></th><td>姓名</td><td>性别</td><td>年龄</td><td>身高(m)</td><td>汉族</td><tr><td>数据类型</td><td>字符串</td><td>字符串</td><td>Byte</td><td>Double</td><td>布尔</td></tr><tr><td>要求</td><td>随机</td><td>男/女</td><td>12~40</td><td>1.40~1.80</td><td>T/F</td></tr></table>

<p>程序框图如下：</p>
<p><img src="/assets/labview/rwTxt/randomWrite.png" alt="randomWrite"></p>
<p>好了，现在运行程序，看看会有哪些有趣的名字呢。</p>
<p><img src="/assets/labview/rwTxt/randomTxt.png" alt="randomTxt"></p>
<p>关于.txt文件存储就讲这些吧。以后若是有其它运用方式，遇到了再写不迟。</p>
<h2 id="2-下载链接"><a href="#2-下载链接" class="headerlink" title="2. 下载链接"></a>2. 下载链接</h2><p>文中提到的两个vi文件已共享至百度网盘，以供<a href="http://pan.baidu.com/s/1kU7mveZ" target="_blank">下载！</a></p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 常用快捷键]]></title>
      <url>http://www.litreily.top/2016/06/06/shrotcuts/</url>
      <content type="html"><![CDATA[<p>作为一款功能强大的编程软件，自然少不了大量的快捷键支持。在开发过程中，熟练使用这些快捷键，可以高效完成编码调试过程，减少手动操作，提高工作效率。</p>
<h2 id="1-菜单快捷键"><a href="#1-菜单快捷键" class="headerlink" title="1. 菜单快捷键"></a>1. 菜单快捷键</h2><p>打开LabVIEW中的&quot;选项&quot;界面，在&quot;菜单快捷键&quot;中可以看到所有可用的快捷键。当然，如果觉得不够用或是与其它软件有冲突，可以手动添加或修改新的快捷键。</p>
<p><img src="/assets/labview/shortcuts/editPanel.png" alt="Labview editPanel"></p>
<h2 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2. 常用快捷键"></a>2. 常用快捷键</h2><p>快捷键虽多，但常用的却有限。我简单将其分为通用键、功能键和技巧键。</p>
<h3 id="2-1-通用键"><a href="#2-1-通用键" class="headerlink" title="2.1 通用键"></a>2.1 通用键</h3><p>有些快捷键是大部分软件共有的，其功能也类似。</p>
<ul>
<li>Ctrl+N：新建</li>
<li>Ctrl+A：全选</li>
<li>Ctrl+C：复制</li>
<li>Ctrl+V：粘贴</li>
<li>Ctrl+S：保存</li>
<li>Ctrl+Shift+S：保存全部</li>
</ul>
<h3 id="2-2-功能键"><a href="#2-2-功能键" class="headerlink" title="2.2 功能键"></a>2.2 功能键</h3><p>在代码编辑过程中经常会用到的功能性快捷键包括：</p>
<ul>
<li>Ctrl+R：运行程序</li>
<li>Ctrl+E：在前面板和程序框图之间切换</li>
<li>Ctrl+H：打开/关闭即时帮助</li>
<li>Ctrl+B：删除断线</li>
<li>Ctrl+I：查看当前VI属性</li>
<li>Ctrl+T：左右两栏显示前面板和程序框图</li>
<li>Ctrl+W：关闭当前界面或项目</li>
<li>Ctrl+Q：退出LabVIEW</li>
</ul>
<h3 id="2-3-技巧键"><a href="#2-3-技巧键" class="headerlink" title="2.3 技巧键"></a>2.3 技巧键</h3><ul>
<li>Ctrl+鼠标拖动：复制被选控件或函数</li>
<li>Ctrl+鼠标滚轮：切换多层结构的当前结构帧</li>
<li>Shift+控件：将鼠标改为选择指针，用于选中某个或多个控件</li>
<li>双击鼠标左键：添加注释</li>
<li>Ctrl+Shift+鼠标拖动：将鼠标改为手形指针，用于拖动程序框图</li>
</ul>
<h3 id="2-4-其它"><a href="#2-4-其它" class="headerlink" title="2.4 其它"></a>2.4 其它</h3><p>如果一个函数仅包含两个输入接口时，例如：加、减、乘、除。当我们要切换两个输入接口的连线时，例如减法的两个输入A和B，开始连接的时候是A-B，现在发现不对，要改成B-A。默认我们会去删除两条线然后重新连接，但使用快捷键<code>Ctrl+Click</code>可以直接完成切换。<br><img src="/assets/labview/shortcuts/exchange.gif" alt="Labview exchange"></p>
<p><strong>使用方法：</strong>在点击Ctrl后移动鼠标至函数的任一输入端，鼠标指针会变为类似数字8的一个图标，此时点击鼠标左键即可完成切换。</p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 对话框程序模板]]></title>
      <url>http://www.litreily.top/2016/06/06/labview-dialog/</url>
      <content type="html"><![CDATA[<p>软件开发过程中，经常要使用对话框界面，例如各种参数设置界面等。为了减少重复性工作，我们可以创建一个对话框模板，往后就可以通过该模板直接新建对话框界面。</p>
<h2 id="1-创建模板"><a href="#1-创建模板" class="headerlink" title="1. 创建模板"></a>1. 创建模板</h2><h3 id="1-1-新建vi"><a href="#1-1-新建vi" class="headerlink" title="1.1 新建vi"></a>1.1 新建vi</h3><p>打开LabVIEW软件，新建vi，保存为&quot;对话框模板.vi&quot;。</p>
<p><img src="/assets/labview/dialog/template.png" alt="Labview template.vi"></p>
<h3 id="1-2-添加while循环"><a href="#1-2-添加while循环" class="headerlink" title="1.2 添加while循环"></a>1.2 添加while循环</h3><p>对话框界面也属于用户界面，所以需要给它单独开辟一个线程，即一个while循环。</p>
<p><img src="/assets/labview/dialog/while.png" alt="Labview while"></p>
<h3 id="1-3-添加移位寄存器"><a href="#1-3-添加移位寄存器" class="headerlink" title="1.3 添加移位寄存器"></a>1.3 添加移位寄存器</h3><p>在while循环左上角添加一个移位寄存器，然后创建一个<strong>枚举常量</strong>，给其添加以下内容：</p>
<ul>
<li>init：初始化</li>
<li>run：运行</li>
<li>exit：退出</li>
</ul>
<p>编辑完成后点击确定，然后将其连接至移位寄存器的输入端，默认设为&quot;init&quot;。</p>
<p><img src="/assets/labview/dialog/enum.png" alt="Labview enum"></p>
<h3 id="1-4-添加条件结构"><a href="#1-4-添加条件结构" class="headerlink" title="1.4 添加条件结构"></a>1.4 添加条件结构</h3><p>在while循环中添加一个条件结构，将将移位寄存器的值作为判断条件。为条件结构的每个值添加分支。</p>
<p><img src="/assets/labview/dialog/switch.png" alt="Labview switch"></p>
<h3 id="1-5-添加事件结构"><a href="#1-5-添加事件结构" class="headerlink" title="1.5 添加事件结构"></a>1.5 添加事件结构</h3><p>在条件结构的&quot;run&quot;分支中添加事件结构，用于响应用户操作。至此，所需的三个主要控制结构就都有了。</p>
<p><img src="/assets/labview/dialog/event.png" alt="Labview event"></p>
<h3 id="1-6-修改init分支"><a href="#1-6-修改init分支" class="headerlink" title="1.6 修改init分支"></a>1.6 修改init分支</h3><p>在条件结构的&quot;init&quot;（初始化）分支中，用户可以添加对话框的<strong>初始化</strong>程序。该分支只执行一次，接着进入&quot;run&quot;（主程序运行）分支，所以需要将移位寄存器的值设为&quot;run&quot;。</p>
<p><img src="/assets/labview/dialog/init.png" alt="Labview init"></p>
<h3 id="1-7-添加前面板关闭事件"><a href="#1-7-添加前面板关闭事件" class="headerlink" title="1.7 添加前面板关闭事件"></a>1.7 添加前面板关闭事件</h3><p>给事件结构添加&quot;前面板关闭？&quot;事件分支，然后将&quot;放弃？&quot;设为真，不让前面板在此刻关闭。同时将移位寄存器的值设为&quot;exit&quot;。</p>
<p><img src="/assets/labview/dialog/closeFront.png" alt="Labview closeFront"></p>
<p><img src="/assets/labview/dialog/exit.png" alt="Labview exit"></p>
<h3 id="1-8-添加循环停止条件"><a href="#1-8-添加循环停止条件" class="headerlink" title="1.8 添加循环停止条件"></a>1.8 添加循环停止条件</h3><p>所有的while循环都需要一个停止条件，这里的while循环同样也需要，其停止条件便是移位寄存器的值变为&quot;exit&quot;。</p>
<p><img src="/assets/labview/dialog/exitRule.png" alt="Labview exitRule"></p>
<h3 id="1-9-完善移位寄存器"><a href="#1-9-完善移位寄存器" class="headerlink" title="1.9 完善移位寄存器"></a>1.9 完善移位寄存器</h3><p>现在看看程序，是不是还无法执行，因为移位寄存器的部分连线没有赋值，现在简要演示一下完善过程。</p>
<p><img src="/assets/labview/dialog/register.gif" alt="Labview register"></p>
<h3 id="1-10-添加界面关闭程序"><a href="#1-10-添加界面关闭程序" class="headerlink" title="1.10 添加界面关闭程序"></a>1.10 添加界面关闭程序</h3><p>从上面可以看出，在关闭前面板时，我们选择了放弃，然后进入&quot;exit&quot;分支，就是为了在这个分支中处理界面关闭前的任务，例如存储数据，保存界面参数等操作。不过这样一来，我们就需要在while循环结束时关闭界面，此处可以使用属性节点。</p>
<p><img src="/assets/labview/dialog/exitPanel.png" alt="Labview exitPanel"></p>
<h2 id="2-设置vi属性"><a href="#2-设置vi属性" class="headerlink" title="2. 设置vi属性"></a>2. 设置vi属性</h2><p>以上操作完成了对话框界面的程序框图设计，但此时运行该对话框，它还包含了系统自带的菜单栏和工具栏，而这些都是对话框不需要的。</p>
<p><img src="/assets/labview/dialog/dialog_1.png" alt="Labview dialog"></p>
<p>此时，我们可以通过快捷键<code>Ctrl+I</code>打开<strong>VI属性</strong>界面，在类别中选择<strong>窗口外观</strong>，最后选择<strong>对话框</strong>，点击确定。</p>
<p><img src="/assets/labview/dialog/dialog_view.png" alt="Labview VI Properties"></p>
<p>到此为止，一个简单的对话框界面模板就完成了，往后使用时，就可以通过&quot;复制该模板&rarr;重命名vi文件&rarr;添砖加瓦&quot;得到新的对话框。</p>
<p><img src="/assets/labview/dialog/dialog_2.png" alt="Labview dialog"></p>
<p>该模板比较简单，但是非常实用，大多数设置界面都可以使用该模板进行设计。当然也可以进一步完善。例如，很多设置界面都有<strong>应用</strong>按钮和<strong>退出</strong>按钮，那么，我们可以在模板中添加一个应用按钮和一个退出按钮，并添加对应的按钮点击事件，修改移位寄存器的值。</p>
<h2 id="3-下载模板"><a href="#3-下载模板" class="headerlink" title="3. 下载模板"></a>3. 下载模板</h2><p>我将模板存至网盘便于下载：<a href="http://pan.baidu.com/s/1pKUe7Ib" target="_blank">下载链接！</a></p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 基本概念]]></title>
      <url>http://www.litreily.top/2016/06/05/labview-base/</url>
      <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>《百度百科》词条&quot;LabVIEW&quot;中提到：</p>
<blockquote>
<p><strong>LabVIEW</strong>（Laboratory Virtual Instrument Engineering Workbench）由美国国家仪器（NI）公司研制开发，是一种用图标代替文本行创建应用程序的图形化编程语言，它广泛地被工业界、学术界和研究实验室所接受，视为一个标准的数据采集和仪器控制软件。与<strong>C</strong>和<strong>BASIC</strong>一样，LabVIEW也是通用的编程系统，有一个完成任何编程任务的庞大函数库。采用数据流编程方式，程序框图中节点之间的数据流向决定了VI及函数的执行顺序。</p>
</blockquote>
<p><img src="/assets/labview/keyWords/Labview.png" alt="Labview"></p>
<h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h2><p>在使用LabVIEW进行软件开发的过程中，少不了提及一些专有名词和概念，这里对常用的几个概念进行简要说明。</p>
<h3 id="2-1-VI"><a href="#2-1-VI" class="headerlink" title="2.1 VI"></a>2.1 VI</h3><p><strong>VI</strong> 是虚拟仪器（Virtual Instrument）的简称，其对应的 <strong>.vi</strong> 文件是LabVIEW软件开发过程中用到的基本单元，类似于 <strong>C/C++</strong> 语言开发的 <strong>.c/.cpp</strong> 文件。无论是用于显示的用户界面，还是不用于显示的函数，都是以 <strong>.vi</strong> 文件形式存在。</p>
<h3 id="2-2-项目"><a href="#2-2-项目" class="headerlink" title="2.2 项目"></a>2.2 项目</h3><p>相对于独立的vi文件，LabVIEW<strong>项目</strong>则是一个大的容器，它可以包含一个或多个 <strong>.vi</strong> 文件，以及其它类型的依赖文件，如 <strong>.dll</strong> 链接库文件、<strong>.rhm</strong> 菜单文件、<strong>.lvproj</strong> 工程文件、<strong>.lib</strong> 函数库文件、<strong>.ctl</strong> 自定义控件文件等。当然，一个项目还可以包含<strong>.txt</strong> 等数据文件。独立的 <strong>vi</strong> 可以单独执行，但如果需要打包成 <strong>.exe</strong> 可执行文件或 <strong>.setup</strong> 安装包文件，就必须创建<strong>项目</strong>文件，通过 &quot;程序设计规范&quot; 对项目文件进行打包处理。</p>
<p><img src="/assets/labview/keyWords/project.png" alt="Labview project"></p>
<h3 id="2-3-前面板"><a href="#2-3-前面板" class="headerlink" title="2.3 前面板"></a>2.3 前面板</h3><p>在LabVIEW开发环境中，vi程序分<strong>前面板</strong>和<strong>程序框图</strong>两部分。其中，<strong>前面板</strong>用于设计用户界面，可以放置各种程序控件，是软件用户能够看见的交互界面。如果作为函数vi，其<strong>前面板</strong>还可以设置函数接口。软件完成并生成可执行文件后，软件用户界面显示的就是该界面所对应vi程序的<strong>前面板</strong>，而其它仅实现某种函数功能而无需显示的vi程序，其<strong>前面板</strong>将不会在调用过程中显示。</p>
<p><img src="/assets/labview/keyWords/frontPanel.png" alt="Labview frontPanel"></p>
<h3 id="2-4-程序框图"><a href="#2-4-程序框图" class="headerlink" title="2.4 程序框图"></a>2.4 程序框图</h3><p><strong>程序框图</strong>作为vi程序的另一部分，用于实现软件功能。从前面板获取用户数据，在<strong>程序框图</strong>中进行逻辑运算，并将运算结果返回前面板或存储至本地文件。在框图中，开发人员可以通过各种控制结构（顺序、循环、条件、事件、定时等）控制程序的执行顺序，通过调用LabVIEW内置函数库中的大量函数实现软件功能。</p>
<p><img src="/assets/labview/keyWords/flowChart.png" alt="Labview flowChart"></p>
<h3 id="2-5-局部变量"><a href="#2-5-局部变量" class="headerlink" title="2.5 局部变量"></a>2.5 局部变量</h3><p>与其它编程语言一样，LabVIEW也有<strong>局部变量</strong>和<strong>全局变量</strong>。<strong>局部变量</strong>作用域为本vi程序，只能在本vi中调用。本vi启动时，系统为其分配内存空间；当本vi结束运行后，系统释放其内存。</p>
<h3 id="2-6-全局变量"><a href="#2-6-全局变量" class="headerlink" title="2.6 全局变量"></a>2.6 全局变量</h3><p>对于一个多vi的项目而言，如果某个或某些变量需要被两个或多个vi调用时，可以考虑使用<strong>全局变量</strong>。该变量作用域为项目中的所有vi程序，软件启动时，系统为其分配内存空间；软件关闭后，系统释放其内存。</p>
<p>根据我的编程经验，可以依据以下几种情况考虑是否使用全局变量：</p>
<ul>
<li>某变量仅被一个vi调用，无需设定全局变量；</li>
<li>某变量仅被两个vi调用，而且不会频繁更新，可以通过函数接口传递参数，无需设定全局变量；</li>
<li>某变量被3个或3个以上vi调用，且vi之间没有函数接口，可以考虑使用全局变量；</li>
<li>某变量被两个或两个以上的<strong>用户界面</strong>调用，多个界面可能并行执行，必须使用全局变量。</li>
</ul>
<p><strong>注意</strong>：全局变量也是以vi形式存在，但是它只有前面板，没有程序框图。此外，多个全局变量可以放置在同一个vi中，我们也推荐这么做，这样可以减少全局vi的个数。如果项目文件较小，全局变量个数较少，完全可以只用一个vi文件存储所有的全局变量；如果项目比较庞大，所需的全局变量较多，可以适当增加全局vi文件个数，但也应该将全局变量归类，相同或相似功能的变量应放在一个vi中。</p>
<h3 id="2-7-属性节点"><a href="#2-7-属性节点" class="headerlink" title="2.7 属性节点"></a>2.7 属性节点</h3><p>学习LabVIEW软件开发，<strong>属性节点</strong>也是必须掌握的一个内容。这个词可以分为&quot;属性&quot;和&quot;节点&quot;两部分，对应前面板的所有控件，即使是修饰性控件也有其属性。以数值输入控件为例，其属性配置界面如下图所示：</p>
<p><img src="/assets/labview/keyWords/properties.png" alt="Labview properties"></p>
<p>开发人员可以在属性配置界面配置控件的默认属性，该操作适用于无需再次更改的属性。每个控件都有其可修改的属性列表，开发人员可以选择控件本身或其接线端，通过 &quot;右键&rarr;创建&rarr;属性节点&rarr;属性&quot; 创建或查看该控件的属性项。</p>
<p><img src="/assets/labview/keyWords/node.png" alt="Labview node"></p>
<p>除属性节点外，LabVIEW中还有大量的&quot;节点&quot;，如&quot;表达式节点&quot;、&quot;公式节点&quot;、&quot;反馈节点&quot;、&quot;调用节点&quot;等。对&quot;属性节点&quot;而言，可以举个简单的例子，以人为例，每个人都可以看做一个节点，人包含&quot;姓名&quot;、&quot;身高&quot;、&quot;体重&quot;、&quot;性别&quot;、&quot;年龄&quot;等属性，那么属性节点就可以理解为包含多个属性的人。读写&quot;属性节点&quot;就是对该节点的某项属性进行读写操作。</p>
<h3 id="2-8-接线端"><a href="#2-8-接线端" class="headerlink" title="2.8 接线端"></a>2.8 接线端</h3><p>对于前面板上的一个控件而言，它在前面板仅出现一次，但在程序框图中可以多种方式出现，包括<strong>接线端</strong>、<strong>引用</strong>、<strong>局部变量</strong>和<strong>属性节点</strong>，但每个控件的<strong>接线端</strong>有且只有一个，其它方式则可以多次出现或不出现。<strong>接线端</strong>与我们所说的采集卡的接线端是一个道理，它是程序框图与前面板之间传递参数的桥梁。当我们删除前面板中的某个控件时，其程序框图中的接线端也会随之删除，反之亦然。</p>
<p><img src="/assets/labview/keyWords/port.png" alt="Labview port"></p>
<h3 id="2-9-引用"><a href="#2-9-引用" class="headerlink" title="2.9 引用"></a>2.9 引用</h3><p>上面提到的<strong>引用</strong>也是非常常用的一个功能，它相当于C/C++中的<strong>指针</strong>，通过它可以获取控件的识别标识、修改控件属性等。最重要的一点：当我们把控件A的引用作为函数参数传递至某个函数后，被调函数对该引用的操作直接作用在控件A上，而不再需要回调参数或全局变量的参与，这是非常重要和实用的功能。</p>
<h3 id="2-10-标签-amp-标题"><a href="#2-10-标签-amp-标题" class="headerlink" title="2.10 标签&amp;标题"></a>2.10 标签&amp;标题</h3><p>在前面板中，每个控件都有对应的<strong>标签</strong>和<strong>标题</strong>，两者是有区别的。默认显示的是标签，而且标签和标题的默认值是一样的。在程序框图中，只能显示控件的标签，无法显示其标题。Ctrl+H打开控件的说明信息，其显示的既有标题信息，又有标签信息。通常，标签名称较短，用于程序框图使用；标题可以稍长些，在前面板显示标题可以详细描述控件功能，同时放在帮助信息中方便用户查询。</p>
<p><img src="/assets/labview/keyWords/tag&amp;title.png" alt="Labview tag&amp;title"></p>
<p>不同控件的标签和标题都可以相同，但不建议这样做，标签通常是唯一的，唯一指定某一个控件，类似于人的学号。对标题的要求则宽松些，可同可不同。</p>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>这里讲述了LabVIEW常用的一些基本概念，其它未提及的常用概念较为简单，或是仅对某些特定控件有意义，这就不多说了。</p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.bat批处理文件的妙用]]></title>
      <url>http://www.litreily.top/2016/06/04/bat-files/</url>
      <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>近日学习web前端开发，又重新安装了Sublime Text 3，但用的不是很熟练，想要打开终端输个指令还是得用cmd。但每次都得切换路径甚是麻烦，于是想找个简单的方法。网上寻寻觅觅，觉得.bat批处理文件值得一试。</p>
<h2 id="2-bat文件"><a href="#2-bat文件" class="headerlink" title="2. bat文件"></a>2. bat文件</h2><ul>
<li>新建.bat文件</li>
<li>编辑文件内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\WorkSpace\Html CSS\LITR.coding.net</span><br><span class="line">jekyll serve watch</span><br></pre></td></tr></table></figure>
<ul>
<li>保存后运行</li>
</ul>
<p><img src="/assets/windows/startJekyll.bat.png" alt="run startJekyll.bat"></p>
<p>双击运行.bat文件，这样一来，就不用每次设置文件路径了。当然，如果使用Brackets开发的话，可以通过git插件提供的终端接口直接跳转至当前工程目录，也就不需要.bat文件的参与了。</p>
<p>当然，这么简单的两句话，还是存在一定的缺陷，就是当我使用<code>ctrl+C</code>退出jekyll serve的时候，指令窗口也会随之关闭。为了解决这个问题，可以先跳转至指定目录，然后执行<code>cmd</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\WorkSpace\Html CSS\LITR.coding.net</span><br><span class="line">cmd.exe</span><br></pre></td></tr></table></figure>
<p>这样虽能保证窗口不关闭，但也无法在其后执行其它指令了。</p>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Brackets - Git插件的使用方法]]></title>
      <url>http://www.litreily.top/2016/05/15/brackets-git/</url>
      <content type="html"><![CDATA[<p>Brackets，一款专职做网页设计的开发工具，其插件也是极为丰富，Git自然是少不了的，那么如何安装和使用它呢，我以Windows 10环境为例进行说明。</p>
<h2 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h2><h3 id="1-1-打开插件管理器"><a href="#1-1-打开插件管理器" class="headerlink" title="1.1 打开插件管理器"></a>1.1 打开插件管理器</h3><p>在Brackets中，基本上所有的插件都可以从插件管理器(Extension Manager)中安装，该管理器可以从Brackets软件菜单栏File中找到。</p>
<p><img src="/assets/brackets/git/extension manager.png" alt="Extension Manager"></p>
<h3 id="1-2-搜素并安装git插件"><a href="#1-2-搜素并安装git插件" class="headerlink" title="1.2 搜素并安装git插件"></a>1.2 搜素并安装git插件</h3><ul>
<li>打开插件管理器后，选择“Available”选项卡，在搜索框中输入“git”。</li>
</ul>
<p><img src="/assets/brackets/git/input git.png" alt="input git"></p>
<ul>
<li>在弹出的列表中找到“Brackets Git”，点击“install”开始安装。</li>
</ul>
<p><img src="/assets/brackets/git/install git.png" alt="install git"></p>
<ul>
<li>安装完成后，将提示“Installation successful!”。</li>
</ul>
<p><img src="/assets/brackets/git/install success.png" alt="install success"></p>
<h3 id="1-3-查看Git插件"><a href="#1-3-查看Git插件" class="headerlink" title="1.3 查看Git插件"></a>1.3 查看Git插件</h3><p>安装完成后，可以在插件管理器的“Installed”选项卡中查看已安装的插件。</p>
<p><img src="/assets/brackets/git/installed extensions.png" alt="installed extensions"></p>
<p>此外，如果我们想知道它保存在哪个地方，可以打开文件资源管理器,在路径：</p>
<pre>C:\\Users\USER_NAME\AppData\Roaming\Brackets\extensions\user</pre>

<p>下进行查看。这里保存了用户安装的所有插件。</p>
<p><img src="/assets/brackets/git/extensions.png" alt="extensions"></p>
<h2 id="2-界面布局"><a href="#2-界面布局" class="headerlink" title="2. 界面布局"></a>2. 界面布局</h2><h3 id="2-1-整体布局"><a href="#2-1-整体布局" class="headerlink" title="2.1 整体布局"></a>2.1 整体布局</h3><p>在Brackets右侧插件栏中可以找到git图标，点击该图标或使用快捷键<code>Ctrl+ALG+G</code>可以打开或关闭界面下方的git工具。在界面左侧，当有文件被修改并且尚未<code>commit</code>时，文件名前面会出现红色竖杠标记，文件中被修改的地方也会出现相应的标记。此外，在界面左侧，项目文件夹下方有一个下拉选项，显示当前所在的git分支。</p>
<p><img src="/assets/brackets/git/git layout.png" alt="git layout"></p>
<h3 id="2-2-工具面板"><a href="#2-2-工具面板" class="headerlink" title="2.2 工具面板"></a>2.2 工具面板</h3><p>git工具面板按区域可分为两大块，上面是控件栏，下面是内容指示。</p>
<p><img src="/assets/brackets/git/git tools.png" alt="git tools"></p>
<p>下面是对各个控件的简要说明：</p>
<ul>
<li><img class="inline-img" src="/assets/brackets/git/git%20clone.png">： 初始化/克隆项目</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20commit.png">： 提交当前更改内容</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20updown.png">： 跳至上一个/下一个文件修改位置</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20history.png">： 显示仓库历史提交记录/当前文件历史修改记录</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20refresh.png">： 刷新仓库内容/更多指令选项</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20tag.png">： 添加标签</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20push.png">： 切换远程仓库源/fetch/pull/push</li>
<li><img class="inline-img" src="/assets/brackets/git/git%20settings.png">： 打开指令窗口/Git Settings界面</li>
</ul>
<h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h2><h3 id="3-1-关联Git-GUI"><a href="#3-1-关联Git-GUI" class="headerlink" title="3.1 关联Git GUI"></a>3.1 关联Git GUI</h3><p>Brackets的git插件仅仅是个插件，要使用git进行代码管理，前提是电脑已装有git软件，如Windows的git for Windows，安装方法这里不多说。当我们安装好git软件并配置好环境变量后，默认情况下，Brackets能够自动识别git的安装路径；如果没有识别，可以手动设置，打开Git Settings界面，选择Git configuration选项卡，在“Path to Git executable”输入git的安装路径。</p>
<p><img src="/assets/brackets/git/git setPath.png" alt="git settings"></p>
<h3 id="3-2-git-init"><a href="#3-2-git-init" class="headerlink" title="3.2 git init"></a>3.2 git init</h3><p>当我们新建一个仓库，需要使用git进行管理时，首先应该在工程目录下执行<code>git init</code>指令，如果使用git插件，则只需在git工具面板中点击“Init”按钮即可。</p>
<p><img src="/assets/brackets/git/git init.png" alt="git init"></p>
<h3 id="3-3-git-remote"><a href="#3-3-git-remote" class="headerlink" title="3.3 git remote"></a>3.3 git remote</h3><p>为了推送代码至远程仓库，可以选择Github、Coding等带有Git管理器的网站，新建项目并复制仓库网址。为了实现:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://git.coding.net/litreily/svg-social.git</span><br></pre></td></tr></table></figure></p>
<p>可以在Brackets中打开git工具，点击右侧第一个按钮，选择“Create new remote…”，然后依次输入仓库名称以及网址，确认即可。</p>
<p><img src="/assets/brackets/git/git remote.png" alt="git remote"></p>
<p><img src="/assets/brackets/git/git remote add.png" alt="git remote"></p>
<h3 id="3-4-git-commit"><a href="#3-4-git-commit" class="headerlink" title="3.4 git commit"></a>3.4 git commit</h3><p>当我们需要提交已修改文件时，可以执行<code>git add File_name</code>/<code>git add .</code>以及<code>git commit</code>。如果使用git插件，可以在git工具中勾选需要提交的文件，然后点击提交按钮，在弹出的界面中输入提交信息，点击确认即可。</p>
<p><img src="/assets/brackets/git/git commit files.png" alt="git commit"></p>
<h3 id="3-5-git-push"><a href="#3-5-git-push" class="headerlink" title="3.5 git push"></a>3.5 git push</h3><p>在联网情况下，如果需要将代码推送至远程仓库，需要使用指令<code>git push</code>,如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>如果使用git插件，可以点击推送按钮，首次推送需要填写用户名和密码，即远程仓库对应的用户名和密码。</p>
<p><img src="/assets/brackets/git/git push files.png" alt="git push"></p>
<p><img src="/assets/brackets/git/git push success.png" alt="git push"></p>
<h3 id="3-6-git-pull-git-fetch"><a href="#3-6-git-pull-git-fetch" class="headerlink" title="3.6 git pull / git fetch"></a>3.6 git pull / git fetch</h3><p>如果用户在远程仓库修改了代码或添加了新的文件，此时可以在本地使用指令<code>git pull</code>获取更新文件，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<p>如果使用git插件，可以点击拉取按钮。</p>
<p><img src="/assets/brackets/git/git pull.png" alt="git pull"></p>
<p><img src="/assets/brackets/git/git pull success.png" alt="git pull"></p>
<p>指令<code>git fetch</code>的操作方法类似，辞不赘述。</p>
<h3 id="3-7-git-branch-git-checkout-git-merge"><a href="#3-7-git-branch-git-checkout-git-merge" class="headerlink" title="3.7 git branch / git checkout / git merge"></a>3.7 git branch / git checkout / git merge</h3><p>如果需要创建新的分支、切换分支或是合并分支，我们通常需要使用指令<code>git branch</code>/<code>git checkout</code>/<code>git merge</code>,在Brackets中，可以通过界面右侧的分支选项完成这些操作。</p>
<p><img src="/assets/brackets/git/git checkout.png" alt="git checkout"></p>
<p><img src="/assets/brackets/git/git branch.png" alt="git branch"></p>
<h3 id="3-8-git-tag"><a href="#3-8-git-tag" class="headerlink" title="3.8 git tag"></a>3.8 git tag</h3><p>如果需要给当前版本添加标签，可以点击标签按钮，输入标签名，点击确定即可，下次推送的时候记得在推送窗口勾选“Send tags”。</p>
<p><img src="/assets/brackets/git/git new tag.png" alt="git new tag"></p>
<h3 id="3-9-打开指令窗口"><a href="#3-9-打开指令窗口" class="headerlink" title="3.9 打开指令窗口"></a>3.9 打开指令窗口</h3><p>如果习惯使用敲指令，或是有些指令不得不通过指令窗口才能实现，可以通过git插件打开git bash。</p>
<p><img src="/assets/brackets/git/git bash.png" alt="git bash"></p>
<h3 id="3-10-查看历史记录"><a href="#3-10-查看历史记录" class="headerlink" title="3.10 查看历史记录"></a>3.10 查看历史记录</h3><p>查看推送记录：</p>
<p><img src="/assets/brackets/git/git history push.png" alt="git push history"></p>
<p>查看某文件的提交记录：</p>
<p><img src="/assets/brackets/git/git history file.png" alt="git file history"></p>
<h3 id="3-11-放弃更改"><a href="#3-11-放弃更改" class="headerlink" title="3.11 放弃更改"></a>3.11 放弃更改</h3><p>如果我们需要放弃某些文件的修改时，可以在git工具的内容显示区域找到该文件，点击“discard changes”。如果想要删除某些刚刚添加但还未提交的文件，同样可以在该区域找到文件，通过点击“Delete file”删除文件。</p>
<p><img src="/assets/brackets/git/git discard.png" alt="git discard"></p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>git指令丰富，上述并非全部，但是尚且够用，往后更新同步。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> brackets </tag>
            
            <tag> git </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Labview - 手自动存储TDMS文件的区别]]></title>
      <url>http://www.litreily.top/2016/05/11/DAQ-TDMS/</url>
      <content type="html"><![CDATA[<p>在Labview的软件开发过程中，少不了使用DAQ（Data Acquisition）助手，在使用DAQ助手采集数据时，通常需要存储数据，此时我们可以使用DAQ助手的配置界面设置TDMS（Technical Data Management Streaming）文件路径。而TDMS文件是NI主推的一种二进制记录文件，可以大大减小数据的存储容量。</p>
<p>为了研究使用DAQ助手自动存储TDMS文件产生的数据大小，我专程写了个测试程序，使用NI MAX创建的模拟采集卡生成模拟正弦波信号，通过测试程序进行采集和存储。</p>
<h2 id="1-示例程序"><a href="#1-示例程序" class="headerlink" title="1. 示例程序"></a>1. 示例程序</h2><p>程序名称：仿DAQ设计.vi</p>
<ul>
<li>前面板</li>
</ul>
<p><img src="/assets/labview/saveTdms/panel.png" alt="前面板"></p>
<ul>
<li>程序框图</li>
</ul>
<p><img src="/assets/labview/saveTdms/codeBlock.png" alt="程序框图"></p>
<h2 id="2-程序测试"><a href="#2-程序测试" class="headerlink" title="2. 程序测试"></a>2. 程序测试</h2><h3 id="2-1-采样信息"><a href="#2-1-采样信息" class="headerlink" title="2.1 采样信息"></a>2.1 采样信息</h3><ul>
<li>模拟采集卡：NI USB-6341</li>
<li>采样频率：100Hz；</li>
<li>采样点数：100；</li>
<li>采样时间：5分钟；</li>
<li>物理通道：ai0,ai1,ai2;</li>
</ul>
<h3 id="2-2-采样过程"><a href="#2-2-采样过程" class="headerlink" title="2.2 采样过程"></a>2.2 采样过程</h3><ul>
<li>程序运行中</li>
</ul>
<p><img src="/assets/labview/saveTdms/saveTdms.png" alt="saveTdms"></p>
<ul>
<li>程序运行结束</li>
</ul>
<p><img src="/assets/labview/saveTdms/saveTdmsEnd.png" alt="saveTdmsEnd"></p>
<h3 id="2-3-采样结果"><a href="#2-3-采样结果" class="headerlink" title="2.3 采样结果"></a>2.3 采样结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总采样点数：30000*3 = 90000</span><br><span class="line">.tdms文件大小：180kB(185,132Bytes)</span><br><span class="line">185216(Bytes)/90000 ≈ 2.057956Bytes ≈ 2Bytes</span><br><span class="line">.tdms_index文件大小：5.01kB(5132Bytes)</span><br></pre></td></tr></table></figure>
<p>说明每个采样点对应的存储大小为2Bytes左右。如果使用普通文件（如：.txt/.dat等）存储，一个双精度型数据需要占用8Bytes的空间，对应其文件大小将是tdms文件的4倍左右。</p>
<h2 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h2><h3 id="3-1-局限性"><a href="#3-1-局限性" class="headerlink" title="3.1 局限性"></a>3.1 局限性</h3><ol>
<li><p>如果使用DAQ助手自动存储TDMS文件，它将存储已创建的所有虚拟通道的数据，无法单独存储某一通道的数据。</p>
</li>
<li><p>对于同一个采集卡设备，当用户需要连续采集多路通道的电压/电流信号时，因为采集卡的多路通道使用相同的参考时钟源和多路复用器，所以只能使用一个DAQ助手。此外，该设备的所有通道对应的采样频率也必须一致。但如果用户的多路通道不是同一类型，例如：电压和计数值，像这种情况，用户能且只能使用多个DAQ助手。</p>
</li>
</ol>
<h3 id="3-2-手动存储TDMS文件"><a href="#3-2-手动存储TDMS文件" class="headerlink" title="3.2 手动存储TDMS文件"></a>3.2 手动存储TDMS文件</h3><p>为了解决<strong>局限性</strong>提到的第2个问题，我尝试手动添加TDMS存储文件，用以替代DAQ自动存储TDMS方式。为此，我修改了部分程序，在保留DAQ自动存储的同时，在获取数据后再次存储。修改部分如下图所示：</p>
<p><img src="/assets/labview/saveTdms/manualSaveTdms.png" alt="manualSaveTDMS"></p>
<p>再次运行程序，自动存储的tdms文件大小与上述一致，手动存储的tdms文件大小为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">704kB(720,998Bytes) ≈ 90000 * 8.011089 (Bytes) ≈ 90000 * 8 (Bytes)</span><br></pre></td></tr></table></figure></p>
<p>可以看出，在手动存储时，每个数据的数据量为8个字节左右，恰好是双精度数据的大小。所以在一般情况下，我们优先考虑DAQ的自动存储功能，如果为了减少数据量使用手动存储方法，即使减少通道数，也未必能达到效果，除非减少后的通道数小等于总通道数的1/4.</p>
<h3 id="3-3-文件属性对比"><a href="#3-3-文件属性对比" class="headerlink" title="3.3 文件属性对比"></a>3.3 文件属性对比</h3><ul>
<li>自动存储文件的属性</li>
</ul>
<p><img src="/assets/labview/saveTdms/autoSaveProperties.png" alt="AutoSaveTdmsProperties"></p>
<ul>
<li>手动存储文件的属性</li>
</ul>
<p><img src="/assets/labview/saveTdms/manualSaveProperties.png" alt="ManualSaveTdmsProperties"></p>
<p>通过属性对比可以看出，自动存储文件比手动存储文件多了一些属性值，包括<strong>换算数量</strong><code>NI_Number_Of_Scales</code>、<strong>换算阶数和配置</strong><code>NI_Scale[n]_config</code>以及<strong>换算的启用状态</strong><code>NI_Scaling_Status</code>。为了验证数据存储文件大小不一致是否与这些多出属性有关，我进行了进一步测试，在手动存储过程中设置了tdms文件属性，使其与自动存储文件的属性一致。</p>
<p><img src="/assets/labview/saveTdms/setTdmsProperties.png" alt="SetTdmsProperties"></p>
<p>但结果依旧令人失望，文件大小并未因此而减小。理论上肯定有方法减小Tdms文件大小，但我现在还不知晓，路漫漫其修远兮，吾将上下而求索。</p>
]]></content>
      
        <categories>
            
            <category> LabVIEW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> labview </tag>
            
            <tag> tdms </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Windows中安装Jekyll]]></title>
      <url>http://www.litreily.top/2016/04/15/install-jekyll/</url>
      <content type="html"><![CDATA[<p>本着无聊爱折腾的精神，又鉴于Windows系统的限制，无奈寻觅网上资料千千万，终寻得一卷 <strong><a href="http://www.madhur.co.in/blog/2011/09/01/runningjekyllwindows.html" target="_blank" rel="noopener">奇书</a></strong>，得偿所愿！</p>
<h2 id="1-依赖工具"><a href="#1-依赖工具" class="headerlink" title="1. 依赖工具"></a>1. 依赖工具</h2><ul>
<li><a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">Ruby &amp; Ruby Development Kit</a></li>
<li>Jekyll</li>
<li><a href="http://portablepython.com/wiki/PortablePython2.7.5.1/" target="_blank" rel="noopener">Python</a>(可选)</li>
<li>Pygments(可选)</li>
</ul>
<h2 id="2-搭建Jekyll环境"><a href="#2-搭建Jekyll环境" class="headerlink" title="2. 搭建Jekyll环境"></a>2. 搭建Jekyll环境</h2><p>在Windows中下载安装所需的依赖包，并配置好对应的环境变量。</p>
<h3 id="2-1-安装Ruby"><a href="#2-1-安装Ruby" class="headerlink" title="2.1 安装Ruby"></a>2.1 安装Ruby</h3><p>由于jekyll采用Ruby开发而得，所以想要使用它就得安装Ruby语言环境。可以从<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">http://rubyinstaller.org/downloads/</a>下载Ruby安装包，推荐选择<code>Ruby 2.2.4</code>。下载后安装在<code>C:\Ruby</code>，当然，路径不是固定的。</p>
<p><img src="/assets/jekyll/Ruby.png" alt="Ruby"></p>
<h3 id="2-2-下载解压Devkit"><a href="#2-2-下载解压Devkit" class="headerlink" title="2.2 下载解压Devkit"></a>2.2 下载解压Devkit</h3><p>下载Ruby的开发工具DevKit，地址与Ruby的<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">下载地址</a>一致。当然，别忘了根据系统位数选择最新版本的DevKit。至于解压路径，选择<code>C:\devkit</code>即可。</p>
<p><img src="/assets/jekyll/DevKit.png" alt="Development Kit"></p>
<h3 id="2-3-初始化Devkit"><a href="#2-3-初始化Devkit" class="headerlink" title="2.3 初始化Devkit"></a>2.3 初始化Devkit</h3><p>使用快捷键<code>Win+R</code>输入<code>cmd</code>打开命令窗口，输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> C:\devkit</span><br><span class="line">$ ruby dk.rb init</span><br></pre></td></tr></table></figure>
<p><img src="/assets/jekyll/Ruby-init.png" alt="Ruby-init"></p>
<p>运行以上指令后，devkit目录下将会多出一个”config.yml”,其内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This configuration file contains the absolute path locations of all</span></span><br><span class="line"><span class="comment"># installed Rubies to be enhanced to work with the DevKit. This config</span></span><br><span class="line"><span class="comment"># file is generated by the 'ruby dk.rb init' step and may be modified</span></span><br><span class="line"><span class="comment"># before running the 'ruby dk.rb install' step. To include any installed</span></span><br><span class="line"><span class="comment"># Rubies that were not automagically discovered, simply add a line below</span></span><br><span class="line"><span class="comment"># the triple hyphens with the absolute path to the Ruby root directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># - C:/ruby19trunk</span></span><br><span class="line"><span class="comment"># - C:/ruby192dev</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">---</span><br><span class="line">- C:/Ruby</span><br></pre></td></tr></table></figure>
<h3 id="2-4-安装Devkit"><a href="#2-4-安装Devkit" class="headerlink" title="2.4 安装Devkit"></a>2.4 安装Devkit</h3><p>确保文件中指示的Ruby与安装好的Ruby路径一致，然后执行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby dk.rb install</span><br></pre></td></tr></table></figure>
<p>至此，ruby开发环境已配置完成，如果中途出现错误，多半是路径问题或环境变量问题，为以防万一，可以在Windows系统属性中的环境变量中添加ruby路径。</p>
<p><img src="/assets/jekyll/Ruby-envir.png" alt="Ruby-environment"></p>
<h3 id="2-5-安装Jekyll"><a href="#2-5-安装Jekyll" class="headerlink" title="2.5 安装Jekyll"></a>2.5 安装Jekyll</h3><p>执行以下指令安装jekyll：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install jekyll</span><br></pre></td></tr></table></figure>
<p>这一步很有可能会报错，而报错原因基本上出于gem源地址，gem默认源地址为<a href="https://rubygems.org/，需要修改为http://rubygems.org/。修改指令如下：" target="_blank" rel="noopener">https://rubygems.org/，需要修改为http://rubygems.org/。修改指令如下：</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -r https://rubygems.org</span><br><span class="line">$ gem sources -a http://rubygems.org</span><br></pre></td></tr></table></figure>
<p>修改后即可正常完成jekyll的下载安装了。安装完成后，便可使用jekyll了。</p>
<h3 id="2-6-可选操作"><a href="#2-6-可选操作" class="headerlink" title="2.6 可选操作"></a>2.6 可选操作</h3><p>如果需要使用Pygments提供的代码高亮功能，可以安装<a href="http://portablepython.com/wiki/PortablePython2.7.5.1/" target="_blank" rel="noopener">Python</a>，配置环境变量。再到<a href="https://pypi.python.org/pypi/setuptools#windows" target="_blank" rel="noopener">https://pypi.python.org/</a>下载<code>distribute_setup.py</code>。最后通过执行以下指令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python distribute_setup.py</span><br><span class="line">$ easy_install Pygments</span><br></pre></td></tr></table></figure>
<p>更加详细的Pygments说明可以参考<a href="http://havee.me/internet/2013-08/support-pygments-in-jekyll.html" target="_blank" rel="noopener">这里</a>。好了，一切准备就绪。 Enjoy Yourself！</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
            <tag> ruby </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matlab - 设置坐标尺度]]></title>
      <url>http://www.litreily.top/2016/04/11/matlab-skill/</url>
      <content type="html"><![CDATA[<p>matlab中，在使用plot绘图时会自动生成带有标尺的坐标系，坐标间距会随屏幕大小自动更改。但有时候由于特殊需求需要修改该间距，此时，我们可以通过set函数进行实现。</p>
<p>以 <code>y=sin(2*pi*10*t)</code> 为例，在使用matlab默认生成方式时，其仿真结果如下图所示：</p>
<p><img src="/assets/matlab/setTickBefore.png" alt="setTickBefore"></p>
<p>代码如下：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">f=<span class="number">10</span>;               <span class="comment">% 信号频率</span></span><br><span class="line">fs=<span class="number">400</span>;             <span class="comment">% 采样频率</span></span><br><span class="line">N=fs*<span class="number">0.5</span>;           <span class="comment">% 采样点数</span></span><br><span class="line">t=(<span class="number">0</span>:N<span class="number">-1</span>)/fs;       <span class="comment">% 时间</span></span><br><span class="line">y=<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*f.*t);   <span class="comment">% 信号</span></span><br><span class="line"></span><br><span class="line">plot(t,y);grid on;  <span class="comment">% 绘图</span></span><br><span class="line">xlabel(<span class="string">'时间/t'</span>);     <span class="comment">% x轴标题</span></span><br><span class="line">ylabel(<span class="string">'幅值'</span>);       <span class="comment">% y轴标题</span></span><br><span class="line">title(<span class="string">'y=sin(2*pi*10*t)'</span>)   <span class="comment">% 标题</span></span><br><span class="line">set(gca,<span class="string">'xtick'</span>,<span class="number">0</span>:<span class="number">0.025</span>:t(<span class="keyword">end</span>));    <span class="comment">% 设置x轴标尺</span></span><br><span class="line">set(gca,<span class="string">'ytick'</span>,min(y):<span class="number">0.4</span>:max(y)); <span class="comment">% 设置y轴标尺</span></span><br></pre></td></tr></table></figure>
<p>修改标尺后得到的波形如下图所示：</p>
<p><img src="/assets/matlab/setTickAfter.png" alt="setTickAfter"></p>
]]></content>
      
        <categories>
            
            <category> Matlab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法谜题]]></title>
      <url>http://www.litreily.top/2016/04/10/algor-puzzles/</url>
      <content type="html"><![CDATA[<h2 id="1-算法设计的通用策略"><a href="#1-算法设计的通用策略" class="headerlink" title="1. 算法设计的通用策略"></a>1. 算法设计的通用策略</h2><ol>
<li>穷举搜索</li>
<li>回溯法</li>
<li>减而治之</li>
<li>分而治之</li>
<li>变而治之</li>
<li>贪心法</li>
<li>迭代改进</li>
<li>动态规划</li>
</ol>
<h2 id="2-举例"><a href="#2-举例" class="headerlink" title="2. 举例"></a>2. 举例</h2><ol>
<li>三阶幻方</li>
</ol>
<blockquote>
<p>三阶幻方是最简单的幻方，又叫九宫格，是由1,2,3,4,5,6,7,8,9九个数字组成的一个三行三列的矩阵，其对角线、横行、纵向的和都为15，称这个最简单的幻方的幻和为15。中心数为5。</p>
</blockquote>
<p>在3*3的表格内分别填入1~9，使得表格每行，每列以及每条对角线上的三个数之和均相等。</p>
<div><table class="normalTable"><br><tbody><tr><td>6</td><td>1</td><td>8</td></tr><tr><td>7</td><td>5</td><td>3</td></tr><tr><td>2</td><td>9</td><td>4</td></tr></tbody></table><br></div>

<p>如果采用穷举搜索求解这道题目的话，最多搜索次数为：<code>9! = 362880</code></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Video Test]]></title>
      <url>http://www.litreily.top/2016/04/09/viedo-test/</url>
      <content type="html"><![CDATA[<h2 id="寻生"><a href="#寻生" class="headerlink" title="寻生"></a>寻生</h2><iframe class="video-body" src="https://www.youtube-nocookie.com/embed/2vGUAY7In8Y" width="100%" height="400px" frameborder="0" allowfullscreen></iframe>

<h2 id="执诺"><a href="#执诺" class="headerlink" title="执诺"></a>执诺</h2><iframe class="video-body" src="http://www.tudou.com/programs/view/html5embed.action?type=0&code=QP-496IQQt4&lcode=&resourceId=0_06_05_99" width="100%" height="400px" allowtransparency="true" allowfullscreen="true" allowfullscreeninteractive="true" scrolling="no" border="0" frameborder="0"></iframe>
]]></content>
      
        <categories>
            
            <category> Media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
            <tag> video </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文学港湾]]></title>
      <url>http://www.litreily.top/2016/04/06/poems/</url>
      <content type="html"><![CDATA[<p>既是文学，或是艺术，则无需太多章法，墨守成规终是落了下乘，此文集我见闻，纵有万千感慨，亦藏于字间，溢于言表。</p>
<h2 id="古之瑰宝"><a href="#古之瑰宝" class="headerlink" title="古之瑰宝"></a>古之瑰宝</h2><ul>
<li>死生契阔，与之成说；执子之手，与子偕老 — 《诗经》</li>
<li>大学之道，在明明德，在亲民，在至于至善 — 《大学》</li>
</ul>
<h2 id="戏如人生"><a href="#戏如人生" class="headerlink" title="戏如人生"></a>戏如人生</h2><h3 id="仙剑奇侠传"><a href="#仙剑奇侠传" class="headerlink" title="仙剑奇侠传"></a>仙剑奇侠传</h3><ul>
<li>雨色轻风意，柔情怜花殇 — 《仙剑5前传 · 夏侯瑾轩》</li>
<li>剑者，心之刃也，既可为杀，亦可为护，杀与护，不过一念之间 — 《仙剑5前传 · 谢沧行》</li>
<li>云淡天清拂风暖，凡尘俗埃本无牵；世间多少痴情苦，离聚无悔尽是缘 — 《仙剑5 · 欧阳倩》</li>
<li>人生一场虚空大梦，韶华白首，不过转瞬。惟有天道恒在，往复循环，不曾更改… — 《仙剑4 · 慕容紫英》</li>
</ul>
<h3 id="古剑奇谭"><a href="#古剑奇谭" class="headerlink" title="古剑奇谭"></a>古剑奇谭</h3><ul>
<li>心之所向，无惧无悔，愿求仁得仁，复无怨怼 — 《百里屠苏》</li>
<li>手中有剑，方能保护自己珍惜之人 — 《百里屠苏》</li>
<li>我愿代替他的双眼 看尽繁花似锦 云卷云舒，我愿代替他的双脚 踏遍天涯海角 山川万里 — 《风晴雪》</li>
</ul>
<h2 id="古风之殇"><a href="#古风之殇" class="headerlink" title="古风之殇"></a>古风之殇</h2><ul>
<li>爱的宿命像是花朵，美丽却难长久 — 《无双 · 刘菲》</li>
<li>既然你叫流萤，那不如… 不如我就赠你漫天流萤吧 — 《遇萤》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> literature </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Test page]]></title>
      <url>http://www.litreily.top/2016/04/04/test-page/</url>
      <content type="html"><![CDATA[<p>This is a test article,just test the function of jekyll!</p>
<p>What are you doing now?</p>
<p>Test in Ubuntu 16.04, 2016.7.24 16:53</p>
]]></content>
      
        <categories>
            
            <category> 杂物柜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to Jekyll]]></title>
      <url>http://www.litreily.top/2016/04/04/jekyll/</url>
      <content type="html"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>
<p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>
<p>Jekyll also offers powerful support for code snippets:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hi</span><span class="params">(name)</span></span></span><br><span class="line">  puts <span class="string">"Hi, <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">print_hi(<span class="string">'Tom'</span>)</span><br><span class="line"><span class="comment">#=&gt; prints 'Hi, Tom' to STDOUT.</span></span><br></pre></td></tr></table></figure>
<p>Check out the <a href="http://jekyllrb.com/docs/home" target="_blank" rel="noopener">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll" target="_blank" rel="noopener">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/" target="_blank" rel="noopener">Jekyll Talk</a>.</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
            <tag> ruby </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
