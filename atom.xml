<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LITREILY</title>
  <icon>https://www.gravatar.com/avatar/6ae20d989e9d976faf00ecc6d9bcfe82</icon>
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.litreily.top/"/>
  <updated>2018-12-31T15:00:34.761Z</updated>
  <id>http://www.litreily.top/</id>
  
  <author>
    <name>litreily</name>
    <email>707922098@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python之pypcap库的安装及简单抓包工具的实现</title>
    <link href="http://www.litreily.top/2018/12/31/pypcap-install/"/>
    <id>http://www.litreily.top/2018/12/31/pypcap-install/</id>
    <published>2018-12-31T11:22:30.000Z</published>
    <updated>2018-12-31T15:00:34.761Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/pynetwork/pypcap" target="_blank" rel="noopener">pypcap</a>是一个对<code>libpcap</code>C库进行封装和简化的面向对象的抓包工具库，可以非常方便的用于抓包和过滤，结合<code>dpkt</code>解析库可以完成许多网络数据包的抓取和分析。本文讲述的就是如何使用<code>pypcap</code>及<code>dpkt</code>库实现简单抓包工具，也称为嗅探器(sniffer).</p><h2 id="Linux-端安装-pypcap"><a href="#Linux-端安装-pypcap" class="headerlink" title="Linux 端安装 pypcap"></a>Linux 端安装 pypcap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcap-dev</span><br><span class="line">sudo pip install pypcap</span><br></pre></td></tr></table></figure><p>这里有个问题,如果使用<code>Anaconda</code>目录的<code>pip</code>安装则可能失败,目前原因未明,但官方的<code>python3</code>对应的<code>pip3</code>及<code>python2</code>对应的<code>pip</code>均无此问题.</p><a id="more"></a><h2 id="Windows-端安装-pypcap"><a href="#Windows-端安装-pypcap" class="headerlink" title="Windows 端安装 pypcap"></a>Windows 端安装 pypcap</h2><p>根据<code>pypcap</code>官方说明：</p><blockquote><p>WinPcap has compatibility issues with Windows 10, therefore it’s recommended to use Npcap (Nmap’s packet sniffing library for Windows, based on the WinPcap/Libpcap libraries, but with improved speed, portability, security, and efficiency). Please enable WinPcap API-compatible mode during the library installation.</p></blockquote><p>这里提到<code>winpcap</code>与<code>win10</code>间存在兼容性问题，具体什么问题我也没搞清楚，之前使用<code>wireshark</code>抓包一直用的<code>winpcap</code>也没问题。不过我估计和后面要用到的<code>npcap sdk</code>有关吧。既如此，就需要在安装<code>pypcap</code>前安装好<code>Npcap</code>，并下载好<code>Npcap SDK</code>。</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><ol><li><a href="https://github.com/pynetwork/pypcap/releases" target="_blank" rel="noopener">pypcap 源码</a></li><li><a href="https://nmap.org/npcap/#download" target="_blank" rel="noopener">Npcap</a></li><li><a href="https://nmap.org/npcap/#download" target="_blank" rel="noopener">Npcap SDK</a></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>安装Npcap</li></ul><p>安装下载后的Npcap安装包，如果电脑带有无线网卡，记得勾选“support raw 802.11 traffic(and monitor mode) for wireless adapters”。需要注意的是，如果电脑已经安装过<code>winpcap</code>软件，在安装<code>Npcap</code>时会弹窗提示卸载<code>Winpcap</code>,此时需要关闭wireshark或是其它相关的软件</p><ul><li>安装pypcap</li></ul><ol><li>将<code>Npcap SDK</code>文件夹和<code>pypcap</code>源码文件夹放在一个目录下</li><li>将<code>Npcap SDK</code>文件夹名称修改为<code>wpdpack</code></li><li>进入<code>pypcap</code>源码目录，执行<code>python setup.py install</code>即可完成安装</li></ol><p>在第三步需要注意的是，如果Python版本为3.7.2（其它大于3.7的版本没试过）有可能编译失败，因为有个头文件<code>pystate.h</code>在高版本会有更新，导致结构体<code>_ts PyThreadState</code>中的某些参数不识别，从而提示错误<code>pcap.c(22849): error C2039: &#39;exc_value&#39;: is not a member of &#39;_ts&#39;</code>等。之后我将版本换至3.6.6后便正常编译了。</p><p>安装完成后，可以进入<code>python</code>执行<code>import pcap</code>查看是否已经可以正常导入。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pcap</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all of the Internet devices</span></span><br><span class="line">devs = pcap.findalldevs()</span><br><span class="line">print(*devs, sep=<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">pc = pcap.pcap(devs[<span class="number">3</span>], promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># fiter http pcakets</span></span><br><span class="line">pc.setfilter(<span class="string">'tcp port 80'</span>)</span><br><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pc:</span><br><span class="line">    print(ptime, pdata)</span><br></pre></td></tr></table></figure><p>接下来简单解释下几个主要函数</p><h3 id="findalldevs"><a href="#findalldevs" class="headerlink" title="findalldevs"></a>findalldevs</h3><p><code>findalldevs</code>可以列出当前操作系统的所有网络接口,但是<code>windows</code>和<code>Linux</code>的输出风格不大一样,下面来看看.</p><p>Linux版输出简单明了,若我猜的不错,输出的首个接口便是电脑的有线接口(本人台式机,Ubuntu系统),至少在我这是适用的.</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜ python</span><br><span class="line">Python 3.6.7 (default, Oct 22 2018, 11:32:17)</span><br><span class="line">[GCC 8.2.0] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import pcap</span><br><span class="line">&gt;&gt;&gt; pcap.findalldevs()</span><br><span class="line">[<span class="string">'enp2s0'</span>, <span class="string">'any'</span>, <span class="string">'lo'</span>, <span class="string">'nflog'</span>, <span class="string">'nfqueue'</span>, <span class="string">'usbmon1'</span>, <span class="string">'usbmon2'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在<code>ubuntu</code>及大部分Linux系统中,均可使用<code>ip route</code>或是<code>ifconfig</code>来获取接口名，据此甚至可以自动获取接口名．</p><p>Windows版则比较复杂，下面是某台电脑<code>win10</code>操作系统输出的结果，这个直接看是看不出什么的, 因为使用<code>cmd</code>指令<code>ipconfig /all</code>输出的接口信息并不包含以下内容，而是接口名称及描述信息等，如果想知道下面接口如何与接口名对应起来，可以参考后面抓包工具使用注册表来获取接口信息,或是打开<code>wireshark</code>抓包，每个报文的帧头都会显示当前接口的接口信息．</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pcap</span><br><span class="line">&gt;&gt;&gt; pcap.findalldevs()</span><br><span class="line">[<span class="string">'\Device\NPF_&#123;839768E4-726A-48BB-9CEC-BD6FD670CB8F&#125;'</span>, <span class="string">'\Device\NPF_&#123;C4D1AF17-C5C9-40C5-90F8-17781657FC9E&#125;'</span>, <span class="string">'\Device\NPF_&#123;26024876-9711-428F-89D3-B91D2C488AC5&#125;'</span>, <span class="string">'\Device\NPF_&#123;E26BFFEF-0644-4C13-8016-EB408AE1D471&#125;'</span>, <span class="string">'\Device\NPF_&#123;9ED3674C-211E-4A57-923A-F8DBE6E6B704&#125;'</span>, <span class="string">'\Device\NPF_&#123;A0B8B562-F309-44F3-95A1-BF34F5465925&#125;'</span>, <span class="string">'\Device\NPF_&#123;9D76B006-6946-4C88-AED2-7F7A9194303C&#125;'</span>]</span><br></pre></td></tr></table></figure><h3 id="pcap-pcap"><a href="#pcap-pcap" class="headerlink" title="pcap.pcap"></a>pcap.pcap</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pc = pcap.pcap(devs[<span class="number">3</span>], promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>以上代码定义了一个pcap对象，首个参数<code>devs[3]</code>对应接口名，<code>promisc</code>为真代表打开混杂模式，<code>immediate</code>代表立即模式，启用将不缓存数据包,<code>timeout_ms</code>代表接收数据包的超时时间</p><h3 id="setfilter"><a href="#setfilter" class="headerlink" title="setfilter"></a>setfilter</h3><p><code>setfilter</code>用来设置数据包过滤器，比如只想抓<code>http</code>的包，那就通过<code>setfilter(tcp port 80)</code>实现，更加详细的过滤规则请自行谷歌．</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pc:</span><br><span class="line">    print(ptime, pdata)</span><br></pre></td></tr></table></figure><p><code>pcap.pcap</code>对象pc是个动态数据，通常结合for循环或是while循环不断读取数据包，数据包会返回时间戳及报文数据．</p><p>上面这个小例子就是简单的说明<code>pcap</code>常用库函数的使用方法．具体的数据包的存储及解析需要由解析库<code>dpkt</code>来完成．下面是一个更加详细的抓包工具实例，可以完成数据包的抓取、解析及存储.</p><h2 id="简易抓包工具"><a href="#简易抓包工具" class="headerlink" title="简易抓包工具"></a>简易抓包工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pcap</span><br><span class="line"><span class="keyword">import</span> dpkt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Windows'</span> <span class="keyword">in</span> platform.platform():</span><br><span class="line">    <span class="keyword">import</span> winreg <span class="keyword">as</span> wr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IF_REG = <span class="string">r'SYSTEM\CurrentControlSet\Control\Network\&#123;4d36e972-e325-11ce-bfc1-08002be10318&#125;'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInterfaceByName</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">'''Get guid of interface from regedit of windows system</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: interface name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        An valid guid value or None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string">        getInterfaceByName('eth0')</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    reg = wr.ConnectRegistry(<span class="keyword">None</span>, wr.HKEY_LOCAL_MACHINE)</span><br><span class="line">    reg_key = wr.OpenKey(reg, IF_REG)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(wr.QueryInfoKey(reg_key)[<span class="number">0</span>]):</span><br><span class="line">        subkey_name = wr.EnumKey(reg_key, i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            reg_subkey = wr.OpenKey(reg_key, subkey_name + <span class="string">r'\Connection'</span>)</span><br><span class="line">            Name = wr.QueryValueEx(reg_subkey, <span class="string">'Name'</span>)[<span class="number">0</span>]</span><br><span class="line">            wr.CloseKey(reg_subkey)</span><br><span class="line">            <span class="keyword">if</span> Name == name:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">r'\Device\NPF_'</span> + subkey_name</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mac_addr</span><span class="params">(mac)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%02x:%02x:%02x:%02x:%02x:%02x'</span>%tuple(mac)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_addr</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%d.%d.%d.%d'</span>%tuple(ip)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captureData</span><span class="params">(iface)</span>:</span></span><br><span class="line">    pkt = pcap.pcap(iface, promisc=<span class="keyword">True</span>, immediate=<span class="keyword">True</span>, timeout_ms=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># filter method</span></span><br><span class="line">    filters = &#123;</span><br><span class="line">        <span class="string">'DNS'</span>: <span class="string">'udp port 53'</span>,</span><br><span class="line">        <span class="string">'HTTP'</span>: <span class="string">'tcp port 80'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># pkt.setfilter(filters['HTTP'])</span></span><br><span class="line"></span><br><span class="line">    pcap_filepath = <span class="string">'pkts/pkts_&#123;&#125;.pcap'</span>.format(time.strftime(<span class="string">"%Y%m%d-%H%M%S"</span>,</span><br><span class="line">        time.localtime()))</span><br><span class="line">    pcap_file = open(pcap_filepath, <span class="string">'wb'</span>)</span><br><span class="line">    writer = dpkt.pcap.Writer(pcap_file)</span><br><span class="line">    print(<span class="string">'Start capture...'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkts_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pkt:</span><br><span class="line">            writer.writepkt(pdata, ptime)</span><br><span class="line">            <span class="comment"># anlysisData(pdata)</span></span><br><span class="line">            printRawPkt(ptime, pdata)</span><br><span class="line">            pkts_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">        writer.close()</span><br><span class="line">        pcap_file.close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pkts_count:</span><br><span class="line">            os.remove(pcap_filepath)</span><br><span class="line">        print(<span class="string">'%d packets received'</span>%(pkts_count))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printRawPkt</span><span class="params">(time, data)</span>:</span></span><br><span class="line">    eth = dpkt.ethernet.Ethernet(data)</span><br><span class="line">    print(<span class="string">'Timestamp: '</span>, str(datetime.datetime.utcfromtimestamp(time)))</span><br><span class="line">    print(<span class="string">'Ethernet Frame: '</span>, mac_addr(eth.src), mac_addr(eth.dst))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(eth.data, dpkt.ip.IP):</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ip = eth.data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get fragments info</span></span><br><span class="line">    do_not_fragment = bool(ip.off &amp; dpkt.ip.IP_DF)</span><br><span class="line">    more_fragments = bool(ip.off &amp; dpkt.ip.IP_MF)</span><br><span class="line">    fragment_offset = ip.off &amp; dpkt.ip.IP_OFFMASK</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'IP: %s -&gt; %s (len=%d ttl=%d DF=%d MF=%d offset=%d)\n'</span> % (</span><br><span class="line">        ip_addr(ip.src), ip_addr(ip.dst), ip.len, ip.ttl,</span><br><span class="line">        do_not_fragment, more_fragments, fragment_offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anlysisData</span><span class="params">(data)</span>:</span></span><br><span class="line">    packet = dpkt.ethernet.Ethernet(data)</span><br><span class="line">    <span class="keyword">if</span> isinstance(packet.data, dpkt.ip.IP):</span><br><span class="line">        ip = ip_addr(packet.data.dst)</span><br><span class="line">        <span class="keyword">if</span> packet.data.data.dport == <span class="number">80</span> <span class="keyword">or</span> packet.data.data.sport == <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(packet.data.data.data.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>))</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> uderr:</span><br><span class="line">                print(uderr.__str__())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'Windows'</span> <span class="keyword">in</span> platform.platform():</span><br><span class="line">        iface = getInterfaceByName(<span class="string">'Router'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        iface = <span class="string">'enp2s0'</span></span><br><span class="line">    captureData(iface)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><ul><li>获取接口</li></ul><p><code>getInterfaceByName</code>根据接口名称,通过查找注册表信息获取<code>pcap</code>所需的接口设备信息,适用于Windows系统.至于Linux系统,直接通过<code>ifconfig</code>获取即可,至于自动获取功能,目前还没写,以后再说吧.</p><ul><li>数据包存储</li></ul><p>为了将数据包存储到<code>.pcap</code>文件(此类文件可以使用wireshark打开)中,可以通过<code>dpkt.pcap.Writer</code>对象使用<code>writepkt</code>函数不断写入文件.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pcap_file = open(pcap_filepath, <span class="string">'wb'</span>)</span><br><span class="line">writer = dpkt.pcap.Writer(pcap_file)</span><br><span class="line"><span class="keyword">for</span> ptime, pdata <span class="keyword">in</span> pkt:</span><br><span class="line">    writer.writepkt(pdata, ptime)</span><br></pre></td></tr></table></figure><ul><li>打印数据包基本信息</li></ul><p><code>printRawPkt</code>是个非常简单的打印数据包基本信息的函数,最多仅打印至<code>ip</code>信息,打印格式如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Timestamp:</span>  <span class="number">2018</span><span class="bullet">-12</span><span class="bullet">-31</span> <span class="number">13</span><span class="string">:58:39.850904</span></span><br><span class="line"><span class="string">Ethernet</span> <span class="attr">Frame:</span>  <span class="number">00</span><span class="string">:e0:4c:5a:0a:78</span> <span class="number">00</span><span class="string">:0f:e9:61:30:00</span></span><br><span class="line"><span class="attr">IP:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.76</span> <span class="bullet">-&gt;</span> <span class="number">59.111</span><span class="number">.160</span><span class="number">.197</span> <span class="string">(len=52</span> <span class="string">ttl=64</span> <span class="string">DF=1</span> <span class="string">MF=0</span> <span class="string">offset=0)</span></span><br></pre></td></tr></table></figure><p>信息包含时间戳,以太网帧的<code>MAC</code>地址,<code>IP</code>地址及分片信息等.</p><ul><li>解析http数据包</li></ul><p><code>anlysisData</code>函数目前只是简单的检测及打印解码后的<code>http</code>包,使用<code>dpkt.ethernet.Ethernet</code>可以将原始数据包封装成一个结构化的以太网帧,之后按照网络协议栈的顺序便可逐层解析出链路层、网络层、传输层直至应用层.以上代码先是判断是否为<code>IP</code>报文,之后根据端口号判断是否为http报文,然后将数据解码后输出.</p><p>这个例子也很简单,很多异常情况也没考虑,本文主要目的是描述<code>pypcap</code>和<code>dpkt</code>的常用方法以及抓包工具的实现过程,至于针对具体协议的解析则需继续学习.</p><h3 id="抓包测试"><a href="#抓包测试" class="headerlink" title="抓包测试"></a>抓包测试</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">➜ mkdir pkts</span><br><span class="line">➜ sudo ./pktcap.py</span><br><span class="line">Start capture...</span><br><span class="line">Timestamp:  2018-12-31 13:58:37.148964</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.148978</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.529024</span><br><span class="line">Ethernet Frame:  00:36:76:6c:28:fe 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:37.809011</span><br><span class="line">Ethernet Frame:  98:e0:d9:a4:50:1d 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:39.850904</span><br><span class="line">Ethernet Frame:  00:e0:4c:5a:0a:78 00:0f:e9:61:30:00</span><br><span class="line">IP: 192.168.1.76 -&gt; 59.111.160.197 (len=52 ttl=64 DF=1 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:39.862890</span><br><span class="line">Ethernet Frame:  00:0f:e9:61:30:00 00:e0:4c:5a:0a:78</span><br><span class="line">IP: 59.111.160.197 -&gt; 192.168.1.76 (len=40 ttl=55 DF=1 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:40.289465</span><br><span class="line">Ethernet Frame:  b0:19:c6:17:0a:57 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:40.369068</span><br><span class="line">Ethernet Frame:  a4:d1:8c:0b:54:12 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:41.859034</span><br><span class="line">Ethernet Frame:  a0:4e:a7:e0:65:3d 33:33:00:00:00:16</span><br><span class="line"></span><br><span class="line">Timestamp:  2018-12-31 13:58:42.079218</span><br><span class="line">Ethernet Frame:  8c:6d:50:7d:f9:<span class="built_in">fc</span> ff:ff:ff:ff:ff:ff</span><br><span class="line">IP: 0.0.0.0 -&gt; 255.255.255.255 (len=352 ttl=64 DF=0 MF=0 offset=0)</span><br><span class="line"></span><br><span class="line">^C10 packets received</span><br><span class="line">➜ <span class="built_in">cd</span> pkts</span><br><span class="line">➜ ls</span><br><span class="line">pkts_20181230-185017.pcap  pkts_20181231-203416.pcap  pkts_20181231-215837.pcap</span><br></pre></td></tr></table></figure><p>代码已上传至<a href="https://github.com/Litreily/Python-demos.git" target="_blank" rel="noopener">github Python-demos</a> <code>sniffer.py</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/jackadam/p/8279080.html" target="_blank" rel="noopener">windows 环境下python 安装 pypcap…</a></li><li><a href="https://www.cnblogs.com/xuanhun/p/5625186.html" target="_blank" rel="noopener">Python黑客编程3网络数据监听和过滤</a></li><li><a href="https://blog.csdn.net/weixin_39138707/article/details/74612637" target="_blank" rel="noopener">Mac下用python+pypcap+dpkt抓取IP数据包并分析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/pynetwork/pypcap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pypcap&lt;/a&gt;是一个对&lt;code&gt;libpcap&lt;/code&gt;C库进行封装和简化的面向对象的抓包工具库，可以非常方便的用于抓包和过滤，结合&lt;code&gt;dpkt&lt;/code&gt;解析库可以完成许多网络数据包的抓取和分析。本文讲述的就是如何使用&lt;code&gt;pypcap&lt;/code&gt;及&lt;code&gt;dpkt&lt;/code&gt;库实现简单抓包工具，也称为嗅探器(sniffer).&lt;/p&gt;
&lt;h2 id=&quot;Linux-端安装-pypcap&quot;&gt;&lt;a href=&quot;#Linux-端安装-pypcap&quot; class=&quot;headerlink&quot; title=&quot;Linux 端安装 pypcap&quot;&gt;&lt;/a&gt;Linux 端安装 pypcap&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libpcap-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install pypcap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有个问题,如果使用&lt;code&gt;Anaconda&lt;/code&gt;目录的&lt;code&gt;pip&lt;/code&gt;安装则可能失败,目前原因未明,但官方的&lt;code&gt;python3&lt;/code&gt;对应的&lt;code&gt;pip3&lt;/code&gt;及&lt;code&gt;python2&lt;/code&gt;对应的&lt;code&gt;pip&lt;/code&gt;均无此问题.&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.litreily.top/categories/Python/"/>
    
    
      <category term="pypcap" scheme="http://www.litreily.top/tags/pypcap/"/>
    
      <category term="dpkt" scheme="http://www.litreily.top/tags/dpkt/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的文件I/O缓冲</title>
    <link href="http://www.litreily.top/2018/10/25/io-cache/"/>
    <id>http://www.litreily.top/2018/10/25/io-cache/</id>
    <published>2018-10-25T01:42:40.000Z</published>
    <updated>2018-10-25T10:26:46.338Z</updated>
    
    <content type="html"><![CDATA[<p>近日阅读《Linux/UNIX系统编程手册》第13章 - 文件I/O缓冲，有些收获，是以此文以记之。以往只知道Linux的I/O操作有缓冲机制，但始终不知道具体的缓冲流程及使用方法。读完本章节后方才有种恍然大悟的感觉，久违的因读书而觉得舒爽的感觉。</p><p>好了，进入正题，下图摘自原文(13.4-I/O缓冲小结)，此图概括了<code>stdio</code>库及内核针对输出文件所用的缓冲以及各类缓冲的控制机制。本文依据此图逐步揭开文件I/O缓冲的面纱。</p><p><img src="/assets/linux/io_buffer.jpg" alt="I/O缓冲"></p><a id="more"></a><h2 id="I-O缓冲的类型"><a href="#I-O缓冲的类型" class="headerlink" title="I/O缓冲的类型"></a>I/O缓冲的类型</h2><p>在使用<code>stdio</code>库中文件写操作相关的函数（如:<code>printf</code>, <code>fputc</code>, <code>fputs</code>, <code>fwrite</code>）时，待写入数据从用户空间内存到内核空间内存、再到磁盘会经过以下3类缓冲</p><ol><li>stdio库的缓冲区</li><li>文件I/O的内核缓冲区的高速缓存</li><li>磁盘驱动器内置高速缓存</li></ol><p>下面逐一介绍。</p><h3 id="stdio库的缓冲"><a href="#stdio库的缓冲" class="headerlink" title="stdio库的缓冲"></a>stdio库的缓冲</h3><p><img src="/assets/linux/stdio_buffer.png" alt="stdio buffer"></p><p>如上图所示，<code>stdio</code>库实现的缓冲位于用户空间内存当中，该缓冲区A会缓冲大块的文件数据以减少系统调用（如: <code>read</code>, <code>write</code>）。</p><p>需要知道的是，<code>stdio</code>库函数内部会调用底层的系统调用，如<code>fgets</code>调用<code>read</code>，<code>fputs</code>调用<code>write</code>。但是在调用之前，</p><ul><li>对于读操作，库函数会先检查缓冲区A内是否已有所需数据，如果有则直接从缓冲区A读取；否则先执行系统调用<code>read</code>，从内核缓冲区B中读取数据到缓冲区A，然后从缓冲区A读取数据</li><li>对于写操作，库函数会先检查缓冲区A是否还有空闲，如果有则先存入缓冲区A；否则先执行库函数<code>fflush</code>，将缓冲区A中数据刷新至内核缓冲区B，然后将当前待写入数据写入缓冲区A</li></ul><p>对于<code>stdio</code>库的缓冲数据，在执行库函数之后的某一时刻，系统会通过<code>fflush</code>函数将数据刷新至内核缓冲区。当然，我们也可以手动执行<code>fflush</code>函数强制刷新数据至内核缓冲区。</p><p><code>fflush</code>定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>fflush(stdin)</code>会清空缓冲区内的标准输入数据</li><li><code>fflush(stdout)</code>会将缓冲区内的写入数据刷新至终端输出</li><li><code>stderr</code>默认不使用缓冲</li><li><code>fflush(stream)</code>将文件流<code>stream</code>的缓冲数据刷新至内核缓冲区</li></ul><h3 id="文件I-O的内核缓冲"><a href="#文件I-O的内核缓冲" class="headerlink" title="文件I/O的内核缓冲"></a>文件I/O的内核缓冲</h3><p>不管使不使用<code>stdio</code>库函数，最终都会直接或间接的调用<code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code>等系统调用读写文件I/O，那么系统就会在写操作后将数据存入内核缓冲区，但此时还并未存入磁盘。</p><p>也就是说，在执行<code>write</code>后，函数直接返回，但数据只是存在内核缓冲区中。当有新的读取请求时，会先在内核缓冲区中查找，如果有则直接返回；如果没有则先从磁盘读入大块数据至内核缓冲区，这样可以减少磁盘读写操作。毕竟，相比于系统调用和用户空间与内核空间之间的数据传输，磁盘读写所花费的时间要长得多。</p><blockquote><p>若内容发生变化的内核缓冲区在30s内未经显式方式同步到磁盘上，则一条长期运行的内核线程会确保将其刷新到磁盘上。</p></blockquote><p>不同版本的<code>linux</code>，其内核线程不一样，可以使用指令<code>ps aux |grep flush</code>粗略查看一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内核线程刷新之前脏缓冲区必须达到的时间，单位：0.01s</span></span><br><span class="line">$ cat /proc/sys/vm/dirty_expire_centisecs</span><br><span class="line">3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核线程执行周期，单位：0.01s</span></span><br><span class="line">$ cat /proc/sys/vm/dirty_writeback_centisecs</span><br><span class="line">500</span><br></pre></td></tr></table></figure><h3 id="磁盘驱动器内置缓冲"><a href="#磁盘驱动器内置缓冲" class="headerlink" title="磁盘驱动器内置缓冲"></a>磁盘驱动器内置缓冲</h3><p>内核缓冲区的数据在真正存入物理磁盘前，会先存入磁盘驱动器内置的高速缓存，之后在某一时刻写入磁盘。具体过程没有深究过，目前只需知道还有这么一层缓冲区即可。</p><h2 id="控制文件I-O缓冲"><a href="#控制文件I-O缓冲" class="headerlink" title="控制文件I/O缓冲"></a>控制文件I/O缓冲</h2><p>通过某些方式，我们可以控制I/O缓冲机制，其中包括修改缓冲区大小、缓冲模式，禁用缓冲，强制刷新缓冲数据等。</p><h3 id="控制stdio库的缓冲"><a href="#控制stdio库的缓冲" class="headerlink" title="控制stdio库的缓冲"></a>控制stdio库的缓冲</h3><p>对于<code>stdio</code>库分配的缓冲区，在默认情况下会分配<code>BUFSIZ</code>大小的缓冲区，该参数值的大小说法不一，但据原文说明，在<code>glibc</code>中定义为<code>8192</code>字节。</p><p><code>stdio</code>流的缓冲模式分以下三类：</p><ul><li><code>_IONBF</code> - 不缓冲</li><li><code>_IOLBF</code> - 行缓冲，针对终端设备，在输出一个换行符前缓冲数据。对输入流，每次读取一行数据</li><li><code>_IOFBF</code> - 全缓冲，单词读、写数据(read, write)的大小与缓冲区大小一致，磁盘默认使用此模式</li></ul><p>我们可以通过库函数<code>setvbuf</code>, <code>setbuffer</code>, <code>setbuf</code>三者之一设置<code>stdio</code>流的缓冲模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuf</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuffer</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setvbuf</span><span class="params">(FILE *stream, <span class="keyword">char</span> *buf, <span class="keyword">int</span> mode, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p><code>setvbuf</code>函数中的mode对应的就是缓冲模式，可选项为<code>_IONBF</code>, <code>_IOLBF</code>, <code>_IOFBF</code>，<code>buf</code>和<code>size</code>分别对应指定的缓冲区指针及缓冲区大小。当然，当为不缓冲模式时，函数将忽略<code>buf</code>，<code>size</code>这两个参数。示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 4096</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"test.txt"</span>, <span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">if</span>(setvbuf(fp, buf, _IOFBF, BUF_SIZE) !=<span class="number">0</span> )</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br></pre></td></tr></table></figure><p>从下面的<code>uClibc</code>源码可以看出，<code>setbuffer</code>, <code>setbuf</code>仅仅是对<code>setvbuf</code>的简单封装。但要注意的是，<code>SUSv3</code>标准并未对<code>setbuffer</code>函数加以定义，在使用时需要加上宏定义<code>_BSD_SOURCE</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuffer</span><span class="params">(FILE * __restrict stream, <span class="keyword">register</span> <span class="keyword">char</span> * __restrict buf, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDIO_BUFFERS</span></span><br><span class="line">    setvbuf(stream, buf, (buf ? _IOFBF : _IONBF), size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbuf</span><span class="params">(FILE * __restrict stream, <span class="keyword">register</span> <span class="keyword">char</span> * __restrict buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDIO_BUFFERS</span></span><br><span class="line">    setvbuf(stream, buf, ((buf != <span class="literal">NULL</span>) ? _IOFBF : _IONBF), BUFSIZ);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要禁用缓冲，通常可以使用<code>setbuf(stream, NULL)</code>实现。但通常不推荐这么做，应该合理组织代码，在特定情况使用<code>fflush</code>刷新数据，这样可以在有效利用用户空间缓冲作用的同时，减少系统调用，适宜的存储数据至内核缓冲区。</p><h3 id="控制文件I-O的内核缓冲"><a href="#控制文件I-O的内核缓冲" class="headerlink" title="控制文件I/O的内核缓冲"></a>控制文件I/O的内核缓冲</h3><p>在某些情况下，我们可能需要强制将内核缓冲区内的数据刷新至磁盘，而不必等待内核线程等待特定时间后才写入。此时主要有两种选择</p><ol><li>使用<code>fsync</code>，<code>fdatasync</code>, <code>sync</code>系统调用中的某一个将内核缓冲区的数据强制写入磁盘</li><li>以<code>O_SYNC</code>同步方式调用<code>open</code>打开文件，此后每次读写操作都会自动立即写入磁盘</li></ol><h4 id="fsync"><a href="#fsync" class="headerlink" title="fsync"></a>fsync</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fsync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fdatasync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sync</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><code>fsync</code>保证<strong>同步I/O文件完整性</strong>，<code>fdatasync</code>保证<strong>同步I/O数据完整性</strong>。两个<strong>完整性</strong>的区别在于前者会将所有更新的文件元数据写入磁盘，后者不会传递所有经过修改的文件元数据属性（如：时间戳）。</p><p><code>fsync</code>与<code>fdatasync</code>均是刷新指定文件流数据，而<code>sync()</code>函数会更新所有内核缓冲区数据至磁盘，对应<code>shell</code>指令<code>sync</code>。</p><h4 id="O-SYNC"><a href="#O-SYNC" class="headerlink" title="O_SYNC"></a>O_SYNC</h4><p><code>fsync</code>等系统调用需要被手动调用，仅在被调用处起作用；而以<code>O_SYNC</code>方式<code>open</code>的文件流，后续所有写操作都将把数据直接写入磁盘。</p><p>不到万不得已还是不要以这种方式打开文件流，因为这将严重影响性能，当<code>write</code>缓冲区较小时尤为突出。</p><h3 id="禁用磁盘高速缓存"><a href="#禁用磁盘高速缓存" class="headerlink" title="禁用磁盘高速缓存"></a>禁用磁盘高速缓存</h3><p>按照书上描述，使用<code>hdparm -W0</code>可以禁用磁盘上的高速缓存，但我没有实际试过。</p><h3 id="直接I-O"><a href="#直接I-O" class="headerlink" title="直接I/O"></a>直接I/O</h3><p>当以<code>O_DIRECT</code>方式<code>open</code>文件流时，数据流会绕过内核缓冲区高速缓存，从用户空间直接传入文件或磁盘，此类过程称为<strong>直接I/O</strong>。</p><p>使用直接I/O对I/O操作有诸多对齐限制，主要保证读取和写入时，偏移量、数据长度以及内存边界需要是块设备基本单元(通常为512字节)的整数倍，否则会导致<code>EINVAL</code>错误。</p><p>使用直接I/O时，可以结合<code>memalign</code>函数动态分配内存。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用<code>stdio</code>库函数可以利用该库实现的用户空间缓冲区减少系统调用；<code>read</code>，<code>write</code>等系统调用默认不与磁盘直接传递数据，而是经过文件I/O的内核缓冲区作为中转，以此减少磁盘操作。</p><p>通过<code>fflush</code>函数可以将<code>stdio</code>流的缓冲区数据刷新至内核缓冲区；通过<code>fsync</code>, <code>fdatasync</code>函数可以将内核缓冲区数据刷新至磁盘。</p><p>使用<code>setvbuf</code>, <code>setbuf</code>等函数可以设置<code>stdio</code>流的缓冲模式，甚至禁用缓冲；以<code>O_SYNC</code>方式打开文件，可以在立即将数据同步至磁盘文件。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《Linux/UNIX系统编程手册》 第13章 文件I/O缓冲</li><li><a href="http://www.pixelbeat.org/programming/stdio_buffering/" target="_blank" rel="noopener">buffering in standard streams</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日阅读《Linux/UNIX系统编程手册》第13章 - 文件I/O缓冲，有些收获，是以此文以记之。以往只知道Linux的I/O操作有缓冲机制，但始终不知道具体的缓冲流程及使用方法。读完本章节后方才有种恍然大悟的感觉，久违的因读书而觉得舒爽的感觉。&lt;/p&gt;
&lt;p&gt;好了，进入正题，下图摘自原文(13.4-I/O缓冲小结)，此图概括了&lt;code&gt;stdio&lt;/code&gt;库及内核针对输出文件所用的缓冲以及各类缓冲的控制机制。本文依据此图逐步揭开文件I/O缓冲的面纱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/linux/io_buffer.jpg&quot; alt=&quot;I/O缓冲&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="stdio" scheme="http://www.litreily.top/tags/stdio/"/>
    
      <category term="cache" scheme="http://www.litreily.top/tags/cache/"/>
    
      <category term="buffer" scheme="http://www.litreily.top/tags/buffer/"/>
    
  </entry>
  
  <entry>
    <title>Linux指令 - tee的实现</title>
    <link href="http://www.litreily.top/2018/09/27/tee/"/>
    <id>http://www.litreily.top/2018/09/27/tee/</id>
    <published>2018-09-27T06:34:30.000Z</published>
    <updated>2018-10-16T10:53:21.905Z</updated>
    
    <content type="html"><![CDATA[<p>近日学习<a href="https://book.douban.com/subject/25809330/" target="_blank" rel="noopener">《Linux/UNIX 系统编程手册》</a>一书，巩固了C语言中一些常用库函数的使用，主要涉及基本IO操作相关的库函数。为了加深理解，手动实现了Linux系统中的<code>tee</code>指令的功能。借此文记述实现过程。</p><h2 id="tee功能简述"><a href="#tee功能简述" class="headerlink" title="tee功能简述"></a>tee功能简述</h2><p><code>tee</code>类似于一个单输入双输出的三通管道，将标准输入的数据输出到指定文件和标准输出中。为实现这个指令，主要考虑以下几点：</p><ol><li>解析<code>tee</code>包含的命令行参数</li><li>读取标准输入数据，并将数据写入标准输出和指定文件</li><li>若未指定文件，则仅将数据输出到标准输出</li></ol><p>下面逐步分析每个要点的实现方法。</p><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><p><code>tee</code>包含以下可选项，本文实现仅考虑<code>-a</code>,<code>--version</code>,<code>--help</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Usage: tee [OPTION]... [FILE]...</span><br><span class="line">Copy standard input to each FILE, and also to standard output.</span><br><span class="line"></span><br><span class="line">  -a, --append              append to the given FILEs, <span class="keyword">do</span> not overwrite</span><br><span class="line">  -i, --ignore-interrupts   ignore interrupt signals</span><br><span class="line">  -p                        diagnose errors writing to non pipes</span><br><span class="line">      --output-error[=MODE]   <span class="built_in">set</span> behavior on write error.  See MODE below</span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">      --version  output version information and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>为解析命令行的<strong>可选项</strong>，需要用到库函数<code>getopt</code>或<code>getopt_long</code>，前者仅支持短格式，后者支持长短格式。下面对使用这两个函数解析参数的方法进行对比。</p><h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><p><code>getopt</code>函数声明及相关参数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind, opterr, optopt;</span><br></pre></td></tr></table></figure><ul><li><code>argc</code>: 与main函数的argc一致，代表参数个数</li><li><code>argv</code>: 与main函数的argv一致，代表参数值</li><li><code>optstring</code>: 可选项字符串，如<code>a:bc:d:</code>，参数后带冒号代表该选项需要给定参数值</li><li><code>optarg</code>: 存储可选项的参数值，如果不带参数则为NULL</li><li><code>optind</code>: 存储下一个可选参数的索引，每执行一次<code>getopt</code>就加1</li><li><code>opterr</code>: 错误提示标志，默认为1，当输入参数无效时，会给出提示</li><li><code>optopt</code>: 是对可选参数字符的一个备份，当输入的参数无效时可用</li></ul><p>下面使用<code>getopt</code>实现对选项<code>-a</code>的解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt(argc, argv, <span class="string">"a"</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">                    | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码结合<code>while</code>、 <code>switch</code>，使用<code>getopt</code>循环获取和分析可选项。当前只对一个可选项<code>a</code>进行了解析，当包含<code>-a</code>可选项时，flag_append设为1，之后根据该标志为文件的打开方式添加<code>O_APPEND</code>标志，后面读写数据时就会以附加的方式在文件尾部开始写入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">    flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">    fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">            | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：  </p><ol><li>如果不带<code>-a</code>，程序默认会以<code>O_TRUNC</code>方式打开文件，表示截断，会以重写的方式覆盖原文件  </li><li><code>optind</code>小于<code>argc</code>时，说明除了可选参数之外，用户还输入了其它参数，这里对应的是<code>tee</code>指令所需的文件名称。此时argv[optind]刚好对应第一个非可选参数。</li></ol></blockquote><h3 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h3><p><code>getopt_long</code>定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br></pre></td></tr></table></figure><p>与<code>getopt</code>相比，多了两个参数<code>longopts</code>, <code>longindex</code></p><ul><li><code>longopts</code>: 长格式可选项，<code>option</code>结构体指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;       <span class="comment">// 名称，如"help"</span></span><br><span class="line">    <span class="keyword">int</span>         has_arg;    <span class="comment">// 带参标志，0 或 1</span></span><br><span class="line">    <span class="keyword">int</span>        *flag;       <span class="comment">// 常设为NULL，若非NULL,将会把val值存入flag</span></span><br><span class="line">    <span class="keyword">int</span>         val;        <span class="comment">// getopt_long的返回值或将存入flag的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当<code>flag</code>为NULL时，<code>getopt_long</code>返回<code>val</code>，否则返回0,并将<code>val</code>值存入<code>flag</code></p><ul><li><code>longindex</code>: 用于存储当前解析的长选项在<code>longopts</code>中的索引值(0,1,…)，通常设为<code>NULL</code></li></ul><p>下面使用<code>getopt_long</code>实现对选项<code>--help</code>，<code>--version</code>, <code>-a</code>的解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, <span class="string">":av"</span>,opts, <span class="literal">NULL</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                usage();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(VERSION<span class="string">"\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"tee: invaild option -- '%c'\n"</span></span><br><span class="line">                    <span class="string">"Try 'tee --help' for more infomation.\n"</span>, optopt);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR</span><br><span class="line">            | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，长格式选项数组如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">    &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，当用户分别输入<code>--append</code>,<code>--help</code>,<code>--version</code>时，<code>getopt_long</code>分别返回<code>a</code>，<code>h</code>，<code>v</code>三个字符。</p><p>但注意<code>while((opt = getopt_long(argc, argv, &quot;:av&quot;,opts, NULL))!=-1)</code>只包含了<code>av</code>两个参数，所以当用户输入<code>-h</code>时，程序会认为是无效参数，也就是说<code>--help</code>在这里只支持长格式，而其它两个支持长短两种方式。</p><p>这也是指令的某些选项仅支持长格式的实现方法之一了，其它方法可参考函数<code>getopt_long_only</code></p><blockquote><p>说明：<br><code>:av</code>最前面的冒号可以起到<code>opterr=0</code>的效果，就是在参数无效时不给出默认提示</p></blockquote><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><a href="#getopt_long">getopt_long</a>提到的<code>--help</code>选项是绝大多数指令都会实现的，用于提供帮助信息，下面是<code>tee</code>的<code>--help</code>输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: tee [OPTION]... [FILE]\n"</span></span><br><span class="line">        <span class="string">"Copy standard input to each FILE, and also to standard output.\n\n"</span></span><br><span class="line">        <span class="string">"  -a, --append   append to the given FILEs, do not overwrite\n"</span></span><br><span class="line">        <span class="string">"  -v, --version  output version information and exit\n"</span></span><br><span class="line">        <span class="string">"      --help     display this help and exit\n"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于参数解析，说到底就是<code>getopt</code>或<code>getopt_long</code>的应用。以上提到的可选参数中，其实也就<code>-a</code>会影响后续写入文件的方式，其它两个长格式选项均用于打印信息，之后便直接退出了。</p><p>而非可选项也只考虑了一个待写入文件的文件名，暂不考虑同时多文件写入。</p><h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><p><code>tee</code>数据读写很简单，仅需不断读取标准输入(stdin)数据，然后写入标准输出(stdout)和文件中，直到无数据可读或遇到中断信号为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 512</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(read(STDIN_FILENO, &amp;ch, <span class="number">1</span>) &gt; <span class="number">0</span>)&#123; <span class="comment">// read from stdin</span></span><br><span class="line">        buffer[i++] = ch;</span><br><span class="line">        <span class="keyword">if</span>(ch = <span class="string">'\n'</span> || i == BUF_SIZE)&#123;</span><br><span class="line">            write(STDOUT_FILENO, buffer, i); <span class="comment">// output to stdout</span></span><br><span class="line">            <span class="keyword">if</span>(fd &gt; <span class="number">0</span>) write(fd, buffer, i);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code>分别对应标准输入和标准输出的文件描述符<code>0</code>, <code>1</code>。这两个加上标准错误输出<code>STDERR_FILENO</code>是所有应用程序默认打开的，所以无需手动<code>open</code>。</p><p>此外，输出函数<code>output</code>会判断传入的文件描述符是否有效，如果无效则不会写入文件，仅将数据输出至标准输出。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 512</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION <span class="meta-string">"litreily 1.0.0"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(read(STDIN_FILENO, &amp;ch, <span class="number">1</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        buffer[i++] = ch;</span><br><span class="line">        <span class="keyword">if</span>(ch = <span class="string">'\n'</span> || i == BUF_SIZE)&#123;</span><br><span class="line">            write(STDOUT_FILENO, buffer, i); <span class="comment">// output to stdout</span></span><br><span class="line">            <span class="keyword">if</span>(fd &gt; <span class="number">0</span>) write(fd, buffer, i);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: tee [OPTION]... [FILE]\n"</span></span><br><span class="line">        <span class="string">"Copy standard input to each FILE, and also to standard output.\n\n"</span></span><br><span class="line">        <span class="string">"  -a, --append   append to the given FILEs, do not overwrite\n"</span></span><br><span class="line">        <span class="string">"  -v, --version  output version information and exit\n"</span></span><br><span class="line">        <span class="string">"      --help     display this help and exit\n"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt, fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag_append = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flags = O_WRONLY | O_CREAT;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"append"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'a'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"help"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"version"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">'v'</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, <span class="string">":av"</span>,opts, <span class="literal">NULL</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                flag_append = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                usage();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(VERSION<span class="string">"\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"tee: invaild option -- '%c'\n"</span></span><br><span class="line">                    <span class="string">"Try 'tee --help' for more infomation.\n"</span>, optopt);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(optind &lt; argc)&#123;</span><br><span class="line">        flags += flag_append ? O_APPEND:O_TRUNC;</span><br><span class="line">        fd = open(argv[optind], flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"invaild file -- \"%s\"\n"</span>, argv[optind]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd &gt; <span class="number">0</span>)</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指令测试"><a href="#指令测试" class="headerlink" title="指令测试"></a>指令测试</h2><p>使用<code>gcc</code>完成编译，得到<code>tee</code>可执行文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc tee.c -o tee</span><br></pre></td></tr></table></figure><p>下面对指令进行测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ ./tee --<span class="built_in">help</span></span><br><span class="line">Usage: tee [OPTION]... [FILE]</span><br><span class="line">Copy standard input to each FILE, and also to standard output.</span><br><span class="line"></span><br><span class="line">  -a, --append   append to the given FILEs, <span class="keyword">do</span> not overwrite</span><br><span class="line">  -v, --version  output version information and <span class="built_in">exit</span></span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">$ ./tee --version</span><br><span class="line">litreily 1.0.0</span><br><span class="line">$ ./tee -h</span><br><span class="line">tee: invaild option -- <span class="string">'h'</span></span><br><span class="line">Try <span class="string">'tee --help'</span> <span class="keyword">for</span> more infomation.</span><br><span class="line">$ ./tee -v</span><br><span class="line">litreily 1.0.0</span><br><span class="line">$ ./tee -a -d</span><br><span class="line">tee: invaild option -- <span class="string">'d'</span></span><br><span class="line">Try <span class="string">'tee --help'</span> <span class="keyword">for</span> more infomation.</span><br><span class="line">$ ./tee test.txt</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">22</span><br><span class="line">$ cat test.txt</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">$ ./tee -a test.txt</span><br><span class="line">4444</span><br><span class="line">4444</span><br><span class="line">55555</span><br><span class="line">55555</span><br><span class="line">$ cat test.txt</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">4444</span><br><span class="line">55555</span><br><span class="line">$ ls | ./tee test.txt</span><br><span class="line">main.c</span><br><span class="line">Makefile</span><br><span class="line">README.md</span><br><span class="line">tee</span><br><span class="line">tee.c</span><br><span class="line">test.txt</span><br><span class="line">$ cat test.txt</span><br><span class="line">main.c</span><br><span class="line">Makefile</span><br><span class="line">README.md</span><br><span class="line">tee</span><br><span class="line">tee.c</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="http://man.linuxde.net/tee" target="_blank" rel="noopener">tee命令</a></li><li><a href="http://blog.zhangjikai.com/2016/03/05/%E3%80%90C%E3%80%91%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0--getopt%E5%92%8Cgetopt_long/" target="_blank" rel="noopener">解析命令行参数–getopt和getopt_long</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日学习&lt;a href=&quot;https://book.douban.com/subject/25809330/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Linux/UNIX 系统编程手册》&lt;/a&gt;一书，巩固了C语言中一些常用库函数的使用，主要涉及基本
      
    
    </summary>
    
      <category term="嵌入式" scheme="http://www.litreily.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="C/C++" scheme="http://www.litreily.top/tags/C-C/"/>
    
      <category term="linux" scheme="http://www.litreily.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt中使用gdb分析coredump</title>
    <link href="http://www.litreily.top/2018/09/20/coredump/"/>
    <id>http://www.litreily.top/2018/09/20/coredump/</id>
    <published>2018-09-20T10:32:00.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>近日调试一个<code>bug</code>，一个守护进程在特定情况下执行一段程序后便会挂掉。为了分析<code>bug</code>产生原因，本人使用了printf, strace追踪，gdb调试等诸多调试工具和测试方法。本文对于在<code>OpenWrt</code>嵌入式系统中启用<code>gdb</code>功能及其使用方法进行详细说明。</p><h2 id="调试背景"><a href="#调试背景" class="headerlink" title="调试背景"></a>调试背景</h2><p>我最先通过<code>strace</code>工具追踪发现进程是在收到<code>SIGABRT</code>信号后被<code>kill</code>的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pipe([<span class="number">8</span>, <span class="number">9</span>])                            = <span class="number">0</span></span><br><span class="line">fcntl64(<span class="number">8</span>, F_GETFL)                     = <span class="number">0</span> (flags O_RDONLY)</span><br><span class="line">ioctl(<span class="number">8</span>, SNDCTL_TMR_TIMEBASE <span class="keyword">or</span> TCGETS, <span class="number">0xbe90a454</span>) = <span class="number">-1</span> EINVAL (Invalid argument)</span><br><span class="line">rt_sigprocmask(SIG_UNBLOCK, [ABRT], <span class="literal">NULL</span>, <span class="number">8</span>) = <span class="number">0</span></span><br><span class="line">tgkill(<span class="number">14189</span>, <span class="number">14189</span>, SIGABRT)             = <span class="number">0</span></span><br><span class="line">--- SIGABRT (Aborted) @ <span class="number">0</span> (<span class="number">0</span>) ---</span><br><span class="line">Process <span class="number">14189</span> detached</span><br></pre></td></tr></table></figure><p>由以上信息可知，进程在执行某个管道<code>pipe</code>相关操作时被<code>kill</code>，通常是在执行<code>popen</code>函数会出现<code>pipe</code>调用。之后对源码<code>grep -rn popen</code>， 并结合<code>strace</code>打印的出错前的信息可以大致定位到可能出错的位置，然后通过添加<code>printf</code>打印<code>log</code>，根据重现时停止打印<code>log</code>的地方精确定位到源码出错位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.c</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">config_get</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">snprintf</span>(cmd, <span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>, <span class="string">"config get %s"</span>, name);</span><br><span class="line">    fp = popen(cmd, <span class="string">"r"</span>);   <span class="comment">// 出错位置</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，仅仅能判断出用户态的出错位置，但从此处代码尚无法明确出错的根本原因，还需抓取内核态的出错信息，此时便需要使用<code>GDB</code>对进程出错时系统生成的<code>coredump</code>文件进行分析了。</p><h2 id="编译gdb以及带symbols的程序"><a href="#编译gdb以及带symbols的程序" class="headerlink" title="编译gdb以及带symbols的程序"></a>编译gdb以及带symbols的程序</h2><p>在分析之前，需要被调试进程的二进制文件包含<code>GDB</code>分析所需的<code>symbols</code>，什么是<code>symbols</code>? 粗略的讲，就是一张嵌入待调试进程的二进制文件中的映射表，包含代码中的变量、函数名、行号等信息。详见<a href="https://www.tutorialspoint.com/gnu_debugger/gdb_debugging_symbols.htm" target="_blank" rel="noopener">GDB-Debugging Symbols</a></p><h3 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h3><p><code>OpenWrt</code>编译参数存于<code>.config</code>文件中，<code>OpenWrt</code>默认并未打开<code>gdb</code>功能以及<code>debug</code>调试功能，我们可以通过<code>make menuconfig</code>选择参数或者手动更改配置文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .config</span></span><br><span class="line">CONFIG_DEBUG=y <span class="comment"># 使能调试功能，启用后会给集成GDB调试所需的symbols</span></span><br><span class="line">CONFIG_NO_STRIP=y <span class="comment"># 禁用strip，防止程序代码被打乱</span></span><br><span class="line"><span class="comment">#CONFIG_USE_SSTRIP=y</span></span><br><span class="line">CONFIG_TOOLCHAINOPTS=y <span class="comment"># 使能交叉工具链可选功能，这是编译GDB功能的总开关</span></span><br></pre></td></tr></table></figure><p>配置完成后重新编译交叉工具链，用以得到<code>gdb</code>工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make toolchain/&#123;compile,install&#125; V=s</span><br></pre></td></tr></table></figure><h3 id="编译单个模块-package"><a href="#编译单个模块-package" class="headerlink" title="编译单个模块(package)"></a>编译单个模块(package)</h3><p>参考<code>OpenWrt</code>官方<a href="https://wiki.openwrt.org/doc/devel/gdb?s[]=gdb" target="_blank" rel="noopener">文档</a>，可以使用以下指令单独为一个模块添加<code>debug symbols</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make package/traffic_meter/&#123;clean,compile,install&#125; V=99 CONFIG_DEBUG=y</span><br></pre></td></tr></table></figure><h3 id="完整编译"><a href="#完整编译" class="headerlink" title="完整编译"></a>完整编译</h3><p>如果将全局<code>debug</code>开启，并进行完整编译，这会导致<code>image</code>过大（&gt;300M）而编译失败。当然啦，编译失败不要紧，因为只是没有生成<code>image</code>文件，但是所需模块和动态链接库都能正常编译完成，并不影响<code>coredump</code>文件的分析。</p><p>不过完整编译太过费时，不推荐，还是对需要调试的单个模块进行编译比较快捷和方便。</p><h2 id="获取coredump"><a href="#获取coredump" class="headerlink" title="获取coredump"></a>获取coredump</h2><p>得到了带有<code>symbols</code>的二进制文件，以及交叉编译得到的<code>gdb</code>调试工具，剩下的就是获取<code>coredump</code>文件</p><h3 id="配置coredump参数"><a href="#配置coredump参数" class="headerlink" title="配置coredump参数"></a>配置coredump参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/profile</span><br><span class="line"><span class="comment"># 在文件末尾添加以下指令，以取消对coredump文件大小的限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置coredump文件命名格式</span></span><br><span class="line"><span class="comment"># e - process name; p - pid; t - time</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"core-%e-%p-%t"</span> &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><p>关于<code>coredump</code>文件格式的参数说明，可以参考<a href="http://man7.org/linux/man-pages/man5/core.5.html" target="_blank" rel="noopener">core dump file</a></p><h3 id="重现bug并获取coredump文件"><a href="#重现bug并获取coredump文件" class="headerlink" title="重现bug并获取coredump文件"></a>重现bug并获取coredump文件</h3><p>首先重现bug，然后找到<code>coredump</code>文件，并传至编译服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line">$ find . -name <span class="string">"core-*"</span> |grep traffic_meter</span><br><span class="line">./sbin/core-traffic_meter-14189-2895</span><br><span class="line">$ <span class="built_in">cd</span> sbin</span><br><span class="line">$ tftp -pl core-traffic_meter-14189-2895 192.168.1.10</span><br></pre></td></tr></table></figure><h2 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>下面是常用的几个<code>gdb</code>指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span></span><br><span class="line">(gdb) <span class="built_in">where</span></span><br><span class="line">(gdb) bt    <span class="comment"># backtrace</span></span><br><span class="line">(gdb) list  <span class="comment"># [l] 显示当前调试处的相关代码</span></span><br><span class="line">(gdb) up [num]  <span class="comment"># 向上跳转1个或num个bt</span></span><br><span class="line">(gdb) down [num]    <span class="comment"># 向下跳转1个或num个bt</span></span><br><span class="line">(gdb) <span class="built_in">print</span> [variable]  <span class="comment"># [p] 打印当前调试处相关变量的值</span></span><br></pre></td></tr></table></figure><h3 id="调试实例"><a href="#调试实例" class="headerlink" title="调试实例"></a>调试实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> repo.git</span><br><span class="line">$ <span class="built_in">cd</span> build_dir/target-arm_v7=a_uClibc-0.9.33.2_eabi/root-ipq806x</span><br><span class="line">$ ../../toolchain-arm_v7-a_gcc-4.6-linaro_uClibc-0.9.33.2_eabi/gdb-linaro-7.2-2011.03-0/gdb/gdb sbin/traffic_meter ~/core-traffic_meter-14189-28959-2895</span><br><span class="line">GNU gdb (Linaro GDB) 7.2-2011.03-0</span><br><span class="line">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"--host=x86_64-linux-gnu --target=arm-openwrt-linux-uclibcgnueabi"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/sbin/traffic_meter...done.</span><br><span class="line"></span><br><span class="line">warning: <span class="built_in">exec</span> file is newer than core file.</span><br><span class="line">[New Thread 14189]</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libgcc_s.so.1...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libgcc_s.so.1</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libc.so.0...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/libc.so.0</span><br><span class="line">Reading symbols from /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/ld-uClibc.so.0...done.</span><br><span class="line">Loaded symbols <span class="keyword">for</span> /home/litreily/R7500v2-Fortify.git/build_dir/target-arm_v7-a_uClibc-0.9.33.2_eabi/root-ipq806x/lib/ld-uClibc.so.0</span><br><span class="line">Core was generated by `traffic_meter -w brwan -p ppp0 -m /dev/mtd15`.</span><br><span class="line">Program terminated with signal 6, Aborted.</span><br><span class="line"><span class="comment">#0  0x402fb4fc in raise (sig=6) at libpthread/nptl/sysdeps/unix/sysv/linux/raise.c:67</span></span><br><span class="line">67        int res = INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  0x402fb4fc in raise (sig=6) at libpthread/nptl/sysdeps/unix/sysv/linux/raise.c:67</span></span><br><span class="line"><span class="comment">#1  0x402f579c in abort () at libc/stdlib/abort.c:89</span></span><br><span class="line"><span class="comment">#2  0x402f5060 in __malloc_consolidate (av=0x4030b3e8) at libc/stdlib/malloc-standard/free.c:234</span></span><br><span class="line"><span class="comment">#3  __malloc_consolidate (av=0x4030b3e8) at libc/stdlib/malloc-standard/free.c:170</span></span><br><span class="line"><span class="comment">#4  0x402f4854 in malloc (bytes=&lt;value optimized out&gt;) at libc/stdlib/malloc-standard/malloc.c:908</span></span><br><span class="line"><span class="comment">#5  0x402d6250 in _stdio_fopen (fname_or_mode=&lt;value optimized out&gt;, mode=&lt;value optimized out&gt;, stream=0x8ca0e8, filedes=8) at libc/stdio/_fopen.c:177</span></span><br><span class="line"><span class="comment">#6  0x402d4fb4 in popen (command=0x8 &lt;Address 0x8 out of bounds&gt;, modes=0xfc08 "r") at libc/stdio/popen.c:83</span></span><br><span class="line"><span class="comment">#7  0x0000f488 in config_get (name=&lt;value optimized out&gt;) at config.c:11</span></span><br><span class="line"><span class="comment">#8  0x0000ed48 in get_bogus_time_region (ct=60744, st=0xbe9f8994, btr=0xbe9f896c) at util.c:184</span></span><br><span class="line"><span class="comment">#9  0x0000e8f0 in get_traffic_from_flash (tfm=0xbe9f8738, ct=2894) at spi_flash.c:912</span></span><br><span class="line"><span class="comment">#10 0x0000ccb0 in restart_traffic_counter (tfm=0xbe9f8738, ct=52400) at trafficmeter.c:976</span></span><br><span class="line"><span class="comment">#11 0x0000a1f4 in main (argc=&lt;value optimized out&gt;, argv=&lt;value optimized out&gt;) at trafficmeter.c:1798</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><blockquote><p><strong>BackTrace (bt) 输出</strong>  </p><p>#num memory_addr in function (arg1=val1, arg2=val2,…) at file.c:line<br><code>bt</code>输出前面的编号是进程执行时的压栈顺序，编号越小越底层。编号后面紧跟的是内存地址，从地址大小可以看出哪些是内核调用，哪些是用户调用。  </p><p><strong>注意：</strong>由于编译器优化缘故，某些变量会显示<code>value optimized out</code>，如果想获取真实值，需要在编译时添加<code>-O0</code>，用以禁用编译器优化</p></blockquote><p>从<code>bt</code>结果可以看出，进程是在执行动态内存分配函数<code>malloc</code>时检测到错误，并执行<code>abort</code>函数触发<code>SIGABRT</code>信号后退出的。那就可以确定是内存问题，多半是内存多次释放或是未释放导致的。</p><p>据此线索，检查代码中与内存分配和释放相关的部分，最终调试发现是某处代码引用指针错误，并在之后使用<code>free</code>释放内存，而该指针指向的内存在多处地方被重新分配和释放，导致内存出现不可预料的问题。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在分析<code>coredump</code>时，需要注意以下几点：</p><ol><li>交叉编译后的<code>GDB</code>可执行文件位于<code>build_dir/toolchain-arm_v7-a_gcc-4.6-linaro_uClibc-0.9.33.2_eabi/gdb-linaro-7.2-2011.03-0/gdb/gdb</code></li><li>注意当前调试路径最好是在编译完成后的根目录<code>root-ipq806x</code>, 否则<code>GDB</code>可能无法找到动态链接库的位置，从而无法找到库函数的<code>symbols</code>，此时可能出现以下情况</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">warning: <span class="built_in">exec</span> file is newer than core file.</span><br><span class="line">[New Thread 14189]</span><br><span class="line"></span><br><span class="line">warning: Could not load shared library symbols <span class="keyword">for</span> 3 libraries, e.g. /lib/libgcc_s.so.1.</span><br><span class="line">Use the <span class="string">"info sharedlibrary"</span> <span class="built_in">command</span> to see the complete listing.</span><br><span class="line">Do you need <span class="string">"set solib-search-path"</span> or <span class="string">"set sysroot"</span>?</span><br><span class="line"></span><br><span class="line">warning: Unable to find dynamic linker breakpoint <span class="keyword">function</span>.</span><br><span class="line">GDB will be unable to debug shared library initializers</span><br><span class="line">and track explicitly loaded dynamic code.</span><br><span class="line">Core was generated by `traffic_meter -w brwan -p ppp0 -m /dev/mtd15`.</span><br><span class="line">Program terminated with signal 6, Aborted.</span><br><span class="line"><span class="comment">#0  0x402fb4fc in ?? ()</span></span><br><span class="line">Setting up the environment <span class="keyword">for</span> debugging gdb.</span><br><span class="line">Function <span class="string">"internal_error"</span> not defined.</span><br><span class="line">Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]</span><br><span class="line">Function <span class="string">"info_command"</span> not defined.</span><br><span class="line">Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]</span><br><span class="line">.gdbinit:8: Error <span class="keyword">in</span> sourced <span class="built_in">command</span> file:</span><br><span class="line">Argument required (one or more breakpoint numbers).</span><br><span class="line">(gdb) info sharedlibrary</span><br><span class="line">From        To          Syms Read   Shared Object Library</span><br><span class="line">                        No          /lib/libgcc_s.so.1</span><br><span class="line">                        No          /lib/libc.so.0</span><br><span class="line">                        No          /lib/ld-uClibc.so.0</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  0x402fb4fc in ?? ()</span></span><br><span class="line"><span class="comment">#1  0x402f579c in ?? ()</span></span><br><span class="line"><span class="comment">#2  0x402f579c in ?? ()</span></span><br><span class="line">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span><br></pre></td></tr></table></figure><p>若出现以上情况，我们得不到任何有效信息，此时可以通过提示的<code>set solib-search-path</code>或<code>set sysroot</code>手动设置库路径或根目录路径。但我仍建议在调试前<code>cd</code>到根目录。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://blog.51cto.com/terrytong914/1905041" target="_blank" rel="noopener">Linux coredump解决流程</a></li><li><a href="https://wiki.openwrt.org/doc/devel/gdb?s[]=gdb" target="_blank" rel="noopener">GNU Debugger</a></li><li><a href="https://www.tutorialspoint.com/gnu_debugger/gdb_debugging_symbols.htm" target="_blank" rel="noopener">GDB - Debugging Symbols</a></li><li><a href="http://man7.org/linux/man-pages/man5/core.5.html" target="_blank" rel="noopener">Core dump file</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日调试一个&lt;code&gt;bug&lt;/code&gt;，一个守护进程在特定情况下执行一段程序后便会挂掉。为了分析&lt;code&gt;bug&lt;/code&gt;产生原因，本人使用了printf, strace追踪，gdb调试等诸多调试工具和测试方法。本文对于在&lt;code&gt;OpenWrt&lt;/code&gt;
      
    
    </summary>
    
      <category term="嵌入式" scheme="http://www.litreily.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="C/C++" scheme="http://www.litreily.top/tags/C-C/"/>
    
      <category term="linux" scheme="http://www.litreily.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网页模板pug基本语法</title>
    <link href="http://www.litreily.top/2018/08/31/pug-synax/"/>
    <id>http://www.litreily.top/2018/08/31/pug-synax/</id>
    <published>2018-08-31T12:24:10.000Z</published>
    <updated>2019-01-22T12:50:59.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Pug – robust, elegant, feature rich template engine for Node.js</p></blockquote><p><code>pug</code>原名<code>jade</code>,因版权问题更名为<code>pug</code>,即哈巴狗。与<code>hexo</code>默认模块<code>ejs</code>一样，<code>pug</code>也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题<code>manupassant</code>也使用了<code>pug</code>。</p><a id="more"></a><p>本文针对<code>Hexo</code>中使用<code>pug</code>的情况为例，说明其基本语法。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common install</span></span><br><span class="line">npm install pug</span><br><span class="line"></span><br><span class="line"><span class="comment"># install for hexo blog</span></span><br><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>pug</code>不同于<code>html</code>，前者不需要标签的开和闭，如<code>html</code>的<code>&lt;p&gt;Demo&lt;/p&gt;</code>，在<code>pug</code>使用<code>p Demo</code>即可。</p><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p><code>pug</code>对空格敏感，有点类似<code>python</code>对制表符<code>tab</code>敏感。<code>pug</code>使用空格作为缩进符，当然用soft tab也可行。同一级标签需保证左对齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure><p>渲染结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hellow, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, pug.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>pug</code>使用<code>//-</code>或<code>//</code>对代码进行注释，前者注释内容不出现在渲染后的<code>html</code>文件中，后者反之。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//- html中不包含此行</span><br><span class="line">// html中会包含此行</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>pug</code>将标签属性存放于括号<code>()</code>内，多个属性之间以逗号或空格分隔。此外，对于标签的<code>id</code>和<code>class</code>，<code>pug</code>使用<code>#</code>紧跟标签<code>id</code>,使用<code>.</code>紧跟标签<code>class</code>，可以同时设置多个<code>class</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1#title Test title</span><br><span class="line">img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>Test title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"class1 class2"</span> <span class="attr">src</span>=<span class="string">"/test.png"</span> <span class="attr">alt</span>=<span class="string">"test"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p>为了方便代码复用，<code>pug</code>提供了<code>include</code>包含功能，以下代码会将<code>_partial</code>目录下的<code>head.pug</code>文件内容包含到当前调用的位置。有点<code>C/C++</code>中内联函数的意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&apos;en&apos;)</span><br><span class="line">    include _partial/head.pug</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>下面是一个简单的<code>base</code>模板，通过<code>block</code>定义了页面头部<code>head</code>和内容<code>body</code>。块<code>block</code>有点类似<code>C/C++</code>的抽象函数，需要在继承者中完成定义，填充具体内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br></pre></td></tr></table></figure><p>以下文件使用<code>extends</code>继承以上模板，通过<code>block</code>覆盖或替换原有块<code>block</code>。当然，继承者也可以在原有基础上继续扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//- index.pug</span><br><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block title</span><br><span class="line">    title &quot;Test title&quot;</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p><code>pug</code>中通过<code>- var name = value</code>的形式定义变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- var intData = 100</span><br><span class="line">- var boolData = false</span><br><span class="line">- var stringData = &apos;Test&apos;</span><br><span class="line">p.int= intData</span><br><span class="line">p.bool= boolData</span><br><span class="line">p.stringData= stringData</span><br></pre></td></tr></table></figure><blockquote><p>需注意的是，在引用变量时，需要在引用位置加上<code>=</code>号，否则会默认将变量名当成普通字符串使用。</p></blockquote><p>如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用<code>#{}</code>，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- var girl = &apos;Lily&apos;</span><br><span class="line">- var boy = &apos;Jack&apos;</span><br><span class="line">p #&#123;girl&#125; is so beautiful!</span><br><span class="line">p And #&#123;boy&#125; is handsome.</span><br></pre></td></tr></table></figure><h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><p><code>pug</code>的条件语句与其它语言类似，均是如下这般：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- var A = &#123;value: &apos;Test&apos;&#125;</span><br><span class="line">- var B = true</span><br><span class="line">if A.value</span><br><span class="line">    p= A.value</span><br><span class="line">else if B</span><br><span class="line">    p= B</span><br><span class="line">else</span><br><span class="line">    p nothing</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p><code>pug</code>中使用<code>each</code>和<code>while</code>实现循环迭代，<code>each</code>可以返回当前所在项的索引值，默认从0开始计数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//- each</span><br><span class="line">ol</span><br><span class="line">    each item in [&apos;Sun&apos;, &apos;Mon&apos;, &apos;Tus&apos;, &apos;Wen&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;]</span><br><span class="line">        li= item</span><br><span class="line"></span><br><span class="line">//- get index of each</span><br><span class="line">- var week = [&apos;Sun&apos;, &apos;Mon&apos;, &apos;Tus&apos;, &apos;Wen&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;]</span><br><span class="line">ol</span><br><span class="line">    each item, index in week</span><br><span class="line">        li= index + &apos;:&apos; + item</span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>0:Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1:Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2:Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3:Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4:Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5:Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>6:Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>while</code>调用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//- while</span><br><span class="line">- var day = 1</span><br><span class="line">ul</span><br><span class="line">    while day &lt; 7</span><br><span class="line">        li= day++</span><br></pre></td></tr></table></figure><h3 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h3><p><code>mixin</code>名曰<strong>混入</strong>，类似其它编程语言中的<strong>函数</strong>，也是为了代码复用，可带参数或不带参数，定义方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin menu-item(href, name)</span><br><span class="line">    li</span><br><span class="line">        span.dot ●</span><br><span class="line">        a(href=href)= name</span><br></pre></td></tr></table></figure><p>其中，<code>menu-item</code>为调用时所用名称，可认为是函数名，<code>href</code>及<code>name</code>是参数。同上<a href="#定义变量">定义变量</a>所说，<code>a(href=href)= name</code>中第二个<code>=</code>是为了将后面的<code>name</code>当作参数来处理，而不是当作字符串”name”来处理。</p><p>调用<code>mixin</code>定义的代码块，需通过<code>+</code>号紧跟<code>mixin</code>名称及参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+menu-item(&apos;/Archives&apos;,&apos;Archives&apos;)</span><br><span class="line">+menu-item(&apos;/About&apos;,&apos;About&apos;)</span><br></pre></td></tr></table></figure><p><code>mixin</code>之所以称为混入，是因为其语法不局限于函数调用，在<code>mixin</code>可以使用块<code>block</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mixin print(post)</span><br><span class="line">    if block</span><br><span class="line">        block</span><br><span class="line">    else</span><br><span class="line">        p= post</span><br><span class="line"></span><br><span class="line">+print(&quot;no block&quot;)</span><br><span class="line">+print(&quot;&quot;)</span><br><span class="line">    div.box</span><br><span class="line">        p this is the content of block</span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>no block<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is the content of block<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>注意以下<code>pug</code>语句中第一行的<code>.</code>号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script(type=&apos;text/javascript&apos;).</span><br><span class="line">    var data = &quot;Test&quot;</span><br><span class="line">    var enable = true</span><br><span class="line">    if enable</span><br><span class="line">        console.log(data)</span><br><span class="line">    else</span><br><span class="line">        console.log(&apos;nothing&apos;)</span><br></pre></td></tr></table></figure><p>↓</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">"Test"</span></span><br><span class="line">    <span class="keyword">var</span> enable = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> enable</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nothing'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>对于简单脚本，使用<code>pug</code>尚可，复杂的还是单独写到<code>.js</code>文件中，然后通过<code>pug</code>引用方便一些，引用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script(type=&apos;text/javascript&apos;, src=&apos;/path/to/js&apos;)</span><br><span class="line"></span><br><span class="line">//- with hexo function url_for</span><br><span class="line">script(type=&apos;text/javascript&apos;, src=url_for(theme.js) + &apos;/ready.js&apos;)</span><br></pre></td></tr></table></figure><h3 id="hexo-相关"><a href="#hexo-相关" class="headerlink" title="hexo 相关"></a>hexo 相关</h3><p>在<code>hexo</code>主题中使用<code>pug</code>时，可以通过使用<code>hexo</code>提供的全局变量<code>config</code>，<code>theme</code>来分别调用博客根目录下<code>_config.yml</code>文件中的参数以及主题根目录下<code>_config.yml</code>文件中的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//- blog config</span><br><span class="line">p= config.description</span><br><span class="line"></span><br><span class="line">//- theme config</span><br><span class="line">p= theme.title</span><br></pre></td></tr></table></figure><p>当然，<code>pug</code>中可以直接使用<code>hexo</code>提供的其它全局变量及辅助函数，使用方法详见<code>hexo</code>的<a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">文档</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//- head.pug</span><br><span class="line">head</span><br><span class="line">    meta(http-equiv=&apos;content-type&apos;, content=&apos;text/html; charset=utf-8&apos;)</span><br><span class="line">    meta(content=&apos;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&apos;, name=&apos;viewport&apos;)</span><br><span class="line">    meta(content=&apos;yes&apos;, name=&apos;apple-mobile-web-app-capable&apos;)</span><br><span class="line">    meta(content=&apos;black-translucent&apos;, name=&apos;apple-mobile-web-app-status-bar-style&apos;)</span><br><span class="line">    meta(content=&apos;telephone=no&apos;, name=&apos;format-detection&apos;)</span><br><span class="line">    meta(name=&apos;description&apos;, content=config.description)</span><br><span class="line">    block title</span><br><span class="line">    link(rel=&apos;stylesheet&apos;, type=&apos;text/css&apos;, href=url_for(theme.css) + &apos;/style.css&apos; + &apos;?v=&apos; + theme.version)</span><br><span class="line">    link(rel=&apos;Shortcut Icon&apos;, type=&apos;image/x-icon&apos;, href=url_for(&apos;favicon.png&apos;))</span><br><span class="line">    script(type=&apos;text/javascript&apos;, src=&apos;//cdn.bootcss.com/jquery/3.3.1/jquery.min.js&apos;)</span><br><span class="line">    block more</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">doctype html</span><br><span class="line">html(lang=&apos;en&apos;)</span><br><span class="line">    include _partial/head.pug</span><br><span class="line">    block more</span><br><span class="line">        link(rel=&apos;stylesheet&apos;, type=&apos;text/css&apos;, href=url_for(theme.plugins) + &apos;/prettify/doxy.css&apos;)</span><br><span class="line">        script(type=&apos;text/javascript&apos;, src=url_for(theme.js) + &apos;/ready.js&apos; + &apos;?v=&apos; + theme.version, async)</span><br><span class="line">    </span><br><span class="line">    //- body</span><br><span class="line">    body: #container.box</span><br><span class="line">        .h-wrapper</span><br><span class="line">            include _partial/nav-menu.pug</span><br><span class="line">        // article content</span><br><span class="line">        block content</span><br><span class="line"></span><br><span class="line">        include _partial/footer.pug</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li><code>theme.*</code>为主题配置文件<code>_config.yml</code>中的参数</li><li><code>url_for</code>为<code>hexo</code>提供的用于查找资源路径的函数</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>pug</code>提供了包含，继承，Mixin等多种方式用于代码复用，语法简洁易懂，除了初学时需花费一些时间学习各种标点符号的含义外，其它倒也没有太大困难。</p><p>当然啦，<code>pug</code>还有许多其它特性，但就我目前使用情况而言，以上这些便已足够。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pugjs.org/zh-cn/api/getting-started.html" target="_blank" rel="noopener">https://pugjs.org/zh-cn/api/getting-started.html</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Pug – robust, elegant, feature rich template engine for Node.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;pug&lt;/code&gt;原名&lt;code&gt;jade&lt;/code&gt;,因版权问题更名为&lt;code&gt;pug&lt;/code&gt;,即哈巴狗。与&lt;code&gt;hexo&lt;/code&gt;默认模块&lt;code&gt;ejs&lt;/code&gt;一样，&lt;code&gt;pug&lt;/code&gt;也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题&lt;code&gt;manupassant&lt;/code&gt;也使用了&lt;code&gt;pug&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://www.litreily.top/categories/Web/"/>
    
    
      <category term="pug" scheme="http://www.litreily.top/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>Python实现快排及其可视化</title>
    <link href="http://www.litreily.top/2018/07/07/quick-sort/"/>
    <id>http://www.litreily.top/2018/07/07/quick-sort/</id>
    <published>2018-07-07T11:00:00.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>最近装了个<code>Anaconda</code>，准备学习一下数据可视化。本着三天打鱼两天装死的心态，重新抱起崭新的<strong>算法</strong>书，认真学起了快排算法。学完后用<code>Python</code>实现了一遍基本的快排，然后使用<code>matplotlib</code>进行动态绘图，最后使用<code>imageio</code>生成GIF图片。谨以此文以记之！</p><h2 id="快排基本原理"><a href="#快排基本原理" class="headerlink" title="快排基本原理"></a>快排基本原理</h2><p><strong>快排</strong>采用和归并排序相同的分而治之的思想，将待排序数组分成左右两个子数组，对两部分子数组独立排序。当子数组均有序时，整个数组也就有序了。</p><p>排序步骤如下：</p><ol><li>将原始数组<code>data</code>随机打乱，以消除对输入的依赖（本步可选）</li><li>选择数组的首个元素<code>data[0]</code>作为切分元素<code>v</code></li><li>切分数组<ul><li>从左往右找到第一个大于切分元素<code>v</code>的元素<code>data[i]</code></li><li>从右到左找到第一个小于切分元素<code>v</code>的元素<code>data[j]</code></li><li>交换<code>data[i]</code>与<code>data[j]</code></li><li>重复以上三步直到<code>i&gt;=j</code></li><li>交换<code>data[j]</code>与切分元素<code>data[0]</code></li></ul></li><li>递归调用，对切分后的左侧子数组进行排序</li><li>递归调用，对切分后的右侧子数组进行排序</li></ol><p>文字性的描述总是那么苍白无力，但还好也能说明一些问题。可以看出，快排的关键在于<strong>切分</strong>，切分后的数组应该满足：</p><ol><li>切分元素的位置（设为<code>j</code>）已经固定</li><li><code>data[lo]</code>到<code>data[j-1]</code>区间内的元素均不大于切分元素<code>data[j]</code></li><li><code>data[j+1]</code>到<code>data[hi]</code>区间内的元素均不小于切分元素<code>data[j]</code></li></ol><p>其中<code>data[lo]</code>代表数组或子数组的首个元素，<code>data[hi]</code>代表数组或子数组的末尾元素。</p><p>简单点说，就是先找一个参考点，把小于这个参考点的元素都扔到它的左边，大于这个参考点的数都扔到它的右边。这样一来，参考点的位置就固定了，然后对左边的数据和右边的数据各自再递归的扔几遍，等所有子数组都扔完了，整个数组也就有序了。</p><p>不过需要注意的是，扔的时候不是随便扔，是把从左往右找到的第一个大于参考点的值和从右往左找到的第一个小于参考点的值进行替换。</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><blockquote><p>Talk is cheap, show me the code</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(data)</span>:</span></span><br><span class="line">    __sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    key = __partition(data, lo, hi)</span><br><span class="line">    __sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">    __sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(data, lo, hi)</span>:</span></span><br><span class="line">    <span class="string">'''partition array'''</span></span><br><span class="line">    i = lo</span><br><span class="line">    j = hi</span><br><span class="line">    v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">            <span class="keyword">if</span> i == hi:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">        <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">            <span class="keyword">if</span> j == lo:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        __swap(data, i, j)</span><br><span class="line">    __swap(data, lo, j)</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><p>以上便是参考<code>Algorithms</code>书上<code>java</code>代码的<code>Python</code>实现。下面是个使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    random.shuffle(data)</span><br><span class="line">    print(data)</span><br><span class="line">    sort(data)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python quick.py</span><br><span class="line">[4, 9, 1, 13, 18, 5, 6, 14, 2, 16, 7, 12, 15, 8, 11, 17, 0, 19, 10, 3]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></pre></td></tr></table></figure><h2 id="快排优化"><a href="#快排优化" class="headerlink" title="快排优化"></a>快排优化</h2><p>快排有很多优化算法，目前我只习得一种最简单的，可以将切分函数两个内部<code>while</code>循环中的<code>if</code>语句去掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first one</span></span><br><span class="line"><span class="keyword">if</span> i == hi:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># second one</span></span><br><span class="line"><span class="keyword">if</span> j == lo:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这两个判断都是为了防止访问数组越界而设，其实第二个是完全没有必要加的，因为<code>lo</code>对应的就是切分元素本身，自己肯定不会小于自己，所以这个判断完全是多余的；对于第一个，想要去掉的话，只要保证数组最后一个元素最大即可，实现上只要在执行排序函数之前将最大值换至最后即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__swap(data, data.index(max(data)), len(data) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>本文后续的<code>code</code>会将第二个判断去掉，但第一个的还保留着，毕竟把最大值直接挪到最后总感觉怪怪的，在可视化的时候也会牺牲一点随机性。</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>为了方便代码的阅读和管理,我将快排代码封装成<code>QuickSort</code>类,同时加入变量<code>swap_times</code>用于记录总的数据交换次数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''Quick sort algorithm'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.swap_times = <span class="number">0</span></span><br><span class="line">        <span class="comment"># set the largest element to the end</span></span><br><span class="line">        <span class="comment"># self.__swap(data, data.index(max(data)), len(data) - 1)</span></span><br><span class="line">        self.__sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.swap_times</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">        self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        key = self.__partition(data, lo, hi)</span><br><span class="line">        self.__sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">        self.__sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="string">'''partition array'''</span></span><br><span class="line">        i = lo</span><br><span class="line">        j = hi</span><br><span class="line">        v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">                <span class="comment"># below judge can dropped if the end element is the largest</span></span><br><span class="line">                <span class="keyword">if</span> i == hi:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">            <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.__swap(data, i, j)</span><br><span class="line">        self.__swap(data, lo, j)</span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h2 id="打印数据交换记录"><a href="#打印数据交换记录" class="headerlink" title="打印数据交换记录"></a>打印数据交换记录</h2><p>为了了解排序过程中数据交换,可以在<code>__swap</code>函数中打印每一次交换后的数组。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">    self.debug = debug</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">    data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">    self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.debug:</span><br><span class="line">        print(<span class="string">'&#123;0&#125; swap(&#123;1&#125;, &#123;2&#125;)'</span>.format(data, lo, hi))</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    random.seed(time.time())</span><br><span class="line">    data = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    random.shuffle(data)</span><br><span class="line"></span><br><span class="line">    qs = QuickSort(debug=<span class="keyword">True</span>)</span><br><span class="line">    swap_times, = qs.sort(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  algorithm git:(master) ✗ ./main.py</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 18, 17, 7, 8, 13, 15, 0, 9, 16, 6, 5, 19] swap(4, 19)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 17, 7, 8, 13, 15, 0, 9, 16, 6, 18, 19] swap(8, 18)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 15, 0, 9, 16, 17, 18, 19] swap(9, 17)</span><br><span class="line">[14, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 0, 15, 16, 17, 18, 19] swap(13, 15)</span><br><span class="line">[0, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(0, 14)</span><br><span class="line">[0, 3, 11, 10, 4, 1, 2, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(0, 0)</span><br><span class="line">[0, 3, 2, 10, 4, 1, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(2, 6)</span><br><span class="line">[0, 3, 2, 1, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(3, 5)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(1, 3)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(1, 1)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 11, 12, 5, 6, 7, 8, 13, 9, 14, 15, 16, 17, 18, 19] swap(4, 4)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 9, 12, 5, 6, 7, 8, 13, 11, 14, 15, 16, 17, 18, 19] swap(6, 13)</span><br><span class="line">[0, 1, 2, 3, 4, 10, 9, 8, 5, 6, 7, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(7, 11)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 9, 8, 5, 6, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 10)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 6, 8, 5, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(6, 9)</span><br><span class="line">[0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(7, 8)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 7)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(5, 5)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 17, 18, 19] swap(8, 8)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19] swap(12, 13)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(11, 12)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(15, 15)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(16, 16)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(17, 17)</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] swap(18, 18)</span><br></pre></td></tr></table></figure><p>根据打印结果可以逐步分析快排算法的执行过程，明确知晓每一次交换的数据。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>打印log固然可以分析算法的执行流程，但是不够直观，所以想着用可视化工具进一步处理，以动态图片形式显示快排过程。为此，只需在交换数据的函数<code>__swap</code>中使用<code>matplotlib</code>的柱状图绘制交换完成后的数组即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.save_fig = save_fig</span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line">        <span class="comment"># open interactive mode of matplot</span></span><br><span class="line">        plt.ion()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            self.path = <span class="string">'./images/&#123;0&#125;'</span>.format(time.strftime(<span class="string">'%Y%m%d_%H%M%S'</span>))</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.__plot_figure(data, lo, hi, show_swap=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__plot_figure</span><span class="params">(self, data, lo=<span class="number">0</span>, hi=<span class="number">0</span>, show_swap=False)</span>:</span></span><br><span class="line">        <span class="string">'''plot and save figure'''</span></span><br><span class="line">        self.ax.clear()</span><br><span class="line">        self.ax.set_title(<span class="string">'data quicksort'</span>)</span><br><span class="line">        self.ax.bar(range(len(data)), data, label=<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">if</span> show_swap:</span><br><span class="line">            self.ax.bar([lo, hi], [data[lo], data[hi]], color=<span class="string">'red'</span>, label=<span class="string">'swap'</span>)</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.pause(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            plt.savefig(<span class="string">'&#123;0&#125;/&#123;1&#125;.png'</span>.format(self.path, self.swap_times))</span><br></pre></td></tr></table></figure><p>需要注意的几点是：</p><ol><li><code>matplotlib</code>具有两种绘图模式，阻塞(<code>block</code>)模式和交互(<code>interactive</code>)模式，阻塞模式必须等待当前绘图窗口关闭方才执行后续程序，而交互模式则无需等待。为了动态显示排序过程，自然选择交互模式，所以初始化时调用<code>ion()</code>函数打开交互模式</li><li>相比于其它样式的图表，使用柱状图<code>bar</code>能够更直观显示数据大小及变化过程</li><li>在每次重绘图表时，需要清空原有图表</li><li>必须调用<code>pause</code>函数予以等待，否则可能出现无法显示图表的情况，等待时长自定</li><li>为了突出显示每次交换的两个数据，可以使用红色图表单独绘制交换数据</li><li>使用<code>matplotlib</code>函数库中的<code>savefig</code>可以将图表为至本地图片文件，为后续生成<code>gif</code>图片做准备</li></ol><p><img src="/assets/algorithm/dataBar.png" alt="data bar"></p><h2 id="生成GIF动图"><a href="#生成GIF动图" class="headerlink" title="生成GIF动图"></a>生成GIF动图</h2><p>有了前面保存好的图片，使用<code>imageio</code>库的<code>append</code>函数及<code>mimsave</code>即可生成<code>gif</code>图片。图片间隔时间由<code>mimsave</code>函数的<code>duration</code>参数决定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">from</span> quick_sort <span class="keyword">import</span> QuickSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_gif</span><span class="params">(path, gif_name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> len(os.listdir(path))==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> range(len(os.listdir(path))):</span><br><span class="line">        file_path = join(path, <span class="string">'&#123;&#125;.png'</span>.format(file_name))</span><br><span class="line">        images.append(imageio.imread(file_path))</span><br><span class="line">    imageio.mimsave(join(path, gif_name), images, <span class="string">'GIF'</span>, duration=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/algorithm/quickSort.gif" alt="quick sort"></p><p>至此，便完成了快排的算法实现及其可视化。</p><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><p>代码已上传至<a href="https://github.com/Litreily/Python-demos.git" target="_blank" rel="noopener">github Python-demos</a> <code>algorithm</code>目录</p><ul><li>quick_sort.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''Quick sort algorithm'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debug=False, save_fig=False)</span>:</span></span><br><span class="line">        self.debug = debug</span><br><span class="line">        self.save_fig = save_fig</span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line">        plt.ion()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            self.path = <span class="string">'./images/&#123;0&#125;'</span>.format(time.strftime(<span class="string">'%Y%m%d_%H%M%S'</span>))</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.swap_times = <span class="number">0</span></span><br><span class="line">        self.__plot_figure(data)</span><br><span class="line">        <span class="comment"># set the largest element to the end</span></span><br><span class="line">        <span class="comment"># self.__swap(data, data.index(max(data)), len(data) - 1)</span></span><br><span class="line">        self.__sort(data, <span class="number">0</span>, len(data) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.swap_times, self.path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swap</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        data[lo], data[hi] = data[hi], data[lo]</span><br><span class="line">        self.swap_times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            print(<span class="string">'\t&#123;0&#125; swap(&#123;1&#125;, &#123;2&#125;)'</span>.format(data, lo, hi))</span><br><span class="line">        </span><br><span class="line">        self.__plot_figure(data, lo, hi, show_swap=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__plot_figure</span><span class="params">(self, data, lo=<span class="number">0</span>, hi=<span class="number">0</span>, show_swap=False)</span>:</span></span><br><span class="line">        <span class="string">'''plot and save figure'''</span></span><br><span class="line">        self.ax.clear()</span><br><span class="line">        self.ax.set_title(<span class="string">'data quicksort'</span>)</span><br><span class="line">        self.ax.bar(range(len(data)), data, label=<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">if</span> show_swap:</span><br><span class="line">            self.ax.bar([lo, hi], [data[lo], data[hi]], color=<span class="string">'red'</span>, label=<span class="string">'swap'</span>)</span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.pause(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.save_fig:</span><br><span class="line">            plt.savefig(<span class="string">'&#123;0&#125;/&#123;1&#125;.png'</span>.format(self.path, self.swap_times))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sort</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        key = self.__partition(data, lo, hi)</span><br><span class="line">        self.__sort(data, lo, key - <span class="number">1</span>)</span><br><span class="line">        self.__sort(data, key + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(self, data, lo, hi)</span>:</span></span><br><span class="line">        <span class="string">'''partition array'''</span></span><br><span class="line">        i = lo</span><br><span class="line">        j = hi</span><br><span class="line">        v = data[lo] <span class="comment"># slicing element</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># find one element that larger than v scan from left to right(→)</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> data[i] &lt; v:</span><br><span class="line">                <span class="comment"># below judge can dropped if the end element is the largest</span></span><br><span class="line">                <span class="keyword">if</span> i == hi:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># find one element that smaller than v scan from right to left(←)</span></span><br><span class="line">            <span class="keyword">while</span> v &lt; data[j]:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.__swap(data, i, j)</span><br><span class="line">        self.__swap(data, lo, j)</span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><ul><li>main.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">from</span> quick_sort <span class="keyword">import</span> QuickSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_gif</span><span class="params">(path, gif_name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> len(os.listdir(path))==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> range(len(os.listdir(path))):</span><br><span class="line">        file_path = join(path, <span class="string">'&#123;&#125;.png'</span>.format(file_name))</span><br><span class="line">        images.append(imageio.imread(file_path))</span><br><span class="line">    imageio.mimsave(join(path, gif_name), images, <span class="string">'GIF'</span>, duration=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    random.seed(time.time())</span><br><span class="line">    random.shuffle(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'source: &#123;0&#125;'</span>.format(data))</span><br><span class="line">    start = time.time()</span><br><span class="line">    qs = QuickSort(debug=<span class="keyword">False</span>, save_fig=<span class="keyword">True</span>)</span><br><span class="line">    swap_times, fig_path = qs.sort(data)</span><br><span class="line">    save_gif(fig_path, <span class="string">'quick_sort.gif'</span>)</span><br><span class="line">    stop = time.time()</span><br><span class="line">    print(<span class="string">'result: &#123;0&#125;\n'</span>.format(data))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'----------------------------------'</span>)</span><br><span class="line">    print(<span class="string">'swap times: &#123;0&#125;'</span>.format(swap_times))</span><br><span class="line">    print(<span class="string">'spend time: &#123;0&#125;s'</span>.format(stop - start))</span><br><span class="line">    print(<span class="string">'image path: &#123;0&#125;'</span>.format(fig_path))</span><br><span class="line">    print(<span class="string">'----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近装了个&lt;code&gt;Anaconda&lt;/code&gt;，准备学习一下数据可视化。本着三天打鱼两天装死的心态，重新抱起崭新的&lt;strong&gt;算法&lt;/strong&gt;书，认真学起了快排算法。学完后用&lt;code&gt;Python&lt;/code&gt;实现了一遍基本的快排，然后使用&lt;code&gt;ma
      
    
    </summary>
    
      <category term="算法" scheme="http://www.litreily.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://www.litreily.top/tags/algorithm/"/>
    
      <category term="sort" scheme="http://www.litreily.top/tags/sort/"/>
    
      <category term="visualization" scheme="http://www.litreily.top/tags/visualization/"/>
    
  </entry>
  
  <entry>
    <title>tmux常用配置说明</title>
    <link href="http://www.litreily.top/2018/06/19/tmux-config/"/>
    <id>http://www.litreily.top/2018/06/19/tmux-config/</id>
    <published>2018-06-19T01:26:00.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p><code>tmux</code>作为<code>Linux</code>三大神器之一，结合<code>zsh</code>和<code>vim</code>堪称无敌，<code>tmux</code>作为分屏利器自有其强大之处，本文就其常用配置予以说明。</p><h2 id="安装tmux"><a href="#安装tmux" class="headerlink" title="安装tmux"></a>安装tmux</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install in ubuntu</span></span><br><span class="line">$ sudo apt-get install tmux</span><br></pre></td></tr></table></figure><ul><li><code>Ctrl+B</code>: default keys of tmux <code>prefix</code></li><li><code>.tmux.conf</code>: config file of <code>tmux</code></li><li><code>tmux source-file .tmux.conf</code>: command to reload <code>.tmux.conf</code></li></ul><a id="more"></a><h2 id="禁止自动更新窗口名称"><a href="#禁止自动更新窗口名称" class="headerlink" title="禁止自动更新窗口名称"></a>禁止自动更新窗口名称</h2><p>默认情况下，<code>tmux</code>会根据当前目录及相关操作自动更改窗口名称，但通常情况下，我们是不需要其修改的，为此可以在配置文件中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setw</span> <span class="bullet">-g</span> <span class="string">allow_rename</span> <span class="string">'off'</span></span><br></pre></td></tr></table></figure><h2 id="设置zsh作为默认shell"><a href="#设置zsh作为默认shell" class="headerlink" title="设置zsh作为默认shell"></a>设置zsh作为默认shell</h2><p>如果先安装的<code>tmux</code>, 后安装和配置<code>zsh</code>，那tmux有可能默认打开使用的是<code>bash</code>，此时可以使用以下配置指令予以更改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set-option</span> <span class="bullet">-g</span> <span class="string">default-shell</span> <span class="string">/bin/zsh</span></span><br></pre></td></tr></table></figure><h2 id="设置vim作为默认编辑器"><a href="#设置vim作为默认编辑器" class="headerlink" title="设置vim作为默认编辑器"></a>设置vim作为默认编辑器</h2><p>在<code>tmux</code>的搜索模式<code>prefix+[</code>下，默认使用↑↓←→箭头作为移动按键，对于习惯于<code>vim</code>操作的我来讲，这显然很不方便，还好<code>tmux</code>提供了使用<code>vim</code>作为编辑器的选项，启用配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setw</span> <span class="bullet">-g</span> <span class="string">mode-keys</span> <span class="string">vi</span></span><br></pre></td></tr></table></figure><h2 id="解决配色问题"><a href="#解决配色问题" class="headerlink" title="解决配色问题"></a>解决配色问题</h2><p>在<code>tmux</code>中，有可能部分应用的配色与纯<code>shell</code>下不一致，尤其是<code>vim</code>，后来发现<code>htop</code>也存在这个问题。要解决很简单，在<code>tmux</code>配置中加上一句：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set</span> <span class="bullet">-g</span> <span class="string">default-terminal</span> <span class="string">"screen-256color"</span></span><br></pre></td></tr></table></figure><h2 id="存储-恢复tmux工作环境"><a href="#存储-恢复tmux工作环境" class="headerlink" title="存储/恢复tmux工作环境"></a>存储/恢复tmux工作环境</h2><p>如果在服务器上使用<code>tmux</code>，由于服务器基本不关机，所以不用考虑<code>tmux</code>环境会丢失。但是在个人电脑上使用的话，重启电脑后<code>tmux</code>环境就丢失了，如果每次重启都要重新配置一遍环境的话，那未免太浪费时间了。所以这里推荐个插件<a href="https://github.com/tmux-plugins/tmux-resurrect" target="_blank" rel="noopener">tmux-resurrect</a> </p><p><code>tmux-resurrect</code>可以对<code>tmux</code>环境进行保存和恢复，安装及配置如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/.tmux</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-resurrect ~/.tmux/tmux-resurrect</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit .tmux.conf at the bottom</span></span><br><span class="line">$ vi ~/.tmux.conf</span><br><span class="line">run-shell ~/.tmux/tmux-resurrect/resurrect.tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># re source .tmux.conf</span></span><br><span class="line">$ tmux <span class="built_in">source</span>-file ~/.tmux.conf</span><br></pre></td></tr></table></figure><p><code>tmux-resurrect</code>用法:</p><ul><li><code>prefix + Ctrl-s</code> - save</li><li><code>prefix + Ctrl-r</code> - restore</li></ul><p>插件<code>tmux-resurrect</code>还可以结合插件<code>tmux-continum</code>一起使用，<code>tmux-continum</code>可以自动定时存储环境，在开机后打开<code>tmux</code>时自动恢复环境，这就避免了人为存储和恢复的麻烦以及因忘记存储导致的环境丢失。<code>tmux-continum</code>的安装及配置如下:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-continuum ~/.tmux/tmux-continum</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit .tmux.conf</span></span><br><span class="line">$ vi ~/.tmux.conf</span><br><span class="line"><span class="built_in">set</span> -g @continuum-restore <span class="string">'on'</span>  <span class="comment"># restore last saved env</span></span><br><span class="line"><span class="built_in">set</span> -g @continuum-save-interval <span class="string">'30'</span>  <span class="comment"># default is 15 minutes</span></span><br><span class="line">run-shell ~/.tmux/tmux-continum/continuum.tmux</span><br><span class="line"></span><br><span class="line">$ tmux <span class="built_in">source</span> ~/.tmux.conf</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ol><li>以上两个插件都是手动安装的，其实也可以使用<code>tmux</code>的插件管理器<a href="https://github.com/tmux-plugins/tpm" target="_blank" rel="noopener">tpm</a>进行安装，这里就不详述了。</li><li>以上插件要求<code>tmux</code>版本大等于<code>1.9</code></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linuxtoy.org/archives/tmux-resurrect-and-continuum.html" target="_blank" rel="noopener">https://linuxtoy.org/archives/tmux-resurrect-and-continuum.html</a></li><li><a href="https://github.com/tmux/tmux" target="_blank" rel="noopener">https://github.com/tmux/tmux</a></li><li><a href="https://github.com/tmux-plugins/tpm" target="_blank" rel="noopener">https://github.com/tmux-plugins/tpm</a></li><li><a href="https://github.com/tmux-plugins/tmux-resurrect" target="_blank" rel="noopener">https://github.com/tmux-plugins/tmux-resurrect</a></li><li><a href="https://github.com/tmux-plugins/tmux-continuum" target="_blank" rel="noopener">https://github.com/tmux-plugins/tmux-continuum</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;tmux&lt;/code&gt;作为&lt;code&gt;Linux&lt;/code&gt;三大神器之一，结合&lt;code&gt;zsh&lt;/code&gt;和&lt;code&gt;vim&lt;/code&gt;堪称无敌，&lt;code&gt;tmux&lt;/code&gt;作为分屏利器自有其强大之处，本文就其常用配置予以说明。&lt;/p&gt;
&lt;h2 id=&quot;安装tmux&quot;&gt;&lt;a href=&quot;#安装tmux&quot; class=&quot;headerlink&quot; title=&quot;安装tmux&quot;&gt;&lt;/a&gt;安装tmux&lt;/h2&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install in ubuntu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install tmux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl+B&lt;/code&gt;: default keys of tmux &lt;code&gt;prefix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.tmux.conf&lt;/code&gt;: config file of &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux source-file .tmux.conf&lt;/code&gt;: command to reload &lt;code&gt;.tmux.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://www.litreily.top/tags/ubuntu/"/>
    
      <category term="tmux" scheme="http://www.litreily.top/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt中添加内核模块</title>
    <link href="http://www.litreily.top/2018/05/30/openwrt-ko/"/>
    <id>http://www.litreily.top/2018/05/30/openwrt-ko/</id>
    <published>2018-05-30T15:23:56.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>如果想要在<code>Openwrt</code>系统中添加一个内核模块，其实并不难，对着某个已有的内核模块，依葫芦画瓢嘛，不难。本文将介绍一个最最简单的</p><h2 id="sourcecode"><a href="#sourcecode" class="headerlink" title="sourcecode"></a>sourcecode</h2><p>path: <code>git_repo/package/kmod-demo/</code></p><p>下面是源码包含的所有文件，根级<code>Makefile</code>提供给内核编译器使用，<code>src</code>级<code>Makefile</code>用于编译<code>.ko</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">└── src</span><br><span class="line">    ├── demo.c</span><br><span class="line">    ├── Kconfig</span><br><span class="line">    └── Makefile</span><br></pre></td></tr></table></figure><h3 id="demo-c"><a href="#demo-c" class="headerlink" title="demo.c"></a>demo.c</h3><p>源码非常简单，在装载时打印<code>Hello World</code>，卸载时打印<code>Exit</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">"Exit\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"Guangtao.wu"</span>);</span><br></pre></td></tr></table></figure><h3 id="Kconfig"><a href="#Kconfig" class="headerlink" title="Kconfig"></a>Kconfig</h3><p>在<code>Kconfig</code>文件中添加一些编译相关的选项</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config DEMO</span><br><span class="line">    tristate "This is a Module_DEMO"</span><br><span class="line">    default n</span><br><span class="line">    help</span><br><span class="line">      This is a DEMO, for debugging kernel model.</span><br><span class="line">      If unsure, say N.</span><br></pre></td></tr></table></figure><ul><li><code>default</code> : 该选项的默认值<ul><li><code>n</code> 不编译</li><li><code>y</code> 编译到内核，启动时自动加载</li><li><code>m</code> 编译生成<code>.ko</code>模块，不自动加载，需使用<code>insmod</code>加载</li></ul></li></ul><h3 id="Root-Makefile"><a href="#Root-Makefile" class="headerlink" title="Root - Makefile"></a>Root - Makefile</h3><p>根级<code>Makefile</code>仿其它内核模块编写，注意替换名称<code>demo</code>，<code>SUBMENU</code>以及<code>TITLE</code>将显示在<code>make menuconfig</code>的交互界面中。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is free software, licensed under the GNU General Public License v2.</span></span><br><span class="line"><span class="comment"># See /LICENSE for more information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># $Id: Makefile 6565 2007-03-14 13:42:21Z nbd $</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(TOPDIR)</span>/rules.mk</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(INCLUDE_DIR)</span>/kernel.mk</span><br><span class="line"></span><br><span class="line">PKG_NAME:=demo</span><br><span class="line">PKG_RELEASE:=1</span><br><span class="line"></span><br><span class="line">PKG_BUILD_DIR:=<span class="variable">$(KERNEL_BUILD_DIR)</span>/<span class="variable">$(PKG_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(INCLUDE_DIR)</span>/package.mk</span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> KernelPackage/demo</span><br><span class="line">  SUBMENU:=Other modules</span><br><span class="line">  TITLE:=kernel demo </span><br><span class="line">  VERSION:=<span class="variable">$(LINUX_VERSION)</span>-<span class="variable">$(BOARD)</span>-<span class="variable">$(PKG_RELEASE)</span></span><br><span class="line">  FILES:= <span class="variable">$(PKG_BUILD_DIR)</span>/demo.<span class="variable">$(LINUX_KMOD_SUFFIX)</span></span><br><span class="line">  AUTOLOAD:=<span class="variable">$(<span class="built_in">call</span> AutoLoad,46,demo)</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Build/Prepare</span><br><span class="line">mkdir -p <span class="variable">$(PKG_BUILD_DIR)</span></span><br><span class="line"><span class="variable">$(CP)</span> ./src/* <span class="variable">$(PKG_BUILD_DIR)</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Build/Compile</span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="string">"<span class="variable">$(LINUX_DIR)</span>"</span> \</span><br><span class="line">CROSS_COMPILE=<span class="string">"<span class="variable">$(TARGET_CROSS)</span>"</span> \</span><br><span class="line">ARCH=<span class="string">"<span class="variable">$(LINUX_KARCH)</span>"</span> \</span><br><span class="line">SUBDIRS=<span class="string">"<span class="variable">$(PKG_BUILD_DIR)</span>"</span> \</span><br><span class="line">EXTRA_CFLAGS=<span class="string">"<span class="variable">$(BUILDFLAGS)</span>"</span> \</span><br><span class="line">modules</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> KernelPackage/demo/install</span><br><span class="line"><span class="variable">$(INSTALL_DIR)</span> $(1)/lib/network/</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> $(<span class="built_in">call</span> KernelPackage,demo)</span>)</span><br></pre></td></tr></table></figure><h3 id="src-Makefile"><a href="#src-Makefile" class="headerlink" title="src - Makefile"></a>src - Makefile</h3><p>源码的<code>Makefile</code>很简单，其实只要一行就够了，其中<code>CONFIG_&lt;module_name&gt;</code>需要在后续<code>.config</code>文件中配置，或者直接将<code>$(CONFIG_DEMO)</code>改为<code>y</code>或<code>m</code>即可。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj ?= .</span><br><span class="line"></span><br><span class="line">obj-<span class="variable">$(CONFIG_DEMO)</span> += demo.o</span><br></pre></td></tr></table></figure><h2 id="更新-config"><a href="#更新-config" class="headerlink" title="更新 .config"></a>更新 .config</h2><p>使用<code>make menuconfig</code>或者直接修改配置文件<code>.config</code>可以启用新添加的内核模块。</p><ol><li><code>make menuconfig</code>: 搜索<code>demo</code>将其选中然后保存退出</li><li>手动启用，修改<code>.config</code>，在<code>Others module</code>配置参数附近添加如下内容</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_KERNEL_kmod_demo=y</span><br></pre></td></tr></table></figure><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>当源码和配置选项都准备好后，便可以编译安装了，单独安装需要整个<code>kernel</code>已经编译过一次，以保证交叉编译工具链能够正常使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make package/kmod-demo/compile V=s</span><br><span class="line">$ make package/kmod-demo/install V=s</span><br></pre></td></tr></table></figure><h2 id="insmod-rmmod"><a href="#insmod-rmmod" class="headerlink" title="insmod/rmmod"></a>insmod/rmmod</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insmod</span></span><br><span class="line">$ insmod demo.ko</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line"><span class="comment"># rmmod</span></span><br><span class="line">$ rmmod demo.ko</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure><p>look, <code>printk</code>的信息已经成功打印出来了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果想要在&lt;code&gt;Openwrt&lt;/code&gt;系统中添加一个内核模块，其实并不难，对着某个已有的内核模块，依葫芦画瓢嘛，不难。本文将介绍一个最最简单的&lt;/p&gt;
&lt;h2 id=&quot;sourcecode&quot;&gt;&lt;a href=&quot;#sourcecode&quot; class=&quot;header
      
    
    </summary>
    
      <category term="嵌入式" scheme="http://www.litreily.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="C/C++" scheme="http://www.litreily.top/tags/C-C/"/>
    
      <category term="linux" scheme="http://www.litreily.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫4 - scrapy入门</title>
    <link href="http://www.litreily.top/2018/05/27/scrapy-start/"/>
    <id>http://www.litreily.top/2018/05/27/scrapy-start/</id>
    <published>2018-05-27T15:38:28.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p><code>scrapy</code>作为一款强大的爬虫框架，当然要好好学习一番，本文便是本人学习和使用<code>scrapy</code>过后的一个总结，内容比较基础，算是入门笔记吧，主要讲述<code>scrapy</code>的基本概念和使用方法。</p><h2 id="scrapy-framework"><a href="#scrapy-framework" class="headerlink" title="scrapy framework"></a>scrapy framework</h2><p>首先附上<code>scrapy</code>经典图如下：</p><p><img src="/assets/spider/scrapy/scrapy.jpg" alt="scrapy framework"></p><p><code>scrapy</code>框架包含以下几个部分</p><ol><li><code>Scrapy Engine</code> 引擎</li><li><code>Spiders</code> 爬虫</li><li><code>Scheduler</code> 调度器</li><li><code>Downloader</code> 下载器</li><li><code>Item Pipeline</code> 项目管道</li><li><code>Downloader Middlewares</code> 下载器中间件</li><li><code>Spider Middlewares</code> 爬虫中间件</li></ol><h3 id="spider-process"><a href="#spider-process" class="headerlink" title="spider process"></a>spider process</h3><p>其爬取过程简述如下：</p><ol><li>引擎从爬虫获取首个待爬取的链接<code>url</code>，并传递给调度器</li><li>调度器将链接存入队列</li><li>引擎向调度器请求要爬取的链接，并将请求得到的链接经下载器中间件传递给下载器</li><li>下载器从网上下载网页，下载后的网页经下载器中间件传递给引擎</li><li>引擎将网页经爬虫中间件传递给爬虫</li><li>爬虫对网页进行解析，将得到的<code>Items</code>和新的链接经爬虫中间件交给引擎</li><li>引擎将从爬虫得到的<code>Items</code>交给项目管道，将新的链接请求<code>requests</code>交给调度器</li><li>此后循环2~7步，直到没有待爬取的链接为止</li></ol><p>需要说明的是，项目管道(<code>Item Pipeline</code>)主要完成数据清洗，验证，持久化存储等工作；下载器中间件(<code>Downloader Middlewares</code>)作为下载器和引擎之间的的钩子(<code>hook</code>)，用于监听或修改下载请求或已下载的网页，比如修改请求包的头部信息等；爬虫中间件(<code>Spider Middlewares</code>)作为爬虫和引擎之间的钩子(<code>hook</code>)，用于处理爬虫的输入输出，即网页<code>response</code>和爬虫解析网页后得到的<code>Items</code>和<code>requests</code>。</p><h3 id="Items"><a href="#Items" class="headerlink" title="Items"></a>Items</h3><p>至于什么是<code>Items</code>，个人认为就是经爬虫解析后得到的一个数据单元，包含一组数据，比如爬取的是某网站的商品信息，那么每爬取一个网页可能会得到多组商品信息，每组信息包含商品名称，价格，生产日期，商品样式等，那我们便可以定义一组<code>Item</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Item</span><br><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Field</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    name = Field()</span><br><span class="line">    price = Field()</span><br><span class="line">    date = Field()</span><br><span class="line">    types = Field()</span><br></pre></td></tr></table></figure><p><code>Field()</code>实质就是一个字典<code>Dict()</code>类型的扩展，如上代码所示，一组<code>Item</code>对应一个商品信息，单个网页可能包含一个或多个商品，所有<code>Item</code>信息都需要在<code>Spider</code>中赋值，然后经引擎交给<code>Item Pipeline</code>。具体实现在后续博文的实例中会有体现，本文旨在简单记述<code>scrapy</code>的基本概念和使用方法。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>with <code>pip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><p>or <code>conda</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge scrapy</span><br></pre></td></tr></table></figure><p>基本指令如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\WorkSpace&gt;scrapy --help</span><br><span class="line">Scrapy <span class="number">1.5</span><span class="number">.0</span> - no active project</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  scrapy &lt;command&gt; [options] [args]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  bench         Run quick benchmark test</span><br><span class="line">  fetch         Fetch a URL using the Scrapy downloader</span><br><span class="line">  genspider     Generate <span class="keyword">new</span> spider using pre-defined templates</span><br><span class="line">  runspider     Run a self-contained spider (without creating a project)</span><br><span class="line">  settings      Get settings values</span><br><span class="line">  shell         Interactive scraping <span class="built_in">console</span></span><br><span class="line">  startproject  Create <span class="keyword">new</span> project</span><br><span class="line">  version       Print Scrapy version</span><br><span class="line">  view          Open URL <span class="keyword">in</span> browser, <span class="keyword">as</span> seen by Scrapy</span><br><span class="line"></span><br><span class="line">  [ more ]      More commands available when run <span class="keyword">from</span> project directory</span><br><span class="line"></span><br><span class="line">Use <span class="string">"scrapy &lt;command&gt; -h"</span> to see more info about a command</span><br></pre></td></tr></table></figure><p>如果需要使用虚拟环境，需要安装<code>virtualenv</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h2 id="scrapy-startproject"><a href="#scrapy-startproject" class="headerlink" title="scrapy startproject"></a>scrapy startproject</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;project-name&gt; [project-dir]</span><br></pre></td></tr></table></figure><p>使用该指令可以生成一个新的<code>scrapy</code>项目，以<code>demo</code>为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy startproject demo</span><br><span class="line">...</span><br><span class="line">You can start your first spider with:</span><br><span class="line">    <span class="built_in">cd</span> demo</span><br><span class="line">    scrapy genspider example example.com</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> demo</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── demo</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── __pycache__</span><br><span class="line">└── scrapy.cfg</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br></pre></td></tr></table></figure><p>可以看到<code>startproject</code>自动生成了一些文件夹和文件，其中：</p><ol><li><code>scrapy.cfg</code>: 项目配置文件，一般不用修改</li><li><code>items.py</code>: 定义<code>items</code>的文件，例如上述的<code>GoodsItem</code></li><li><code>middlewares.py</code>: 中间件代码，默认包含下载器中间件和爬虫中间件</li><li><code>pipelines.py</code>: 项目管道，用于处理<code>spider</code>返回的<code>items</code>，包括清洗，验证，持久化等</li><li><code>settings.py</code>: 全局配置文件，包含各类全局变量</li><li><code>spiders</code>: 该文件夹用于存储所有的爬虫文件，注意一个项目可以包含多个爬虫</li><li><code>__init__.py</code>: 该文件指示当前文件夹属于一个<code>python</code>模块</li><li><code>__pycache__</code>: 存储解释器生成的<code>.pyc</code>文件（一种跨平台的字节码<code>byte code</code>），在<code>python2</code>中该类文件与<code>.py</code>保存在相同文件夹</li></ol><h2 id="scrapy-genspider"><a href="#scrapy-genspider" class="headerlink" title="scrapy genspider"></a>scrapy genspider</h2><p>项目生成以后，可以使用<code>scrapy genspider</code>指令自动生成一个爬虫文件，比如，如果要爬取<a href="www.huaban.com">花瓣网首页</a>，执行以下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> demo</span><br><span class="line">$ scrapy genspider huaban www.huaban.com</span><br></pre></td></tr></table></figure><p>默认生成的爬虫文件<code>huaban.py</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuabanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'huaban'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.huaban.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.huaban.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>爬虫类继承于<code>scrapy.Spider</code></li><li><code>name</code>是必须存在的参数，用以标识该爬虫</li><li><code>allowed_domains</code>指代允许爬虫爬取的域名，指定域名之外的链接将被丢弃</li><li><code>start_urls</code>存储爬虫的起始链接，该参数是列表类型，所以可以同时存储多个链接</li></ul><p>如果要自定义起始链接，也可以重写<code>scrapy.Spider</code>类的<code>start_requests</code>函数，此处不予细讲。</p><p><code>parse</code>函数是一个默认的回调函数，当下载器下载网页后，会调用该函数进行解析，<code>response</code>就是请求包的响应数据。至于网页内容的解析方法，<code>scrapy</code>内置了几种选择器(<code>Selector</code>)，包括<code>xpath</code>选择器、<code>CSS</code>选择器和正则匹配。下面是一些选择器的使用示例，方便大家更加直观的了解选择器的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xpath selector</span></span><br><span class="line">response.xpath(<span class="string">'//a'</span>)</span><br><span class="line">response.xpath(<span class="string">'./img'</span>).extract()</span><br><span class="line">response.xpath(<span class="string">'//*[@id="huaban"]'</span>).extract_first()</span><br><span class="line">repsonse.xpath(<span class="string">'//*[@id="Profile"]/div[1]/a[2]/text()'</span>).extract_first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># css selector</span></span><br><span class="line">response.css(<span class="string">'a'</span>).extract()</span><br><span class="line">response.css(<span class="string">'#Profile &gt; div.profile-basic'</span>).extract_first()</span><br><span class="line">response.css(<span class="string">'a[href="test.html"]::text'</span>).extract_first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># re selector</span></span><br><span class="line">response.xpath(<span class="string">'.'</span>).re(<span class="string">'id:\s*(\d+)'</span>)</span><br><span class="line">response.xpath(<span class="string">'//a/text()'</span>).re_first(<span class="string">'username: \s(.*)'</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是，<code>response</code>不能直接调用<code>re</code>,<code>re_first</code>.</p><h2 id="scrapy-crawl"><a href="#scrapy-crawl" class="headerlink" title="scrapy crawl"></a>scrapy crawl</h2><p>假设爬虫编写完了，那就可以使用<code>scrapy crawl</code>指令开始执行爬取任务了。</p><p>当进入一个创建好的<code>scrapy</code>项目目录时，使用<code>scrapy -h</code>可以获得相比未创建之前更多的帮助信息，其中就包括用于启动爬虫任务的<code>scrapy crawl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy -h</span><br><span class="line">Scrapy 1.5.0 - project: huaban</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  scrapy &lt;<span class="built_in">command</span>&gt; [options] [args]</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  bench         Run quick benchmark <span class="built_in">test</span></span><br><span class="line">  check         Check spider contracts</span><br><span class="line">  crawl         Run a spider</span><br><span class="line">  edit          Edit spider</span><br><span class="line">  fetch         Fetch a URL using the Scrapy downloader</span><br><span class="line">  genspider     Generate new spider using pre-defined templates</span><br><span class="line">  list          List available spiders</span><br><span class="line">  parse         Parse URL (using its spider) and <span class="built_in">print</span> the results</span><br><span class="line">  runspider     Run a self-contained spider (without creating a project)</span><br><span class="line">  settings      Get settings values</span><br><span class="line">  shell         Interactive scraping console</span><br><span class="line">  startproject  Create new project</span><br><span class="line">  version       Print Scrapy version</span><br><span class="line">  view          Open URL <span class="keyword">in</span> browser, as seen by Scrapy</span><br><span class="line"></span><br><span class="line">Use <span class="string">"scrapy &lt;command&gt; -h"</span> to see more info about a <span class="built_in">command</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl -h</span><br><span class="line">Usage</span><br><span class="line">=====</span><br><span class="line">  scrapy crawl [options] &lt;spider&gt;</span><br><span class="line"></span><br><span class="line">Run a spider</span><br><span class="line"></span><br><span class="line">Options</span><br><span class="line">=======</span><br><span class="line">--<span class="built_in">help</span>, -h              show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">-a NAME=VALUE           <span class="built_in">set</span> spider argument (may be repeated)</span><br><span class="line">--output=FILE, -o FILE  dump scraped items into FILE (use - <span class="keyword">for</span> stdout)</span><br><span class="line">--output-format=FORMAT, -t FORMAT</span><br><span class="line">                        format to use <span class="keyword">for</span> dumping items with -o</span><br><span class="line"></span><br><span class="line">Global Options</span><br><span class="line">--------------</span><br><span class="line">--logfile=FILE          <span class="built_in">log</span> file. <span class="keyword">if</span> omitted stderr will be used</span><br><span class="line">--loglevel=LEVEL, -L LEVEL</span><br><span class="line">                        <span class="built_in">log</span> level (default: DEBUG)</span><br><span class="line">--nolog                 <span class="built_in">disable</span> logging completely</span><br><span class="line">--profile=FILE          write python cProfile stats to FILE</span><br><span class="line">--pidfile=FILE          write process ID to FILE</span><br><span class="line">--<span class="built_in">set</span>=NAME=VALUE, -s NAME=VALUE</span><br><span class="line">                        <span class="built_in">set</span>/override setting (may be repeated)</span><br><span class="line">--pdb                   <span class="built_in">enable</span> pdb on failure</span><br></pre></td></tr></table></figure><p>从<code>scrapy crawl</code>的帮助信息可以看出，该指令包含很多可选参数，但必选参数只有一个，就是<code>spider</code>，即要执行的爬虫名称，对应每个爬虫的名称(<code>name</code>)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl huaban</span><br></pre></td></tr></table></figure><p>至此，一个<code>scrapy</code>爬虫任务的创建和执行过程就介绍完了，至于实例，后续博客会陆续介绍。</p><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><p>最后简要说明一下指令<code>scrapy shell</code>，这是一个交互式的<code>shell</code>,类似于命令行形式的<code>python</code>，当我们刚开始学习<code>scrapy</code>或者刚开始爬取某个陌生的站点时，可以使用它熟悉各种函数操作或者选择器的使用，用它来不断试错纠错，熟练掌握<code>scrapy</code>各种用法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy shell www.huaban.com</span><br><span class="line">2018-05-29 23:58:49 [scrapy.utils.log] INFO: Scrapy 1.5.0 started (bot: scrapybot)</span><br><span class="line">2018-05-29 23:58:49 [scrapy.utils.log] INFO: Versions: lxml 4.2.1.0, libxml2 2.9.5, cssselect 1.0.3, parsel 1.4.0, w3lib 1.19.0, Twisted 17.9.0, Python 3.6.3 (v3.6.3:2c5fed8, Oct  3</span><br><span class="line">2017, 17:26:49) [MSC v.1900 32 bit (Intel)], pyOpenSSL 17.5.0 (OpenSSL 1.1.0h  27 Mar 2018), cryptography 2.2.2, Platform Windows-10-10.0.17134-SP0</span><br><span class="line">2018-05-29 23:58:49 [scrapy.crawler] INFO: Overridden settings: &#123;<span class="string">'DUPEFILTER_CLASS'</span>: <span class="string">'scrapy.dupefilters.BaseDupeFilter'</span>, <span class="string">'LOGSTATS_INTERVAL'</span>: 0&#125;</span><br><span class="line">2018-05-29 23:58:49 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">[<span class="string">'scrapy.extensions.corestats.CoreStats'</span>,</span><br><span class="line"> <span class="string">'scrapy.extensions.telnet.TelnetConsole'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled downloader middlewares:</span><br><span class="line">[<span class="string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.downloadermiddlewares.stats.DownloaderStats'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled spider middlewares:</span><br><span class="line">[<span class="string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span>,</span><br><span class="line"> <span class="string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span>]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.middleware] INFO: Enabled item pipelines:</span><br><span class="line">[]</span><br><span class="line">2018-05-29 23:58:50 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2018-05-29 23:58:50 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-05-29 23:58:50 [scrapy.downloadermiddlewares.redirect] DEBUG: Redirecting (301) to &lt;GET http://huaban.com/&gt; from &lt;GET http://www.huaban.com&gt;</span><br><span class="line">2018-05-29 23:58:50 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://huaban.com/&gt; (referer: None)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x03385CB0&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET http://www.huaban.com&gt;</span><br><span class="line">[s]   response   &lt;200 http://huaban.com/&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x04CC4D10&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at 0x4fa6bf0&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect=True]) Fetch URL and update <span class="built_in">local</span> objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update <span class="built_in">local</span> objects</span><br><span class="line">[s]   shelp()           Shell <span class="built_in">help</span> (<span class="built_in">print</span> this <span class="built_in">help</span>)</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line">In [1]: view(response)</span><br><span class="line">Out[1]: True</span><br><span class="line"></span><br><span class="line">In [2]: response.xpath(<span class="string">'//a'</span>)</span><br><span class="line">Out[2]:</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a id="elevator" class="off" onclick="re'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="plus"&gt;&lt;/a&gt;'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a onclick="app.showUploadDialog();"&gt;添加采'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="add-board-item"&gt;添加画板&lt;i class="'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="/about/goodies/"&gt;安装采集工具&lt;i class'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a class="huaban_security_oauth" logo_si'</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [3]: response.xpath(<span class="string">'//a'</span>).extract()</span><br><span class="line">Out[3]:</span><br><span class="line">[<span class="string">'&lt;a id="elevator" class="off" onclick="return false;" title="回到顶部"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="plus"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a onclick="app.showUploadDialog();"&gt;添加采集&lt;i class="upload"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="add-board-item"&gt;添加画板&lt;i class="add-board"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a href="/about/goodies/"&gt;安装采集工具&lt;i class="goodies"&gt;&lt;/i&gt;&lt;/a&gt;'</span>,</span><br><span class="line"> <span class="string">'&lt;a class="huaban_security_oauth" logo_size="124x47" logo_type="realname" href="//www.anquan.org" rel="nofollow"&gt; &lt;script src="//static.anquan.org/static/outer/js/aq_auth.js"&gt;&lt;/script&gt; &lt;/a&gt;'</span>]</span><br><span class="line"></span><br><span class="line">In [4]: response.xpath(<span class="string">'//img'</span>)</span><br><span class="line">Out[4]: [&lt;Selector xpath=<span class="string">'//img'</span> data=<span class="string">'&lt;img src="https://d5nxst8fruw4z.cloudfro'</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [5]: response.xpath(<span class="string">'//a/text()'</span>)</span><br><span class="line">Out[5]:</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'添加采集'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'添加画板'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">'安装采集工具'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">' '</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//a/text()'</span> data=<span class="string">' '</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [6]: response.xpath(<span class="string">'//a/text()'</span>).extract()</span><br><span class="line">Out[6]: [<span class="string">'添加采集'</span>, <span class="string">'添加画板'</span>, <span class="string">'安装采集工具'</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br><span class="line"></span><br><span class="line">In [7]: response.xpath(<span class="string">'//a/text()'</span>).extract_first()</span><br><span class="line">Out[7]: <span class="string">'添加采集'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;scrapy&lt;/code&gt;作为一款强大的爬虫框架，当然要好好学习一番，本文便是本人学习和使用&lt;code&gt;scrapy&lt;/code&gt;过后的一个总结，内容比较基础，算是入门笔记吧，主要讲述&lt;code&gt;scrapy&lt;/code&gt;的基本概念和使用方法。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="Python" scheme="http://www.litreily.top/categories/Python/"/>
    
    
      <category term="spider" scheme="http://www.litreily.top/tags/spider/"/>
    
      <category term="scrapy" scheme="http://www.litreily.top/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫3 - 生产者消费者模型爬取某金融网站数据</title>
    <link href="http://www.litreily.top/2018/04/30/cfachina/"/>
    <id>http://www.litreily.top/2018/04/30/cfachina/</id>
    <published>2018-04-30T09:03:35.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>应一位金融圈的朋友所托，帮忙写个爬虫，帮他爬取<a href="http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo#" target="_blank" rel="noopener">中国期货行业协议</a>网站中所有金融机构的从业人员信息。网站数据的获取本身比较简单，但是为了学习一些新的爬虫方法和技巧，即本文要讲述的<strong>生产者消费者模型</strong>，我又学习了一下Python中队列库<code>queue</code>及线程库<code>Thread</code>的使用方法。</p><h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p>生产者消费者模型非常简单，相信大部分程序员都知道，就是一方作为生产者不断提供资源，另一方作为消费者不断消费资源。简单点说，就好比餐馆的厨师和顾客，厨师作为生产者不断制作美味的食物，而顾客作为消费者不断食用厨师提供的食物。此外，生产者与消费者之间可以是一对一、一对多、多对一和多对多的关系。</p><p>那么这个模型和爬虫有什么关系呢？其实，爬虫可以认为是一个生产者，它不断从网站爬取数据，爬取到的数据就是食物；而所得数据需要消费者进行数据清洗，把有用的数据吸收掉，把无用的数据丢弃。</p><p>在实践过程中，爬虫爬取和数据清洗分别对应一个<code>Thread</code>，两个线程之间通过顺序队列<code>queue</code>传递数据，数据传递过程就好比餐馆服务员从厨房把食物送到顾客餐桌上的过程。爬取线程负责爬取网站数据，并将原始数据存入队列，清洗线程从队列中按入队顺序读取原始数据并提取出有效数据。</p><p>以上便是对生产者消费者模型的简单介绍了，下面针对本次爬取任务予以详细说明。</p><h2 id="分析站点"><a href="#分析站点" class="headerlink" title="分析站点"></a>分析站点</h2><blockquote><p><a href="http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo" target="_blank" rel="noopener">http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo</a></p></blockquote><p><img src="/assets/spider/cfachina/home_page.png" alt="home page"></p><p>我们要爬取的数据是主页显示的表格中所有期货公司的<strong>从业人员信息</strong>，每个公司对应一个<strong>机构编号</strong>(<code>G01001~G01198</code>)。从上图可以看到有主页有分页，共8页。以<code>G01001</code>方正中期期货公司为例，点击该公司名称跳转至对应网页如下:</p><p><img src="/assets/spider/cfachina/personinfo.png" alt="personinfo"></p><p>从网址及网页内容可以提取出以下信息：</p><ol><li>网址<ul><li><a href="http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo" target="_blank" rel="noopener">http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo</a><ul><li><code>organid</code>: 机构编号，<code>+G01001+</code> ~ <code>+G01198+</code></li><li><code>currentPage</code>: 该机构从业人员信息当前页面编号</li><li><code>pageSize</code>: 每个页面显示的人员个数，默认20</li><li><code>selectType</code>: 固定为<code>personinfo</code></li></ul></li></ul></li><li>机构名称<code>mechanism_name</code>，在每页表格上方可以看到当前机构名称</li><li>从业人员信息，即每页的表格内容，也是我们要爬取的对象</li><li>该机构从业人员信息总页数<code>page_cnt</code></li></ol><p>我们最终爬取的数据可以按机构名称存储到对应的txt文件或excel文件中。</p><h3 id="获取机构名称"><a href="#获取机构名称" class="headerlink" title="获取机构名称"></a>获取机构名称</h3><p><img src="/assets/spider/cfachina/gst_title.png" alt="get mechanism name"></p><p>获取到某机构的任意从业信息页面后，使用<code>BeautifulSoup</code>可快速提取机构名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br></pre></td></tr></table></figure><p>那么有人可能会问，既然主页表格都已经包含了所有机构的编号和名称，为何还要多此一举的再获取一次呢？这是因为，我压根就不想爬主页的那些表格，直接根据机构编号的递增规律生成对应的网址即可，所以获取机构名称的任务就放在了爬取每个机构首个信息页面之后。</p><h3 id="获取机构信息对应的网页数量"><a href="#获取机构信息对应的网页数量" class="headerlink" title="获取机构信息对应的网页数量"></a>获取机构信息对应的网页数量</h3><p><img src="/assets/spider/cfachina/page_cnt.png" alt="get count of page"></p><p>每个机构的数据量是不等的，幸好每个页面都包含了当前页面数及总页面数。使用以下代码即可获取页码数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url_re = re.compile(<span class="string">'#currentPage.*\+.*\+\'(\d+)\''</span>)</span><br><span class="line">page_cnt = url_re.search(html).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>从每个机构首页获取页码数后，便可<code>for</code>循环修改网址参数中的<code>currentPage</code>，逐页获取机构信息。</p><h3 id="获取当前页面从业人员信息"><a href="#获取当前页面从业人员信息" class="headerlink" title="获取当前页面从业人员信息"></a>获取当前页面从业人员信息</h3><p><img src="/assets/spider/cfachina/personinfo_table.png" alt="get personinfo"></p><p>针对如上图所示的一个特定信息页时，人员信息被存放于一个表中，除了固定的表头信息外，人员信息均被包含在一个带有<code>id</code>的<code>tr</code>标签中，所以使用<code>BeautifulSoup</code>可以很容易提取出页面内所有人员信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>一般的想法当然是逐页爬取主页信息，然后获取每页所有机构对应的网页链接，进而继续爬取每个机构信息。</p><p>但是由于该网站的机构信息网址具有明显的规律，我们根据每个机构的编号便可直接得到每个机构每个信息页面的网址。所以具体爬取方案如下：</p><ol><li>将所有<strong>机构编号</strong>网址存入队列<code>url_queue</code></li><li>新建生产者线程<code>SpiderThread</code>完成抓取任务<ul><li>循环从队列<code>url_queue</code>中读取一个编号，生成机构首页网址，使用<code>requests</code>抓取之</li><li>从抓取结果中获取页码数量，若为0，则返回该线程第1步</li><li>循环爬取当前机构剩余页面</li><li>将页面信息存入队列<code>html_queue</code></li></ul></li><li>新建消费者线程<code>DatamineThread</code>完成数据清洗任务<ul><li>循环从队列<code>html_queue</code>中读取一组页面信息</li><li>使用<code>BeautifulSoup</code>提取页面中的从业人员信息</li><li>将信息以二维数组形式存储，最后交由数据存储类<code>Storage</code>存入本地文件</li></ul></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="生成者SpiderThread"><a href="#生成者SpiderThread" class="headerlink" title="生成者SpiderThread"></a>生成者<code>SpiderThread</code></h3><p>爬虫线程先从队列获取一个机构编号，生成机构首页网址并进行爬取，接着判断机构页面数量是否为0，如若不为0则继续获取机构名称，并根据页面数循环爬取剩余页面，将原始html数据以如下<code>dict</code>格式存入队列<code>html_queue</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'name': mechanismId_mechanismName,</span><br><span class="line">    'num': currentPage,</span><br><span class="line">    'content': html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爬虫产生的数据队列<code>html_queue</code>将由数据清洗线程进行处理，下面是爬虫线程的主程序，整个线程代码请看后面的<a href="#源码">源码</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        mechanism_id = <span class="string">'G0'</span> + self.url_queue.get()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the first page's url</span></span><br><span class="line">        url = self.__get_url(mechanism_id, <span class="number">1</span>)</span><br><span class="line">        html = self.grab(url)</span><br><span class="line"></span><br><span class="line">        page_cnt = self.url_re.search(html.text).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> page_cnt == <span class="string">'0'</span>:</span><br><span class="line">            self.url_queue.task_done()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        soup = BeautifulSoup(html.text, <span class="string">'html.parser'</span>)</span><br><span class="line">        mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br><span class="line">        print(<span class="string">'\nGrab Thread: get %s - %s with %s pages\n'</span> % (mechanism_id, mechanism_name, page_cnt))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># put data into html_queue</span></span><br><span class="line">        self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:<span class="number">1</span>, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(page_cnt) + <span class="number">1</span>):</span><br><span class="line">            url = self.__get_url(mechanism_id, i)</span><br><span class="line">            html = self.grab(url)</span><br><span class="line">            self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:i, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">        </span><br><span class="line">        self.url_queue.task_done()</span><br></pre></td></tr></table></figure><h3 id="消费者DatamineThread"><a href="#消费者DatamineThread" class="headerlink" title="消费者DatamineThread"></a>消费者<code>DatamineThread</code></h3><p>数据清洗线程比较简单，就是从生产者提供的数据队列<code>html_queue</code>逐一提取<code>html</code>数据，然后从<code>html</code>数据中提取从业人员信息，以二维数组形式存储，最后交由存储模块<code>Storage</code>完成数据存储工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatamineThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Parse data from html"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, html_queue, filetype)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.filetype = filetype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__datamine</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Get data from html content'''</span></span><br><span class="line">        soup = BeautifulSoup(data[<span class="string">'content'</span>].text, <span class="string">'html.parser'</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>):</span><br><span class="line">            items = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> info.find_all(<span class="string">'td'</span>):</span><br><span class="line">                items.append(item.get_text())</span><br><span class="line">            infos.append(items)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.html_queue.get()</span><br><span class="line">            print(<span class="string">'Datamine Thread: get %s_%d'</span> % (data[<span class="string">'name'</span>], data[<span class="string">'num'</span>]))</span><br><span class="line"></span><br><span class="line">            store = Storage(data[<span class="string">'name'</span>], self.filetype)</span><br><span class="line">            store.save(self.__datamine(data))</span><br><span class="line">            self.html_queue.task_done()</span><br></pre></td></tr></table></figure><h3 id="数据存储Storage"><a href="#数据存储Storage" class="headerlink" title="数据存储Storage"></a>数据存储<code>Storage</code></h3><p>我写了两类文件格式的存储函数，<code>write_txt</code>, <code>write_excel</code>，分别对应<code>txt</code>,<code>excel</code>文件。实际存储时由调用方确定文件格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'.txt'</span>: self.write_txt,</span><br><span class="line">        <span class="string">'.xls'</span>: self.write_excel</span><br><span class="line">    &#125;.get(self.filetype)(data)</span><br></pre></td></tr></table></figure><h4 id="存入txt文件"><a href="#存入txt文件" class="headerlink" title="存入txt文件"></a>存入txt文件</h4><p>存入<code>txt</code>文件是比较简单的，就是以附加(<code>a</code>)形式打开文件，写入数据，关闭文件。其中，文件名称由调用方提供。写入数据时，每个人员信息占用一行，以制表符<code>\t</code>分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_txt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">'''Write data to txt file'''</span></span><br><span class="line">    fid = open(self.path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># insert the header of table</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.getsize(self.path):</span><br><span class="line">        fid.write(<span class="string">'\t'</span>.join(self.table_header) + <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> data:</span><br><span class="line">        fid.write(<span class="string">'\t'</span>.join(info) + <span class="string">'\n'</span>)</span><br><span class="line">    fid.close()</span><br></pre></td></tr></table></figure><h4 id="存入Excel文件"><a href="#存入Excel文件" class="headerlink" title="存入Excel文件"></a>存入Excel文件</h4><p>存入<code>Excel</code>文件还是比较繁琐的，由于经验不多，选用的是<code>xlwt</code>, <code>xlrd</code>和<code>xlutils</code>库。说实话，这3个库真心不大好用，勉强完成任务而已。为什么这么说，且看：</p><ol><li>修改文件麻烦：<code>xlwt</code>只能写,<code>xlrd</code>只能读，需要<code>xlutils</code>的<code>copy</code>函数将<code>xlrd</code>读取的数据复制到内存，再用<code>xlwt</code>修改</li><li>只支持<code>.xls</code>文件：<code>.xlsx</code>经读写也会变成<code>.xls</code>格式</li><li>表格样式易变：只要重新写入文件，表格样式必然重置</li></ol><p>所以后续我肯定会再学学其它的<code>excel</code>库，当然，当前解决方案暂时还用这三个。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">'''write data to excel file'''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">        header_style = xlwt.easyxf(<span class="string">'font:name 楷体, color-index black, bold on'</span>)</span><br><span class="line">        wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        ws = wb.add_sheet(<span class="string">'Data'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># insert the header of table</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">            ws.write(<span class="number">0</span>, i, self.table_header[i], header_style)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rb = open_workbook(self.path)</span><br><span class="line">        wb = copy(rb)</span><br><span class="line">        ws = wb.get_sheet(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># write data</span></span><br><span class="line">    offset = len(ws.rows)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(data[<span class="number">0</span>])):</span><br><span class="line">            ws.write(offset + i, j, data[i][j])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When use xlutils.copy.copy function to copy data from exist .xls file,</span></span><br><span class="line">    <span class="comment"># it will loss the origin style, so we need overwrite the width of column,</span></span><br><span class="line">    <span class="comment"># maybe there some other good solution, but I have not found yet.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">        ws.col(i).width = <span class="number">256</span> * (<span class="number">10</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">15</span>)[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save to file</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            wb.save(self.path)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'&#123;0&#125; error: &#123;1&#125;'</span>.format(self.path, e.strerror))</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>一个文件对应一个机构的数据，需要多次读取和写入，所以需要计算文件写入时的行数偏移量<code>offset</code>，即当前文件已包含数据的行数</li><li>当被写入文件被人为打开时，会出现<code>PermissionError</code>异常，可以在捕获该异常然后提示错误信息，并定时等待直到文件被关闭。</li></ol><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>主函数用于创建和启动生产者线程和消费者线程，同时为生产者线程提供机构编号队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">url_queue = queue.Queue()</span><br><span class="line">html_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>, <span class="number">1199</span>):</span><br><span class="line">        url_queue.put(str(i))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a spider thread</span></span><br><span class="line">    st = SpiderThread(url_queue, html_queue)</span><br><span class="line">    st.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    st.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a datamine thread</span></span><br><span class="line">    dt = DatamineThread(html_queue, <span class="string">'.xls'</span>)</span><br><span class="line">    dt.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    dt.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait on the queue until everything has been processed</span></span><br><span class="line">    url_queue.join()</span><br><span class="line">    html_queue.join()</span><br></pre></td></tr></table></figure><p>从主函数可以看到，两个队列都调用了<code>join</code>函数，用于阻塞，直到对应队列为空为止。要注意的是，队列操作中，<strong>每个出队操作<code>queue.get()</code>需要对应一个<code>queue.task_done()</code>操作</strong>，否则会出现队列数据已全部处理完，但主线程仍在执行的情况。</p><p>至此，爬虫的主要代码便讲解完了，下面是完整源码。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># url format ↓</span></span><br><span class="line"><span class="comment"># http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+G01001+&amp;currentPage=1&amp;pageSize=20&amp;selectType=personinfo&amp;all=undefined</span></span><br><span class="line"><span class="comment"># organid: +G01001+, +G01002+, +G01003+, ...</span></span><br><span class="line"><span class="comment"># currentPage: 1, 2, 3, ...</span></span><br><span class="line"><span class="comment"># pageSize: 20(default)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Algorithm design:</span></span><br><span class="line"><span class="comment"># 2 threads with 2 queues</span></span><br><span class="line"><span class="comment"># Thread-1, get first page url, then get page_num and mechanism_name from first page</span></span><br><span class="line"><span class="comment"># Thread-2, parse html file and get data from it, then output data to local file</span></span><br><span class="line"><span class="comment"># url_queue data -&gt; 'url'  # first url of each mechanism</span></span><br><span class="line"><span class="comment"># html_queue data -&gt; &#123;'name':'mechanism_name', 'html':data&#125;</span></span><br><span class="line"></span><br><span class="line">url_queue = queue.Queue()</span><br><span class="line">html_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Threaded Url Grab"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url_queue, html_queue)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.page_size = <span class="number">20</span></span><br><span class="line">        self.url_re = re.compile(<span class="string">'#currentPage.*\+.*\+\'(\d+)\''</span>)</span><br><span class="line">        self.headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_url</span><span class="params">(self, mechanism_id, current_page)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.cfachina.org/cfainfo/organbaseinfoOneServlet?organid=+%s+&amp;currentPage=%d&amp;pageSize=%d&amp;selectType=personinfo&amp;all=undefined'</span> \</span><br><span class="line">        % (mechanism_id, current_page, self.page_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grab</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">'''Grab html of url from web'''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                html = requests.get(url, headers=self.headers, timeout=<span class="number">20</span>)</span><br><span class="line">                <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">                print(url + <span class="string">' Connection error, try again...'</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">                print(url + <span class="string">' Read timeout, try again...'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(str(e))</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Grab all htmls of mechanism one by one</span></span><br><span class="line"><span class="string">        Steps:</span></span><br><span class="line"><span class="string">            1. grab first page of each mechanism from url_queue</span></span><br><span class="line"><span class="string">            2. get number of pages and mechanism name from first page</span></span><br><span class="line"><span class="string">            3. grab all html file of each mechanism</span></span><br><span class="line"><span class="string">            4. push all html to html_queue</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            mechanism_id = <span class="string">'G0'</span> + self.url_queue.get()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># the first page's url</span></span><br><span class="line">            url = self.__get_url(mechanism_id, <span class="number">1</span>)</span><br><span class="line">            html = self.grab(url)</span><br><span class="line"></span><br><span class="line">            page_cnt = self.url_re.search(html.text).group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> page_cnt == <span class="string">'0'</span>:</span><br><span class="line">                self.url_queue.task_done()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            soup = BeautifulSoup(html.text, <span class="string">'html.parser'</span>)</span><br><span class="line">            mechanism_name = soup.find(<span class="string">''</span>, &#123;<span class="string">'class'</span>:<span class="string">'gst_title'</span>&#125;).find_all(<span class="string">'a'</span>)[<span class="number">2</span>].get_text()</span><br><span class="line">            print(<span class="string">'\nGrab Thread: get %s - %s with %s pages\n'</span> % (mechanism_id, mechanism_name, page_cnt))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># put data into html_queue</span></span><br><span class="line">            self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:<span class="number">1</span>, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(page_cnt) + <span class="number">1</span>):</span><br><span class="line">                url = self.__get_url(mechanism_id, i)</span><br><span class="line">                html = self.grab(url)</span><br><span class="line">                self.html_queue.put(&#123;<span class="string">'name'</span>:<span class="string">'%s_%s'</span> % (mechanism_id, mechanism_name), <span class="string">'num'</span>:i, <span class="string">'content'</span>:html&#125;)</span><br><span class="line">            </span><br><span class="line">            self.url_queue.task_done()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatamineThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="string">"""Parse data from html"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, html_queue, filetype)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.html_queue = html_queue</span><br><span class="line">        self.filetype = filetype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__datamine</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Get data from html content'''</span></span><br><span class="line">        soup = BeautifulSoup(data[<span class="string">'content'</span>].text, <span class="string">'html.parser'</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>, id=<span class="keyword">True</span>):</span><br><span class="line">            items = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> info.find_all(<span class="string">'td'</span>):</span><br><span class="line">                items.append(item.get_text())</span><br><span class="line">            infos.append(items)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.html_queue.get()</span><br><span class="line">            print(<span class="string">'Datamine Thread: get %s_%d'</span> % (data[<span class="string">'name'</span>], data[<span class="string">'num'</span>]))</span><br><span class="line"></span><br><span class="line">            store = Storage(data[<span class="string">'name'</span>], self.filetype)</span><br><span class="line">            store.save(self.__datamine(data))</span><br><span class="line">            self.html_queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, filetype)</span>:</span></span><br><span class="line">        self.filetype = filetype</span><br><span class="line">        self.filename = filename + filetype</span><br><span class="line">        self.table_header = (<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'从业资格号'</span>, <span class="string">'投资咨询从业证书号'</span>, <span class="string">'任职部门'</span>, <span class="string">'职务'</span>, <span class="string">'任现职时间'</span>)</span><br><span class="line">        self.path = self.__get_path()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_path</span><span class="params">(self)</span>:</span></span><br><span class="line">        path = &#123;</span><br><span class="line">            <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Documents/python/cfachina'</span>,</span><br><span class="line">            <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Documents/python/cfachina'</span></span><br><span class="line">        &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (path, self.filename)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_txt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Write data to txt file'''</span></span><br><span class="line">        fid = open(self.path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># insert the header of table</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.getsize(self.path):</span><br><span class="line">            fid.write(<span class="string">'\t'</span>.join(self.table_header) + <span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> data:</span><br><span class="line">            fid.write(<span class="string">'\t'</span>.join(info) + <span class="string">'\n'</span>)</span><br><span class="line">        fid.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''write data to excel file'''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">            header_style = xlwt.easyxf(<span class="string">'font:name 楷体, color-index black, bold on'</span>)</span><br><span class="line">            wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            ws = wb.add_sheet(<span class="string">'Data'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># insert the header of table</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">                ws.write(<span class="number">0</span>, i, self.table_header[i], header_style)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rb = open_workbook(self.path)</span><br><span class="line">            wb = copy(rb)</span><br><span class="line">            ws = wb.get_sheet(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># write data</span></span><br><span class="line">        offset = len(ws.rows)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(data[<span class="number">0</span>])):</span><br><span class="line">                ws.write(offset + i, j, data[i][j])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># When use xlutils.copy.copy function to copy data from exist .xls file,</span></span><br><span class="line">        <span class="comment"># it will loss the origin style, so we need overwrite the width of column,</span></span><br><span class="line">        <span class="comment"># maybe there some other good solution, but I have not found yet.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.table_header)):</span><br><span class="line">            ws.col(i).width = <span class="number">256</span> * (<span class="number">10</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">15</span>)[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># save to file</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                wb.save(self.path)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'&#123;0&#125; error: &#123;1&#125;'</span>.format(self.path, e.strerror))</span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''Write data to local file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        According filetype to choose function to save data, filetype can be '.txt' </span></span><br><span class="line"><span class="string">        or '.xls', but '.txt' type is saved more faster then '.xls' type</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data: a 2d-list array that need be save</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'.txt'</span>: self.write_txt,</span><br><span class="line">            <span class="string">'.xls'</span>: self.write_excel</span><br><span class="line">        &#125;.get(self.filetype)(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>, <span class="number">1199</span>):</span><br><span class="line">        url_queue.put(str(i))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a spider thread</span></span><br><span class="line">    st = SpiderThread(url_queue, html_queue)</span><br><span class="line">    st.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    st.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create and start a datamine thread</span></span><br><span class="line">    dt = DatamineThread(html_queue, <span class="string">'.xls'</span>)</span><br><span class="line">    dt.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    dt.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait on the queue until everything has been processed</span></span><br><span class="line">    url_queue.join()</span><br><span class="line">    html_queue.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/cfachina/spider.png" alt="spider"></p><p><img src="/assets/spider/cfachina/save_txt.png" alt="save to txt"></p><p><img src="/assets/spider/cfachina/save_xls.png" alt="save to excel"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li>测试发现，写入<code>txt</code>的速度明显高于写入<code>excel</code>的速度</li><li>如果将页面网址中的<code>pageSize</code>修改为<code>1000</code>或更大，则可以一次性获取某机构的所有从业人员信息，而不用逐页爬取，效率可以大大提高。</li><li>该爬虫已托管至<a href="https://github.com/Litreily/Python-demos" target="_blank" rel="noopener">github Python-demos</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应一位金融圈的朋友所托，帮忙写个爬虫，帮他爬取&lt;a href=&quot;http://www.cfachina.org/cfainfo/organbaseinfoServlet?all=personinfo#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中国期货
      
    
    </summary>
    
      <category term="Python" scheme="http://www.litreily.top/categories/Python/"/>
    
    
      <category term="spider" scheme="http://www.litreily.top/tags/spider/"/>
    
      <category term="queue" scheme="http://www.litreily.top/tags/queue/"/>
    
      <category term="xlwt" scheme="http://www.litreily.top/tags/xlwt/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫2 - 爬取新浪微博用户图片</title>
    <link href="http://www.litreily.top/2018/04/10/sina/"/>
    <id>http://www.litreily.top/2018/04/10/sina/</id>
    <published>2018-04-10T11:54:08.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>其实，新浪微博用户图片爬虫是我学习<code>python</code>以来写的第一个爬虫，只不过当时懒，后来爬完<code>Lofter</code>后觉得有必要总结一下，所以就有了第一篇爬虫博客。现在暂时闲下来了，准备把新浪的这个也补上。</p><p>言归正传，既然选择爬新浪微博，那当然是有需求的，这也是学习的主要动力之一，没错，就是美图。<code>sina</code>用户多数微博都是包含图片的，而且是组图居多，单个图片的较少。</p><p>为了避免侵权，本文以本人微博<a href="https://weibo.com/litreily" target="_blank" rel="noopener">litreily</a>为例说明整个爬取过程，虽然图片较少，质量较低，但爬取方案是绝对ok的，使用时只要换个用户ID就可以了。</p><h2 id="分析sina站点"><a href="#分析sina站点" class="headerlink" title="分析sina站点"></a>分析sina站点</h2><h3 id="获取用户ID"><a href="#获取用户ID" class="headerlink" title="获取用户ID"></a>获取用户ID</h3><p>在爬取前，我们需要知道的是每个用户都有一个用户名，而一个用户名又对应一个唯一的整型数字ID，类似于学生的学号，本人的是<code>2657006573</code>。至于怎么根据用户名去获取ID，有以下两种方法：</p><ol><li>进入待爬取用户主页，在浏览器网址栏中即可看到一串数据，那就是用户ID</li><li><code>Ctrl-U</code>查看待爬取用户的源码，搜索<code>&quot;uid</code>，注意是<strong>双引号</strong></li></ol><p>其实是可以在已知用户名的情况下通过爬虫自动获取到<code>uid</code>的，但是我当时初学<code>python</code>，并没有考虑充分，所以后面的源码是以用户ID作为输入参数的。</p><h3 id="图片存储参数解析"><a href="#图片存储参数解析" class="headerlink" title="图片存储参数解析"></a>图片存储参数解析</h3><p>用户所有的图片都被存放至这样的路径下，真的是<strong>所有图片</strong>哦！！！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https:</span><span class="string">//weibo.cn/&#123;uid&#125;/profile?filter=&#123;filter_type&#125;&amp;page=&#123;page_num&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="attr">https:</span><span class="string">//weibo.cn/2657006573/profile?filter=0&amp;page=1</span></span><br><span class="line"><span class="attr">uid:</span> <span class="number">2657006573</span></span><br><span class="line"><span class="attr">filter_type:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">page_num:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意，是<code>weibo.cn</code>而不是<code>weibo.com</code>，至于我是怎么找到这个页面的，说实话，我也忘了。。。</p><p>链接中包含3个参数，<code>uid</code>, <code>filter_mode</code> 以及 <code>page_num</code>。其中，<code>uid</code>就是前面提及的用户ID，<code>page_num</code>也很好理解，就是分页的当前页数，从1开始增加，那么，这个<code>filter_mode</code>是什么呢？</p><p>不着急，我们先来看看页面↓</p><p><img src="/assets/spider/sina/filter_mode.png" alt="filter mode of pictures"></p><p>可以看到，滤波类型<code>filter_mode</code>指的就是筛选条件，一共三个：</p><ol><li>filter=0 全部微博（包含纯文本微博，转载微博）</li><li>filter=1 原创微博（包含纯文本微博）</li><li>filter=2 图片微博（必须含有图片，包含转载）</li></ol><p>我通常会选择<strong>原创</strong>，因为我并不希望爬取结果中包含转载微博中的图片。当然，大家依照自己的需要选择即可。</p><h3 id="图链解析"><a href="#图链解析" class="headerlink" title="图链解析"></a>图链解析</h3><p>好了，参数来源都知道了，我们回过头看看这个网页。页面是不是感觉就是个空架子？毫无css痕迹，没关系，新浪本来就没打算把这个页面主动呈现给用户。但对于爬虫而言，这却是极好的，为什么这么说？原因如下：</p><ol><li>图片齐全，没有遗漏，就是个可视化的数据库</li><li>样式少，页面简单，省流量，爬取快</li><li>静态网页，分页存储，所见即所得</li><li>源码包含了所有微博的<strong>首图</strong>和<strong>组图链接</strong></li></ol><p>这样的网页用来练手再合适不过。但要注意的是上面第4点，什么是<strong>首图</strong>和<strong>组图链接</strong>呢，很好理解。每篇博客可能包含多张图片，那就是<strong>组图</strong>，但该页面只显示博客的第一张图片，即所谓的<strong>首图</strong>，<strong>组图链接</strong>指向的是存储着该组图所有图片的网址。</p><p>由于本人微博没组图，所以此处以刘亦菲微博为例，说明单图及组图的图链格式</p><p><img src="/assets/spider/sina/pictures.png" alt="pictures"></p><p>图中的上面一篇微博只有一张图片，可以轻易获取到原图链接，注意是<strong>原图</strong>，因为我们在页面能看到的是缩略图，但要爬取的当然是<strong>原图</strong>啦。</p><p>图中下面的微博包含组图，在图片右侧的<code>Chrome</code>开发工具可以看到组图链接。</p><p><a href="https://weibo.cn/mblog/picAll/FCQefgeAr?rl=2" target="_blank" rel="noopener">https://weibo.cn/mblog/picAll/FCQefgeAr?rl=2</a> </p><p>打开组图链接，可以看到图片如下图所示：</p><p><img src="/assets/spider/sina/picture_url.png" alt="picture&#39;s url"></p><p>可以看到缩略图链接以及原图链接，然后我们点击<strong>原图</strong>看一下。</p><p><img src="/assets/spider/sina/picture_source.png" alt="picture&#39;s origin url"></p><p>可以发现，弹出页面的链接与上图显示的不同，但与上图中的缩略图链接极为相似。它们分别是：</p><ol><li>缩略图：<a href="http://ww1.sinaimg.cn/thumb180/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg" target="_blank" rel="noopener">http://ww1.sinaimg.cn/thumb180/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg</a></li><li>原图： <a href="http://wx1.sinaimg.cn/large/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg" target="_blank" rel="noopener">http://wx1.sinaimg.cn/large/c260f7ably1fn4vd7ix0qj20rs1aj1kx.jpg</a></li></ol><p>可以看出，只是一个<code>thumb180</code>和<code>large</code>的区别。既然发现了规律，那就好办多了，我们只要知道缩略图的网址，就可以将域名后的第一级子域名替换成<code>large</code>就可以了，而不用获取<strong>原图</strong>链接再跳转一次。</p><p>而且，多次尝试可以发现组图链接及缩略图链接满足正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 组图链接：</span></span><br><span class="line">imglist_reg = <span class="string">r'href="(https://weibo.cn/mblog/picAll/.&#123;9&#125;\?rl=2)"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 缩略图</span></span><br><span class="line">img_reg = <span class="string">r'src="(http://w.&#123;2&#125;\.sinaimg.cn/(.&#123;6,8&#125;)/.&#123;32,33&#125;.(jpg|gif))"'</span></span><br></pre></td></tr></table></figure><p>到此，新浪微博的解析过程就结束了，图链的格式以及获取方式也都清楚了。下面就可以设计方案进行爬取了。</p><h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>根据解析结果，很容易制定出以下爬取方案：</p><ol><li>给定微博用户名<code>litreily</code></li><li>进入待爬取用户主页，即可从网址中获取<code>uid: 2657006573</code></li><li>获取本人登录微博后的<code>cookies</code>（请求报文需要用到<code>cookies</code>）</li><li>逐一爬取 <a href="https://weibo.cn/2657006573/profile?filter=0&amp;page={1,2,3,...}" target="_blank" rel="noopener">https://weibo.cn/2657006573/profile?filter=0&amp;page={1,2,3,...}</a> </li><li>解析每一页的源码，获取单图链接及组图链接，<ul><li>单图：直接获取该图缩略图链接；</li><li>组图：爬取组图链接，循环获取组图页面所有图片的缩略图链接</li></ul></li><li>循环将第5步获取到的图链替换为原图链接，并下载至本地</li><li>重复第4-6步，直至没有图片</li></ol><h3 id="获取cookies"><a href="#获取cookies" class="headerlink" title="获取cookies"></a>获取cookies</h3><p>针对以上方案，其中有几个重点内容，其一就是<code>cookies</code>的获取，我暂时还没学怎么自动获取<code>cookies</code>，所以目前是登录微博后手动获取的。</p><p><img src="/assets/spider/sina/cookies.png" alt="get cookies"></p><h3 id="下载网页"><a href="#下载网页" class="headerlink" title="下载网页"></a>下载网页</h3><p>下载网页用的是<code>python3</code>自带的<code>urllib</code>库，当时没学<code>requests</code>，以后可能也很少用<code>urllib</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(url, headers = headers)</span><br><span class="line">        page = urllib.request.urlopen(req)</span><br><span class="line">        html = page.read().decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed"</span> % url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><h3 id="获取存储路径"><a href="#获取存储路径" class="headerlink" title="获取存储路径"></a>获取存储路径</h3><p>由于我是在<code>win10</code>下编写的代码，但是个人比较喜欢用<code>bash</code>，所以图片的存储路径有以下两种格式，<code>_get_path</code>函数会自动判断当前操作系统的类型，然后选择相应的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(uid)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/sina/'</span> + uid,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/sina/'</span> + uid</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><p>幸好<code>windows</code>是兼容<code>linux</code>系统的斜杠符号的，不然程序中的相对路径替换还挺麻烦。</p><h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><p>由于选用的<code>urllib</code>库，所以下载图片就使用<code>urllib.request.urlretrieve</code>了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># image url of one page is saved in imgurls</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgurls:</span><br><span class="line">    imgurl = img[<span class="number">0</span>].replace(img[<span class="number">1</span>], <span class="string">'large'</span>)</span><br><span class="line">    num_imgs += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urllib.request.urlretrieve(imgurl, <span class="string">'&#123;&#125;/&#123;&#125;.&#123;&#125;'</span>.format(path, num_imgs, img[<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># display the raw url of images</span></span><br><span class="line">        print(<span class="string">'\t%d\t%s'</span> % (num_imgs, imgurl))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(str(e))</span><br><span class="line">        print(<span class="string">'\t%d\t%s failed'</span> % (num_imgs, imgurl))</span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>其它细节详见源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: litreily</span></span><br><span class="line"><span class="comment"># date: 2018.02.05</span></span><br><span class="line"><span class="string">"""Capture pictures from sina-weibo with user_id."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(uid)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/sina/'</span> + uid,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/sina/'</span> + uid</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(url, headers = headers)</span><br><span class="line">        page = urllib.request.urlopen(req)</span><br><span class="line">        html = page.read().decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed"</span> % url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(uid, headers, path)</span>:</span></span><br><span class="line">    filter_mode = <span class="number">1</span>      <span class="comment"># 0-all 1-original 2-pictures</span></span><br><span class="line">    num_pages = <span class="number">1</span></span><br><span class="line">    num_blogs = <span class="number">0</span></span><br><span class="line">    num_imgs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># regular expression of imgList and img</span></span><br><span class="line">    imglist_reg = <span class="string">r'href="(https://weibo.cn/mblog/picAll/.&#123;9&#125;\?rl=2)"'</span></span><br><span class="line">    imglist_pattern = re.compile(imglist_reg)</span><br><span class="line">    img_reg = <span class="string">r'src="(http://w.&#123;2&#125;\.sinaimg.cn/(.&#123;6,8&#125;)/.&#123;32,33&#125;.(jpg|gif))"'</span></span><br><span class="line">    img_pattern = re.compile(img_reg)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start capture picture of uid:'</span> + uid)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        url = <span class="string">'https://weibo.cn/%s/profile?filter=%s&amp;page=%d'</span> % (uid, filter_mode, num_pages)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. get html of each page url</span></span><br><span class="line">        html = _get_html(url, headers)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. parse the html and find all the imgList Url of each page</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># &lt;div class="c" id="M_G4gb5pY8t"&gt;&lt;div&gt;</span></span><br><span class="line">        blogs = soup.body.find_all(attrs=&#123;<span class="string">'id'</span>:re.compile(<span class="string">r'^M_'</span>)&#125;, recursive=<span class="keyword">False</span>)</span><br><span class="line">        num_blogs += len(blogs)</span><br><span class="line"></span><br><span class="line">        imgurls = []        </span><br><span class="line">        <span class="keyword">for</span> blog <span class="keyword">in</span> blogs:</span><br><span class="line">            blog = str(blog)</span><br><span class="line">            imglist_url = imglist_pattern.findall(blog)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> imglist_url:</span><br><span class="line">                <span class="comment"># 2.1 get img-url from blog that have only one pic</span></span><br><span class="line">                imgurls += img_pattern.findall(blog)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 2.2 get img-urls from blog that have group pics</span></span><br><span class="line">                html = _get_html(imglist_url[<span class="number">0</span>], headers)</span><br><span class="line">                imgurls += img_pattern.findall(html)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> imgurls:</span><br><span class="line">            print(<span class="string">'capture complete!'</span>)</span><br><span class="line">            print(<span class="string">'captured pages:%d, blogs:%d, imgs:%d'</span> % (num_pages, num_blogs, num_imgs))</span><br><span class="line">            print(<span class="string">'directory:'</span> + path)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. download all the imgs from each imgList</span></span><br><span class="line">        print(<span class="string">'PAGE %d with %d images'</span> % (num_pages, len(imgurls)))</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgurls:</span><br><span class="line">            imgurl = img[<span class="number">0</span>].replace(img[<span class="number">1</span>], <span class="string">'large'</span>)</span><br><span class="line">            num_imgs += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                urllib.request.urlretrieve(imgurl, <span class="string">'&#123;&#125;/&#123;&#125;.&#123;&#125;'</span>.format(path, num_imgs, img[<span class="number">2</span>]))</span><br><span class="line">                <span class="comment"># display the raw url of images</span></span><br><span class="line">                print(<span class="string">'\t%d\t%s'</span> % (num_imgs, imgurl))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(str(e))</span><br><span class="line">                print(<span class="string">'\t%d\t%s failed'</span> % (num_imgs, imgurl))</span><br><span class="line">        num_pages += <span class="number">1</span></span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># uids = ['2657006573','2173752092','3261134763','2174219060']</span></span><br><span class="line">    uid = <span class="string">'2657006573'</span></span><br><span class="line">    path = _get_path(uid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cookie is form the above url-&gt;network-&gt;request headers</span></span><br><span class="line">    cookies = <span class="string">''</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: cookies&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># capture imgs from sina</span></span><br><span class="line">    _capture_images(uid, headers, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用时记得修改<code>main</code>函数中的<code>cookies</code>和<code>uid</code>！</p><h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/sina/capturer_litreily.png" alt="capture litreily"></p><p><img src="/assets/spider/sina/capturer_litreily_end.png" alt="capture litreily end"></p><p><img src="/assets/spider/sina/captured_pictures.png" alt="captured pictures"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li>该爬虫已存放至开源项目<a href="https://github.com/Litreily/cfachina_spider" target="_blank" rel="noopener">capturer</a>，欢迎交流</li><li>由于是首个爬虫，所以许多地方有待改进，相对的<a href="http://www.litreily.top/2018/03/17/lofter/">LOFTER爬虫</a>就更娴熟写了</li><li>目前没有发现新浪微博有明显的反爬措施，但还是按需索取为好</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实，新浪微博用户图片爬虫是我学习&lt;code&gt;python&lt;/code&gt;以来写的第一个爬虫，只不过当时懒，后来爬完&lt;code&gt;Lofter&lt;/code&gt;后觉得有必要总结一下，所以就有了第一篇爬虫博客。现在暂时闲下来了，准备把新浪的这个也补上。&lt;/p&gt;
&lt;p&gt;言归正传，既然选
      
    
    </summary>
    
      <category term="Python" scheme="http://www.litreily.top/categories/Python/"/>
    
    
      <category term="tools" scheme="http://www.litreily.top/tags/tools/"/>
    
      <category term="spider" scheme="http://www.litreily.top/tags/spider/"/>
    
      <category term="sina" scheme="http://www.litreily.top/tags/sina/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫1 - 爬取网易LOFTER图片</title>
    <link href="http://www.litreily.top/2018/03/17/lofter/"/>
    <id>http://www.litreily.top/2018/03/17/lofter/</id>
    <published>2018-03-17T03:02:17.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p><code>LOFTER</code>是网易出品的优质轻博客，灵感源于国外的<code>tumblr</code>，但比之更加文艺，更加本地化。本人非常喜欢<code>LOFTER</code>的UI设计，以及其中的优质用户和内容，似乎网易并不擅长推广，所以受众并不广泛。这都是题外话，本文主要记录作者近期学习<code>python3</code>并用之爬取<code>LOFTER</code>用户图片的过程和成果，与大家交流分享。</p><blockquote><p>本文将以本人<a href="http://litreily.lofter.com" target="_blank" rel="noopener">litreily</a>博客为例说明整个爬取过程</p></blockquote><h2 id="分析LOFTER站点"><a href="#分析LOFTER站点" class="headerlink" title="分析LOFTER站点"></a>分析LOFTER站点</h2><p>在爬取站点之前，首先需要分析站点的关键信息有哪些，如果给自己提问，可能会有以下问题：</p><ol><li>用户的主页网址格式是？</li><li>用户博客链接的格式是？</li><li>每篇博客内的图片链接的格式是？</li><li>不同用户的主页模板不同，是否可以按同样方法抓取博客信息？</li><li>用户的博客数量巨大，主页以什么方式分页？</li><li>有没有归档页面方便爬取（大多数网站都有归档页面）？</li></ol><p>当然，这些问题不是一下子就能想出来，可以在探索网页内容的过程逐步展开，并思考下一步该考虑的问题，下面针对各个问题对主页进行探索分析。</p><h3 id="主页信息"><a href="#主页信息" class="headerlink" title="主页信息"></a>主页信息</h3><blockquote><p>主页: http://[username].lofter.com</p></blockquote><p><img src="/assets/spider/lofter/litreily.png" alt="litreily"></p><p>从主页可以看到<a href="http://litreily.lofter.com/view" target="_blank" rel="noopener">归档</a>的链接，暂时不管。不同的用户，其主页所用模板不尽一致，<code>LOFTER</code>为提供了大量精美的主页模板，以满足不同用户的需求：</p><p><img src="/assets/spider/lofter/lofterTemplet.png" alt="lofter templet"></p><p>然而，正是因为所用模板不同，其网页内容格式也不同，这个从不同模板中图片的位置，大小，图片信息等就可以看出来。相同的资源，不同的展示方式，就好像同样一件艺术品，既可以摆放在玻璃框中，也可以悬挂在高空。</p><p>当然这不是本文重点，这里只是为了说明不同用户的主页信息展示不一样，会给爬虫爬取带来一定影响。</p><h3 id="分页信息"><a href="#分页信息" class="headerlink" title="分页信息"></a>分页信息</h3><p>点击主页尾部的下一页，可以跳转至下一页，除首页和末页外，都会有上一页和下一页的链接，这里就给了我们一个提示，我们可以先抓取首页信息，然后从中抓取到<strong>下一页</strong>的链接，然后不断获取<strong>下一页</strong>的博客信息。</p><p><img src="/assets/spider/lofter/pages.png" alt="pages"></p><p>或者更简单点，看网址栏中的网址格式:</p><blockquote><p>分页： <code>http://[username].lofter.com/?page=[pageNumber]&amp;t=[timeStamp]</code></p></blockquote><p>直接使用<code>for</code>循环修改<code>page</code>值，逐页爬取博客信息。这貌似是个不错的想法，好，假设这样可行，那我们来分析每一页的信息。</p><p><img src="/assets/spider/lofter/postLink.png" alt="post link"></p><p>如上图所示，首先找到博文永久链接<code>http://litreily.lofter.com/post/44fbca_1265bb3e</code></p><p>针对含有图片的某一篇博文，<strong>litreily</strong>所用模板中会出现两次博文链接（见图中红框标注的两处），倘若我们使用正则表达式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r'"http://.*lofter.com/post/[\w_]*"'</span>, html)</span><br></pre></td></tr></table></figure><p>将对每篇博文匹配出两个一样的链接，这可不是我们想要的，那咋整，匹配完再把重复的删了？不至于这么麻烦，细看两处链接前后信息，可以看到两处链接的<code>class</code>属性不一致，好办了，咱改改正则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r'&lt;a class="img" href="(http://.*lofter.com/post/[\w_]*)"&gt;'</span>, html)</span><br></pre></td></tr></table></figure><p>好像可以了，这不就可以按页抓取博客链接，然后接着分析每篇博文信息不就好了么。我原本就想这么干，可是当我查看了不同用户的排版以及相应的链接信息后，整个人都不好了，一千个用户就是一千个哈姆雷特啊。如果你发现有统一解析所有用户模板信息的方法，那肯定是你看的模板不够多。</p><p>所以呢，这条路是走不通了，至少我没再往这条路上走。打道回府，只不过重头再来，路漫漫其修远兮，吾将上下而求索。</p><p>靠，说了半天，原来走不通，那你说个毛线！！！淡定淡定，都是文明人，后面的风景很远，额不是，，，是很美，请耐心等待…</p><h3 id="归档页信息"><a href="#归档页信息" class="headerlink" title="归档页信息"></a>归档页信息</h3><blockquote><p>归档页：<code>http://[username].lofter.com/view</code></p></blockquote><p>好了，还记得前面说的<strong>归档</strong>吧，归档可是个好东西，它把所有博文都按日期归档，最主要的是，所有用户的归档页面都是同一个模板，不管大V小v还是普通老百姓，真的是一视同仁。剩下的问题就是<strong>如何从归档页抓取每篇博客的真实路径</strong>。</p><p><img src="/assets/spider/lofter/archive.png" alt="archive"></p><p>先来看看归档页面的结构吧，博客按月份归档，每篇博客仅显示首张图片缩略图或纯文本。然后<code>F12</code>打开调试工具，如下图所示，每个月份对应一个<code>&lt;div class=&quot;m-filecnt m-filecnt-1&quot;&gt;</code>这样的节点，每个月份节点包含了本月所有博客的入口信息，一篇博客对应一个<code>id</code>号，以及一个博客的<strong>相对路径</strong>。<code>id</code>神马的不用关心，重点就是这个<strong>相对路径</strong>，有了它不就有了博客的绝对路径了么。</p><ul><li>相对路径：”/post/44fbca_1265bb3e”</li><li>绝对路径：”http://[username].lofter.com/post/44fbca_1265bb3e”</li></ul><p><img src="/assets/spider/lofter/archive_html.png" alt="archive structure"></p><p>这样看来，那岂不是只要抓取这一个归档页面就可以抓到所有的博客路径了呢？呵呵，真的这么容易吗？显然不大可能，当我们下拉页面时，归档信息将动态加载刷新，没错，是动态的！！！意料之中的猝不及防</p><p>接着我在Chrome浏览器中<code>Ctrl+U</code>看了看网页的源码（太长这就不放图了），果然不出所料，动态数据在源码中是木有的，只有一个脚本在那静静的躺着，躺着，躺着。。。难道就要放弃了吗，当然不！<strong>只要是网络通信，就必然有请求包和响应包</strong></p><p>那现在的问题就是，动态网页的数据是如果获取到的？动态数据的<strong>真实请求</strong>是什么？抓包看看呗，打开浏览器调试工具中的<code>Network</code>，刷新归档页，看看页面加载过程，找到真实请求，这个很好找，这类请求的后缀一般不会是png,jpg,gif,js,css等，而且多半是<strong>POST</strong>包，并且会出现在一堆图片请求的前面。</p><p><img src="/assets/spider/lofter/post.png" alt="post"></p><p>好了，找到了，就是上面这货。现在归档数据请求的链接有了，确实是<strong>POST</strong>包，同样，请求包的头部信息<code>headers</code>和请求参数<code>request payload</code>也有了。</p><p><img src="/assets/spider/lofter/post_values.png" alt="request values"></p><p>现在的关键问题是，这些请求包中的参数都是干嘛的？经我多方尝试、猜测与观察，总结如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">callCount=1       # 固定</span><br><span class="line">scriptSessionId=$&#123;scriptSessionId&#125;187   # 固定</span><br><span class="line">httpSessionId=    # 固定</span><br><span class="line">c0-scriptName=ArchiveBean       # 固定</span><br><span class="line">c0-methodName=getArchivePostByTime      # 固定</span><br><span class="line">c0-id=0           # 固定</span><br><span class="line">c0-param0=number:4520906        # 用户ID，可从用户主页源码获取</span><br><span class="line">c0-param1=number:1521342313224  # 时间戳，最最最关键参数！</span><br><span class="line">c0-param2=number:50       # 单次请求博客篇数，可以按需求修改</span><br><span class="line">c0-param3=boolean:false   # 固定</span><br><span class="line">batchId=822456            # 6位随机数，爬取时可以固定</span><br></pre></td></tr></table></figure><p>所以我们模拟请求包的时候就按这个来就可以了，至于时间戳怎么获取，请求包的<code>headers</code>如何确定，后面会有详述。</p><p>下面我们来看看请求后得到的响应包长啥样，look，就下面这个，看到没，<strong><code>permalink</code></strong>, 千呼万唤始出来啊，这不就是我们想要的博客固定路径了么。响应包并不是<code>html</code>文件，而是一组数据，我觉着归档页包含的那个脚本就是根据这个数据文件进而请求首张图片信息或文本信息的，当然这是我的猜测了，有兴趣的可以去看看那个脚本。</p><p><img src="/assets/spider/lofter/post_response.png" alt="post response"></p><p>有了这组数据，咱就可以获取每次请求得到的博客路径列表，进而逐一爬取博客内的图片链接了。</p><p>到此处为止，归档页的信息就分析完了，我们已经知道该发送怎样的请求包去获取归档数据，与此同时，我们也知道了从归档页如何获取每篇博客的真实路径。</p><p>下面就来看看当我们知道博客路径并抓取后，该如何获取每篇博客正文内的图片链接。</p><h3 id="博客页信息"><a href="#博客页信息" class="headerlink" title="博客页信息"></a>博客页信息</h3><blockquote><p>博客： <code>http://[username].lofter.com/post/******_********</code></p></blockquote><p>以上面获取的博客 <a href="http://litreily.lofter.com/post/33a459_1230cb50" target="_blank" rel="noopener">http://litreily.lofter.com/post/33a459_1230cb50</a> 为例，大部分博客内的图片都不止一张，这也是必须访问博客页本身的主要原因，好了照旧查看页面元素。</p><p><img src="/assets/spider/lofter/blog_pic.png" alt="blog pictures"></p><p>可以发现每篇博客内所有图片的大图链接都是上图框选中这样的，都有着同样的属性<code>bigimgsrc</code>，并且是博客页面唯一的。由于每篇博客源码内包含了该篇博客所有的图片链接，所以当我们获取了某篇博客的<code>html</code>文件后，便可以使用正则表达式获取所有图片链接。</p><p>至此，我们已经掌握了爬取<code>lofter</code>单用户博客图片所需的所有信息，是时候确定爬取方案了。</p><h2 id="确定爬取方案"><a href="#确定爬取方案" class="headerlink" title="确定爬取方案"></a>确定爬取方案</h2><p>首先，根据给定的<code>username</code>获取<code>uid</code>作为<code>POST</code>请求包数据中的一分子；然后，循环执行以下步骤直至全部爬取完成</p><ol><li>生成或更新归档页请求数据</li><li>模拟归档页面发送POST请求</li><li>解析响应数据并获取博客链接</li><li>逐一爬取博客内容</li><li>解析博客内容并获取图片链接</li><li>逐一下载图片至本地</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>方案确定好了，那就撸起袖子加油干吧！</p><h3 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h3><ul><li>requests</li></ul><p>Only one! 没错，依赖的第三方库就这一个，怎么装咱这就不说了</p><h3 id="获取用户ID"><a href="#获取用户ID" class="headerlink" title="获取用户ID"></a>获取用户ID</h3><p>用户ID，确切的说是用户博客的唯一ID，是归档页请求报文中的参数之一，通过查看主页源码找到了相应的字符串，所以只要用<code>request.get</code>抓取首页然后匹配ID字符串就可以了，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_blogid</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(<span class="string">'http://%s.lofter.com'</span> % username)</span><br><span class="line">        id_reg = <span class="string">r'src="http://www.lofter.com/control\?blogId=(.*)"'</span></span><br><span class="line">        blogid = re.search(id_reg, html.text).group(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'The blogid of %s is: %s'</span> % (username, blogid))</span><br><span class="line">        <span class="keyword">return</span> blogid</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'get blogid from http://%s.lofter.com failed'</span> % username)</span><br><span class="line">        print(<span class="string">'please check your username.'</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="生成POST请求数据"><a href="#生成POST请求数据" class="headerlink" title="生成POST请求数据"></a>生成POST请求数据</h3><p>根据前面归档页的分析，我们知道POST请求中除了一些固定参数外，还有用户ID，时间戳<code>timestamp</code>以及单次请求的博客篇数<code>N</code>需要确定，而ID已经在前面已经获取到了；博客篇数可以自定义一个数，如40；最后就剩下时间戳了。</p><p>经过多次尝试发现，这个时间戳<code>timestamp</code>是所有参数中唯一一个需要在每次请求中不断更新的参数。那么它更新的依据是什么呢？每篇博客都对应着一个<code>timestamp</code>，而且是博客的发布时间，每次请求后得到的最后一篇博客的<code>timestamp</code>就可以作为下一次请求的<code>timestamp</code>。为什么呢，因为我多次实验发现，在给定一个<code>timestamp</code>并发送POST请求后，服务器会<strong>以请求参数中的时间戳为起点按时间顺序往前检索出指定篇数(如：40)的博客信息</strong></p><p>响应包的博客信息中包含了每篇博客的时间戳，所以每次获取响应包后，只要解析出响应包中最后一篇博客的时间戳，就可以作为下一次请求中的时间戳。</p><p>根据以上分析，可以写出获取时间戳的函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time_pattern: re.compile('s%d\.time=(.*);s.*type' % (query_number-1))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_timestamp</span><span class="params">(html, time_pattern)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> html:</span><br><span class="line">        timestamp = round(time.time() * <span class="number">1000</span>)  <span class="comment"># first timestamp(ms)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        timestamp = time_pattern.search(html).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> str(timestamp)</span><br></pre></td></tr></table></figure><blockquote><p>注意，首次请求的时间戳可以直接使用当前系统时间(ms)</p></blockquote><h3 id="发送POST请求包"><a href="#发送POST请求包" class="headerlink" title="发送POST请求包"></a>发送POST请求包</h3><p>POST请求包的<code>url</code>是固定的，<code>data</code>就是前面获取到的所有请求参数，<code>headers</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: username + <span class="string">'.lofter.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://%s.lofter.com/view'</span> % username,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中，<code>User-Agent</code>用于模拟浏览器请求，后面三个参数最好都加上，否则可能无法请求成功。POST请求其实就是一条语句<code>requests.post</code>，具体实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, data, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.post(url, data, headers = headers)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed\n%s"</span> % (url, str(e)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><h3 id="解析POST响应包"><a href="#解析POST响应包" class="headerlink" title="解析POST响应包"></a>解析POST响应包</h3><p>在获取响应包的文本<code>html</code>后，便可从中获取本次请求得到的所有博客的相对路径，然后生成绝对路径，进而逐一抓取博客原文，从原文中抓取所有图链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get urls of blogs: s3.permalink="44fbca_19a6b1b"</span></span><br><span class="line">new_blogs = blog_url_pattern.findall(html)</span><br><span class="line">num_new_blogs = len(new_blogs)</span><br><span class="line">num_blogs += num_new_blogs </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num_new_blogs != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'NewBlogs:%d\tTotalBolgs:%d'</span> % (num_new_blogs, num_blogs))</span><br><span class="line">    <span class="comment"># get imgurls from new_blogs</span></span><br><span class="line">    imgurls = []</span><br><span class="line">    <span class="keyword">for</span> blog <span class="keyword">in</span> new_blogs:</span><br><span class="line">        imgurls.extend(_get_imgurls(username, blog, headers))</span><br><span class="line">    num_imgs += len(imgurls)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">以上代码便是获取POST的响应包`html`后的解析操作，其中`_get_imurls`是用于抓取博客原文并解析出所有图链的函数。</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_imgurls</span><span class="params">(username, blog, headers)</span>:</span></span><br><span class="line">    blog_url = <span class="string">'http://%s.lofter.com/post/%s'</span> % (username, blog)</span><br><span class="line">    blog_html = requests.get(blog_url, headers = headers).text</span><br><span class="line">    imgurls = re.findall(<span class="string">r'bigimgsrc="(.*?)"'</span>, blog_html)</span><br><span class="line">    print(<span class="string">'Blog\t%s\twith %d\tpictures'</span> % (blog_url, len(imgurls)))</span><br><span class="line">    <span class="keyword">return</span> imgurls</span><br></pre></td></tr></table></figure><h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(imgurl, path)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image_request = requests.get(imgurl, headers = headers, timeout = <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> image_request.status_code == <span class="number">200</span>:</span><br><span class="line">                open(path, <span class="string">'wb'</span>).write(image_request.content)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\tGet %s failed\n\terror:%s'</span> % (imgurl, e))</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                imgurl = re.sub(<span class="string">'^http://img.*?\.'</span>,<span class="string">'http://img.'</span>,imgurl)</span><br><span class="line">                print(<span class="string">'\tRetry '</span> + imgurl)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'\tRetry fail'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>有了图链，最后的工作当然是下载图片了，上面这段代码便是用来下载图片的，<code>headers</code>是为了模拟浏览器访问。那为什么要尝试下载两次呢？因为我在抓取过程中，有时候会出现抓取失败的情况，并显示以下错误信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Connection aborted.'</span><span class="string">,</span> <span class="string">RemoteDisconnected('Remote</span> <span class="string">end</span> <span class="string">closed</span> <span class="string">connection</span> <span class="string">without</span> <span class="string">response'</span></span><br></pre></td></tr></table></figure><p>所以在<code>Retry</code>前先将图链对应的<code>host</code>稍加修改,这样可以保证更高的成功率，但并不能完全避免。对于下载失败的情况，可能是：</p><ol><li>被反爬了（极大可能）</li><li>网络通信不畅（可能性低）</li><li>图链失效</li><li>服务器出毛病了</li></ol><p>有时候，同样一个图链，过一段时间去抓就好了，或者换个网络就好了。我猜测是被反爬，但证据不足，所以只能降低爬取频率，比如每发送接收一次POST请求便<code>sleep</code>10s左右，但还是会有失败的情况，如果大家有更好的意见，欢迎交流。目前情况，正常情况100%爬取完全没问题，异常情况90%以上吧。</p><h3 id="主循环"><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h3><p>好了，其它零碎的代码就不多说了，爬虫主循环流程如下，其实就是以上步骤的整合：</p><ol><li>爬取归档页面指定篇数<code>query_number</code>的博文链接<code>new_blogs</code></li><li>逐个爬取博文<code>blog</code>数据，获取每篇<code>blog</code>的所有大图链接<code>imgurls</code></li><li>逐个爬取大图链接<code>imgurls</code>,下载图片至本地目录</li><li>判断是否已爬取完所有博文<ul><li>若已爬完，则显示爬取成果信息，并退出</li><li>若未爬完，则更新请求包中的时间戳<code>timestamp</code>，返回第1步继续爬取新的博文</li></ul></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># date: 2018.03.07</span></span><br><span class="line"><span class="string">"""Capture pictures from lofter with username."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span><span class="params">(username)</span>:</span></span><br><span class="line">    path = &#123;</span><br><span class="line">        <span class="string">'Windows'</span>: <span class="string">'D:/litreily/Pictures/python/lofter/'</span> + username,</span><br><span class="line">        <span class="string">'Linux'</span>: <span class="string">'/mnt/d/litreily/Pictures/python/lofter/'</span> + username</span><br><span class="line">    &#125;.get(platform.system())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_html</span><span class="params">(url, data, headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.post(url, data, headers = headers)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"get %s failed\n%s"</span> % (url, str(e)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_blogid</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(<span class="string">'http://%s.lofter.com'</span> % username)</span><br><span class="line">        id_reg = <span class="string">r'src="http://www.lofter.com/control\?blogId=(.*)"'</span></span><br><span class="line">        blogid = re.search(id_reg, html.text).group(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'The blogid of %s is: %s'</span> % (username, blogid))</span><br><span class="line">        <span class="keyword">return</span> blogid</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'get blogid from http://%s.lofter.com failed'</span> % username)</span><br><span class="line">        print(<span class="string">'please check your username.'</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_timestamp</span><span class="params">(html, time_pattern)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> html:</span><br><span class="line">        timestamp = round(time.time() * <span class="number">1000</span>)  <span class="comment"># first timestamp(ms)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        timestamp = time_pattern.search(html).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> str(timestamp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_imgurls</span><span class="params">(username, blog, headers)</span>:</span></span><br><span class="line">    blog_url = <span class="string">'http://%s.lofter.com/post/%s'</span> % (username, blog)</span><br><span class="line">    blog_html = requests.get(blog_url, headers = headers).text</span><br><span class="line">    imgurls = re.findall(<span class="string">r'bigimgsrc="(.*?)"'</span>, blog_html)</span><br><span class="line">    print(<span class="string">'Blog\t%s\twith %d\tpictures'</span> % (blog_url, len(imgurls)))</span><br><span class="line">    <span class="keyword">return</span> imgurls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_capture_images</span><span class="params">(imgurl, path)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image_request = requests.get(imgurl, headers = headers, timeout = <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> image_request.status_code == <span class="number">200</span>:</span><br><span class="line">                open(path, <span class="string">'wb'</span>).write(image_request.content)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\tGet %s failed\n\terror:%s'</span> % (imgurl, e))</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                imgurl = re.sub(<span class="string">'^http://img.*?\.'</span>,<span class="string">'http://img.'</span>,imgurl)</span><br><span class="line">                print(<span class="string">'\tRetry '</span> + imgurl)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'\tRetry fail'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_query_data</span><span class="params">(blogid, timestamp, query_number)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">'callCount'</span>:<span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'scriptSessionId'</span>:<span class="string">'$&#123;scriptSessionId&#125;187'</span>,</span><br><span class="line">    <span class="string">'httpSessionId'</span>:<span class="string">''</span>,</span><br><span class="line">    <span class="string">'c0-scriptName'</span>:<span class="string">'ArchiveBean'</span>,</span><br><span class="line">    <span class="string">'c0-methodName'</span>:<span class="string">'getArchivePostByTime'</span>,</span><br><span class="line">    <span class="string">'c0-id'</span>:<span class="string">'0'</span>,</span><br><span class="line">    <span class="string">'c0-param0'</span>:<span class="string">'number:'</span> + blogid,</span><br><span class="line">    <span class="string">'c0-param1'</span>:<span class="string">'number:'</span> + timestamp,</span><br><span class="line">    <span class="string">'c0-param2'</span>:<span class="string">'number:'</span> + query_number,</span><br><span class="line">    <span class="string">'c0-param3'</span>:<span class="string">'boolean:false'</span>,</span><br><span class="line">    <span class="string">'batchId'</span>:<span class="string">'123456'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># prepare paramters</span></span><br><span class="line">    username = <span class="string">'litreily'</span></span><br><span class="line">    blogid = _get_blogid(username)</span><br><span class="line">    query_number = <span class="number">40</span></span><br><span class="line">    time_pattern = re.compile(<span class="string">'s%d\.time=(.*);s.*type'</span> % (query_number<span class="number">-1</span>))</span><br><span class="line">    blog_url_pattern = re.compile(<span class="string">r's[\d]*\.permalink="([\w_]*)"'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># creat path to save imgs</span></span><br><span class="line">    path = _get_path(username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parameters of post packet</span></span><br><span class="line">    url = <span class="string">'http://%s.lofter.com/dwr/call/plaincall/ArchiveBean.getArchivePostByTime.dwr'</span> % username</span><br><span class="line">    data = _create_query_data(blogid, _get_timestamp(<span class="keyword">None</span>, time_pattern), str(query_number))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: username + <span class="string">'.lofter.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://%s.lofter.com/view'</span> % username,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_blogs = <span class="number">0</span></span><br><span class="line">    num_imgs = <span class="number">0</span></span><br><span class="line">    index_img = <span class="number">0</span></span><br><span class="line">    print(<span class="string">'------------------------------- start line ------------------------------'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        html = _get_html(url, data, headers).text</span><br><span class="line">        <span class="comment"># get urls of blogs: s3.permalink="44fbca_19a6b1b"</span></span><br><span class="line">        new_blogs = blog_url_pattern.findall(html)</span><br><span class="line">        num_new_blogs = len(new_blogs)</span><br><span class="line">        num_blogs += num_new_blogs </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_new_blogs != <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'NewBlogs:%d\tTotalBolgs:%d'</span> % (num_new_blogs, num_blogs))</span><br><span class="line">            <span class="comment"># get imgurls from new_blogs</span></span><br><span class="line">            imgurls = []</span><br><span class="line">            <span class="keyword">for</span> blog <span class="keyword">in</span> new_blogs:</span><br><span class="line">                imgurls.extend(_get_imgurls(username, blog, headers))</span><br><span class="line">            num_imgs += len(imgurls)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># download imgs</span></span><br><span class="line">            <span class="keyword">for</span> imgurl <span class="keyword">in</span> imgurls:</span><br><span class="line">                index_img += <span class="number">1</span></span><br><span class="line">                paths = <span class="string">'%s/%d.%s'</span> % (path, index_img, re.search(<span class="string">r'(jpg|png|gif)'</span>, imgurl).group(<span class="number">0</span>))</span><br><span class="line">                print(<span class="string">'&#123;&#125;\t&#123;&#125;'</span>.format(index_img, paths))</span><br><span class="line">                _capture_images(imgurl, paths)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> num_new_blogs != query_number:</span><br><span class="line">            print(<span class="string">'------------------------------- stop line -------------------------------'</span>)</span><br><span class="line">            print(<span class="string">'capture complete!'</span>)</span><br><span class="line">            print(<span class="string">'captured blogs:%d images:%d'</span> % (num_blogs, num_imgs))</span><br><span class="line">            print(<span class="string">'download path:'</span> + path)</span><br><span class="line">            print(<span class="string">'-------------------------------------------------------------------------'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        data[<span class="string">'c0-param1'</span>] = <span class="string">'number:'</span> + _get_timestamp(html, time_pattern)</span><br><span class="line">        print(<span class="string">'The next TimeStamp is : %s\n'</span> % data[<span class="string">'c0-param1'</span>].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># wait a few second</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="爬取测试"><a href="#爬取测试" class="headerlink" title="爬取测试"></a>爬取测试</h2><p><img src="/assets/spider/lofter/lofter_spider.png" alt="lofter spider"></p><p><img src="/assets/spider/lofter/pictures.png" alt="pictures"></p><h2 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h2><ul><li>Github 源码：<a href="https://github.com/Litreily/capturer" target="_blank" rel="noopener">https://github.com/Litreily/capturer</a></li><li>欢迎交流探讨与STAR</li><li>请节制使用！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;LOFTER&lt;/code&gt;是网易出品的优质轻博客，灵感源于国外的&lt;code&gt;tumblr&lt;/code&gt;，但比之更加文艺，更加本地化。本人非常喜欢&lt;code&gt;LOFTER&lt;/code&gt;的UI设计，以及其中的优质用户和内容，似乎网易并不擅长推广，所以受众并不广泛。这
      
    
    </summary>
    
      <category term="Python" scheme="http://www.litreily.top/categories/Python/"/>
    
    
      <category term="tools" scheme="http://www.litreily.top/tags/tools/"/>
    
      <category term="spider" scheme="http://www.litreily.top/tags/spider/"/>
    
      <category term="lofter" scheme="http://www.litreily.top/tags/lofter/"/>
    
  </entry>
  
  <entry>
    <title>两款实用的DDos攻击工具</title>
    <link href="http://www.litreily.top/2018/02/22/ddos-attack/"/>
    <id>http://www.litreily.top/2018/02/22/ddos-attack/</id>
    <published>2018-02-22T12:53:38.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>之前为了重现某个bug，需要对网络设备进行ddos攻击测试，同时也是对设备的网络攻击防护功能进行抗压测试。临阵磨枪，google了两款攻击工具，windows平台的<code>hyenae</code>，以及Linux平台的<code>hping3</code>，在此记录一下两者的用法。</p><h2 id="Hyenae"><a href="#Hyenae" class="headerlink" title="Hyenae"></a>Hyenae</h2><p><code>hyenae</code>是在<code>Windows</code>平台上非常好用的一款<code>ddos</code>攻击工具，可以完成绝大多数的攻击操作。</p><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><ul><li><a href="https://sourceforge.net/projects/hyenae/" target="_blank" rel="noopener">https://sourceforge.net/projects/hyenae/</a></li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>ARP-Request flooding</li><li>ARP-Cache poisoning</li><li>PPPoE session initiation flooding</li><li>Blind PPPoE session termination</li><li>ICMP-Echo flooding</li><li>ICMP-Smurf attack</li><li>ICMP based TCP-Connection reset</li><li>TCP-SYN flooding</li><li>TCP-Land attack</li><li>Blind TCP-Connection reset</li><li>UDP flooding</li><li>DNS-Query flooding</li><li>DHCP-Discover flooding</li><li>DHCP starvation attack</li><li>DHCP-Release forcing</li><li>Cisco HSRP active router hijacking</li><li>Pattern based packet address configuration</li><li>Intelligent address and address protocol detection</li><li>Smart wildcard-based randomization</li><li>Daemon for setting up remote attack networks - HyenaeFE QT-Frontend support</li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p><img src="/assets/network/hyenae-interface.png" alt="hyenae interface"></p><p><code>hyenae</code>的界面比较简单，图中展示的是<code>SYN/ACK</code>洪泛攻击的配置选项。</p><ul><li><code>operation mode</code>中可以选择网卡</li></ul><ul><li><code>Network Protocol</code>中可以选择攻击方式对应的网络协议，如<code>SYN</code>洪泛攻击对应传输层的<code>TCP</code>，<code>IP</code>协议可选<code>IPv4, IPv6</code></li></ul><ul><li>攻击源的<code>IP</code>,<code>MAC</code>地址以及端口号可以非常灵活的设置，按<code>MAC-IP@port</code>的格式书写，如图中的攻击源匹配模式<code>%-172.17.14.158@80</code><ul><li>% 代表任意，在此处代表任意的MAC地址</li><li>172.17.14.158为伪造的攻击源IP，可以修改为任意的合法IP</li><li>80为端口号，80同时也是网络服务器的默认端口</li></ul></li></ul><ul><li>攻击目标的设置方式与攻击源一致，图中的<code>%-172.17.14.10@80</code><ul><li>% 随机生成MAC地址</li><li>172.17.14.10代表被攻击的IP</li><li>80为攻击目标的被攻击端口号</li></ul></li></ul><ul><li>针对<code>TCP</code>协议，右侧给出其对应的<code>5</code>个常见<code>flags</code>: <code>FIN, SYN, RST, PSH, ACK</code><ul><li>可以随意进行单选或多选，以实现不同的攻击方式</li><li>随意的组合可以产生正常通信过程中无法出现的数据包</li></ul></li></ul><ul><li>软件下方可以设置数据包的发送速率，默认为无限速发送，这会暂用大量带宽，导致网络拥塞；当然啦，这个软件本就是为了攻击网络，导致网络瘫痪正是其目的所在</li></ul><ul><li>选择不同的攻击方式，会显示相应不同的配置选项 </li></ul><p>简单说，这幅图的作用是产生<code>MAC</code>地址随机，<code>IP</code>为<code>172.17.14.158</code>，端口为80的伪造源，去攻击目的<code>MAC</code>随机，<code>IP</code>为<code>172.17.14.10</code>的<code>web server</code>。</p><p>由于目的<code>MAC</code>随机，<strong>当MAC地址首字节为奇数时，生成的数据包为广播包</strong>，此时将产生广播风暴，局域网内的所有设备都将收到大量的广播包，当速率很高时，很容易导致局域网瘫痪，这是需要注意的。本人当时年少轻狂，有次测试，使用全速率的广播式<code>SYN/ACK</code>攻击，直接导致部门的局域网瘫痪断网，幸好是晚上，后来找人重置了部门内的网络设备才恢复，想想真是罪过啊。</p><h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><ul><li>Land Attack<ul><li>src:  %-172.17.14.94@53</li><li>des: %-172.17.14.94@80</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3118 *** &#123;Land Attack&#125; are suppressed!</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br><span class="line">[DoS Attack: Land Attack] from <span class="built_in">source</span>: 172.17.14.94, port 53,</span><br></pre></td></tr></table></figure><ul><li>SYN/ACK scan (TCP SYN ACK)<ul><li>src: %-172.17.14.8@80</li><li>des: %-172.17.14.94@80</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3896 *** &#123;SYN/ACK Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: SYN/ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure><ul><li>ping flood (icmp echo)<ul><li>src:  %-172.17.14.8</li><li>des: %-172.17.14.94</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 1881 *** &#123;Ping Flood&#125; are suppressed!</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br><span class="line">[DoS Attack: Ping Flood] from <span class="built_in">source</span>: 172.17.14.8,</span><br></pre></td></tr></table></figure><ul><li>ping sweep (icmp echo)<ul><li>src:  %-%</li><li>des: %-%</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 1719 *** &#123;Ping Sweep&#125; are suppressed!</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 188.167.1.1,</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 113.172.1.5,</span><br><span class="line">[DoS Attack: Ping Sweep] from <span class="built_in">source</span>: 175.181.2.6,</span><br></pre></td></tr></table></figure><ul><li>RST Scan(TCP RST)<ul><li>src: %-172.17.14.8@80</li><li>des: %-172.17.14.94@80</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 4023 *** &#123;RST Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: RST Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure><ul><li>ACK scan (TCP ACK)<ul><li>src: %-172.17.14.8@80</li><li>des: %-172.17.14.94@80</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3989 *** &#123;ACK Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: ACK Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80</span><br></pre></td></tr></table></figure><ul><li>FIN scan(TCP FIN)<ul><li>src: %-172.17.14.8@80</li><li>des: %-172.17.14.94@80</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoS *** 3009 *** &#123;FIN Scan&#125; are suppressed!</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br><span class="line">[DoS Attack: FIN Scan] from <span class="built_in">source</span>: 172.17.14.8, port 80,</span><br></pre></td></tr></table></figure><h2 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h2><blockquote><p>hping3是用于生成和解析TCPIP协议数据包的开源工具</p></blockquote><p><code>hping3</code>同样可用于产生<code>ddos</code>攻击包，但与<code>hyenae</code>不同的是，<code>hping3</code>无法手动设置<code>MAC</code>地址，而是根据<code>IP</code>地址自动获取</p><p>需要注意的是，如果使用搬瓦工购买的<code>vps</code>向公网IP执行<code>hping3</code>攻击的话，最好不要尝试，如果要用也一定记得限速，否则就会被警告并关停,当然你有3次机会重置</p><p><img src="/assets/network/vps-warning.png" alt="vps warning"></p><h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># land attack</span></span><br><span class="line">$ sudo hping3 -V -c 10000 -d 120 -S -w 64 --keep -p 80 -s 20000 --flood -a 172.17.14.52 172.17.14.52</span><br><span class="line"><span class="comment"># syn/ack attack</span></span><br><span class="line">$ sudo hping3 -V -c 10000 -d 120 -S -A -w 64 --keep -p 80 -s 80 --flood -a 172.17.14.192 172.17.14.52</span><br><span class="line"></span><br><span class="line"><span class="comment"># -V verbose</span></span><br><span class="line"><span class="comment"># -c packet count</span></span><br><span class="line"><span class="comment"># -d data size</span></span><br><span class="line"><span class="comment"># -p destPort</span></span><br><span class="line"><span class="comment"># -s srcPort</span></span><br><span class="line"><span class="comment"># -a srcIP</span></span><br><span class="line"><span class="comment"># -S SYN tag</span></span><br><span class="line"><span class="comment"># -A ACK tag</span></span><br><span class="line"><span class="comment"># -w winsize</span></span><br><span class="line"><span class="comment"># -I interface</span></span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li>网络攻击工具<ul><li>hping3<ul><li><a href="http://man.linuxde.net/hping3" target="_blank" rel="noopener">http://man.linuxde.net/hping3</a></li><li><a href="http://0daysecurity.com/articles/hping3_examples.html" target="_blank" rel="noopener">http://0daysecurity.com/articles/hping3_examples.html</a></li></ul></li><li>LOIC</li><li>hyenae <ul><li><a href="https://sourceforge.net/projects/hyenae/" target="_blank" rel="noopener">https://sourceforge.net/projects/hyenae/</a></li></ul></li><li>免费DDOS攻击测试工具大合集 <a href="http://www.freebuf.com/sectool/36545.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/36545.html</a></li></ul></li></ul><ul><li>ddos攻击说明<ul><li><a href="https://security.radware.com/ddos-knowledge-center/ddospedia/syn-flood/" target="_blank" rel="noopener">https://security.radware.com/ddos-knowledge-center/ddospedia/syn-flood/</a></li><li>网络攻击：半连接攻击(SYN攻击)、全连接攻击、RST攻击、IP欺骗、DNS欺骗、DOS/DDOS攻击  <a href="http://blog.csdn.net/guowenyan001/article/details/11777361" target="_blank" rel="noopener">http://blog.csdn.net/guowenyan001/article/details/11777361</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前为了重现某个bug，需要对网络设备进行ddos攻击测试，同时也是对设备的网络攻击防护功能进行抗压测试。临阵磨枪，google了两款攻击工具，windows平台的&lt;code&gt;hyenae&lt;/code&gt;，以及Linux平台的&lt;code&gt;hping3&lt;/code&gt;，在此记录一
      
    
    </summary>
    
      <category term="Network" scheme="http://www.litreily.top/categories/Network/"/>
    
    
      <category term="ddos" scheme="http://www.litreily.top/tags/ddos/"/>
    
      <category term="hping3" scheme="http://www.litreily.top/tags/hping3/"/>
    
  </entry>
  
  <entry>
    <title>mySQL基本语法</title>
    <link href="http://www.litreily.top/2018/02/08/mysql-basic/"/>
    <id>http://www.litreily.top/2018/02/08/mysql-basic/</id>
    <published>2018-02-08T01:27:00.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>最近折腾<code>vps</code>，想要手动搭建一个<code>LNMP</code>环境，那必然少不了要补补课，简单学习一下<code>mysql</code>的基本语法。</p><h2 id="install-mySQL"><a href="#install-mySQL" class="headerlink" title="install mySQL"></a>install mySQL</h2><h3 id="install-on-Centos"><a href="#install-on-Centos" class="headerlink" title="install on Centos"></a>install on Centos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br><span class="line">$ sudo yum install mysql-server mysql-client</span><br><span class="line">$ sudo yum install mysql-devel <span class="comment"># install sdk of mysql</span></span><br><span class="line"><span class="comment"># /usr/include/mysql/mysql.h</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="install-on-Ubuntu"><a href="#install-on-Ubuntu" class="headerlink" title="install on Ubuntu"></a>install on Ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mysql-server mysql-client</span><br><span class="line">$ sudo apt-get install libmysqlclient15-dev || sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><h2 id="mySQL-cmd"><a href="#mySQL-cmd" class="headerlink" title="mySQL cmd"></a>mySQL cmd</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u USERNAME -p</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; \h</span><br></pre></td></tr></table></figure><h3 id="add-user"><a href="#add-user" class="headerlink" title="add user"></a>add user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER <span class="string">'username'</span>@<span class="string">'host'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">mysql&gt; CREATE USER <span class="string">'test'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h3 id="set-password"><a href="#set-password" class="headerlink" title="set password"></a>set password</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为当前用户设置新的密码</span></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">"newpassword"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为其它用户重设密码</span></span><br><span class="line">mysql&gt; SET PASSWORD FOR <span class="string">'username'</span>@<span class="string">'host'</span> = PASSWORD(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><h3 id="delete-user"><a href="#delete-user" class="headerlink" title="delete user"></a>delete user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER <span class="string">'username'</span>@<span class="string">'host'</span></span><br></pre></td></tr></table></figure><h3 id="grant-privileges"><a href="#grant-privileges" class="headerlink" title="grant privileges"></a>grant privileges</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为用户授权</span></span><br><span class="line"><span class="comment"># privileges: SELECT, INSERT, UPDATE, ALL, ...</span></span><br><span class="line">mysql&gt; GRANT privileges ON databasename.tablename TO <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br><span class="line"><span class="comment"># 刷新缓存，使授权生效</span></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">mysql&gt; GRANT SELECT, INSERT ON test.user TO <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h3 id="databases-and-tables"><a href="#databases-and-tables" class="headerlink" title="databases and tables"></a>databases and tables</h3><ul><li>create database or table</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create database: vps</span></span><br><span class="line">mysql&gt; CREATE DATABASE vps;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show databases</span></span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| vps                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use database</span></span><br><span class="line">mysql&gt; USE vps;</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">mysql&gt; CREATE TABLE test_tbl(</span><br><span class="line">    -&gt; test_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; test_title VARCHAR(100) NOT NULL,</span><br><span class="line">    -&gt; test_author VARCHAR(40) NOT NULL,</span><br><span class="line">    -&gt; test_date DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( test_id )</span><br><span class="line">    -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show tables</span></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_vps |</span><br><span class="line">+---------------+</span><br><span class="line">| test_tbl      |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe table</span></span><br><span class="line">mysql&gt; DESC test_tbl;</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| test_id     | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| test_title  | varchar(100) | NO   |     | NULL    |                |</span><br><span class="line">| test_author | varchar(40)  | NO   |     | NULL    |                |</span><br><span class="line">| test_date   | date         | YES  |     | NULL    |                |</span><br><span class="line">+-------------+--------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop table</span></span><br><span class="line">mysql&gt; DROP TABLE runoob_tbl;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>in conclusion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABESE dataBaseName;</span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">mysql&gt; USE dataBaseName;</span><br><span class="line">mysql&gt; CREATE TABLE tableName(content);</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">mysql&gt; DESC tableName;</span><br><span class="line">mysql&gt; DROP tableName;</span><br></pre></td></tr></table></figure><ul><li>handle tables</li></ul><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-tutorial.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近折腾&lt;code&gt;vps&lt;/code&gt;，想要手动搭建一个&lt;code&gt;LNMP&lt;/code&gt;环境，那必然少不了要补补课，简单学习一下&lt;code&gt;mysql&lt;/code&gt;的基本语法。&lt;/p&gt;
&lt;h2 id=&quot;install-mySQL&quot;&gt;&lt;a href=&quot;#install-mySQL&quot; class=&quot;headerlink&quot; title=&quot;install mySQL&quot;&gt;&lt;/a&gt;install mySQL&lt;/h2&gt;&lt;h3 id=&quot;install-on-Centos&quot;&gt;&lt;a href=&quot;#install-on-Centos&quot; class=&quot;headerlink&quot; title=&quot;install on Centos&quot;&gt;&lt;/a&gt;install on Centos&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install mysql-server mysql-client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo yum install mysql-devel &lt;span class=&quot;comment&quot;&gt;# install sdk of mysql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# /usr/include/mysql/mysql.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Network" scheme="http://www.litreily.top/categories/Network/"/>
    
    
      <category term="linux" scheme="http://www.litreily.top/tags/linux/"/>
    
      <category term="mysql" scheme="http://www.litreily.top/tags/mysql/"/>
    
      <category term="centos" scheme="http://www.litreily.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>结构体中长度为0的字符数组</title>
    <link href="http://www.litreily.top/2018/01/02/len0-charArray/"/>
    <id>http://www.litreily.top/2018/01/02/len0-charArray/</id>
    <published>2018-01-02T03:24:30.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<p>在C语言的结构体中，有一种特殊用法，在结构体的末尾放置一个长度为0的字符数组，结构体倒数第二个位置放置一个整型变量<code>len</code>。其典型样例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dynamic_value</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> flag;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">char</span> val[<span class="number">0</span>];</span><br><span class="line">&#125;s_flv;</span><br></pre></td></tr></table></figure><p>本文针对其特征，用法及适用场合予以简单介绍。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>最后的字符数组<code>val</code>长度为0，不占用额外的内存空间</li><li>倒数第二个元素为一整型变量，用于存储字符数组的真实长度</li><li><code>val</code>实际指向的是结构体<code>s_flv</code>之后的内存空间</li><li>字符数组的大小可以在定义结构体变量时动态指定<code>s_flv.len</code></li><li>结构体元素个数不限，样例为典型模式，其中的<code>flag</code>作为标签用以标识不同的数据</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>按<code>s_flv</code>格式写入数据到文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_flv</span><span class="params">(FILE *fp, <span class="keyword">int</span> flag, <span class="keyword">char</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(val == <span class="literal">NULL</span>)</span><br><span class="line">        val = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(val);</span><br><span class="line"></span><br><span class="line">    fwrite(&amp;flag, <span class="keyword">sizeof</span>(flag), <span class="number">1</span>, fp); <span class="comment">// 写入标识</span></span><br><span class="line">    fwrite(&amp;len, <span class="keyword">sizeof</span>(len), <span class="number">1</span>, fp);   <span class="comment">// 写入字符数组长度</span></span><br><span class="line">    fwrite(val, len, <span class="number">1</span>, fp);    <span class="comment">// 写入长度为len的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_flv</span><span class="params">(<span class="keyword">char</span> *file, <span class="keyword">char</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">32</span>];   <span class="comment">// 假定字符数组长度小等于32</span></span><br><span class="line">    <span class="keyword">char</span> *p = buf;</span><br><span class="line"></span><br><span class="line">    FILE *fp = fopen(file, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fread(buf, <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">1</span>, fp) &lt;= <span class="number">0</span>)   <span class="comment">// 读取前两个整型数据，获取字符数组长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    s_flv *flv = (s_flv *)p;        <span class="comment">// 定义s_flv结构体，存储数据</span></span><br><span class="line">    fread(val, flv-&gt;len, <span class="number">1</span>, fp);    <span class="comment">// 读取字符数组</span></span><br><span class="line">    flose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>说明</strong><ul><li>每执行一次<code>fread</code>或<code>fwrite</code>函数，文件指针就往后偏移相应的读取长度或写入长度</li><li><code>read_flv</code>定义<code>flv</code>时，从<code>buf</code>中可以获取到数组长度，然后使用<code>fread</code>读取相应长度的数据即可取出字符数组的内容。</li><li>使用以上方法生成的文件内容是二进制文件，许多字符是不可打印字符，所以使用<code>cat</code>指令无法正常显示文件内容</li></ul></li></ul><p>上面描述的方法是将<code>s_flv</code>类型的数据存入文件，但如果不想存入文件，那么该如何为其分配内存呢，下面来看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义s_flv指针变量</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">s_flv *flv = (s_flv *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_flv) + size);</span><br><span class="line">flv-&gt;len = size;</span><br><span class="line">flv-&gt;val = flv + <span class="keyword">sizeof</span>(s_flv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放指针</span></span><br><span class="line"><span class="built_in">free</span>(flv);</span><br></pre></td></tr></table></figure><h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><ul><li><code>json</code>文件的读写</li><li>不定长度字符串的读写</li></ul><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><a href="http://www.cnblogs.com/felove2013/articles/4050226.html" target="_blank" rel="noopener">浅析长度为0的数组</a></li></ul>]]></content>
    
    <summary type="html">
    
      在C语言的结构体中，有一种特殊用法，在结构体的末尾放置一个长度为0的字符数组，结构体倒数第二个位置放置一个整型变量，该变量用于存储紧随该结构体之后的字符数组的长度。
    
    </summary>
    
      <category term="嵌入式" scheme="http://www.litreily.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="C/C++" scheme="http://www.litreily.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>VPS+SS翻越GFW</title>
    <link href="http://www.litreily.top/2017/09/07/ss-config/"/>
    <id>http://www.litreily.top/2017/09/07/ss-config/</id>
    <published>2017-09-07T13:33:02.000Z</published>
    <updated>2018-10-12T13:34:06.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买并配置VPS"><a href="#购买并配置VPS" class="headerlink" title="购买并配置VPS"></a>购买并配置VPS</h2><p>在<a href="http://banwagong.cn/" target="_blank" rel="noopener">搬瓦工</a>选择一个<code>VPS</code>，大概每年<code>$19.99</code>，使用邀请码可优惠<code>6%</code>，可以使用支付宝(Alipay)购买。成功购买<code>VPS</code>后，进入<code>VPS</code>的<a href="https://kiwivm.64clouds.com/main.php" target="_blank" rel="noopener">管理界面</a>，登录账户后便可以查看服务器信息，并进行相关配置了。</p><h2 id="安装SS服务器"><a href="#安装SS服务器" class="headerlink" title="安装SS服务器"></a>安装SS服务器</h2><p>如果VPS选用<code>centos</code>系统，则可以直接在配置界面左下方选择<code>Shadowsocks Server</code>，一键安装就<code>ok</code>了，当然喜欢折腾的也可以自己用<code>yum install</code>下载安装和配置<code>Shadowsocks</code>，此不赘述。</p><h2 id="安装SS客户端"><a href="#安装SS客户端" class="headerlink" title="安装SS客户端"></a>安装SS客户端</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><code>Ubuntu</code>可以选择<code>github</code>中的<a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="noopener">shadowsocks/shadowsocks</a>，或<a href="https://github.com/shadowsocks/shadowsocks-qt5" target="_blank" rel="noopener">shadowsocks/shadowsocks-qt5</a>.</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><code>Windows</code>选择<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks/shadowsocks-windows</a>，或<code>shadowsocks/shadowsocks-qt5</code>中的<a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="noopener">ss-qt5-v2.9.0-win64.7z</a>。本人刚开始使用前者，无法科学上网，从<code>log</code>信息中发现可以将数据发送至<code>VPS</code>，但<code>VPS</code>无法解析其头部信息，故而连接失败，后来尝试网上各种方法无果，最终使用<code>qt5</code>版本成功。具体原因不详。</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>安卓端就下载安装<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">shadowsocks/shadowsocks-android</a>内的<code>apk</code>即可。</p><h2 id="配置SS客户端"><a href="#配置SS客户端" class="headerlink" title="配置SS客户端"></a>配置SS客户端</h2><p><code>SS</code>的配置相当简单，参考<code>VPS</code>中<code>Shadowsocks</code>配置界面给的信息即可，必要信息包括：</p><ul><li>服务器地址 (<code>Host IP</code>)</li><li>密码(<code>password</code>)  </li><li>端口号<code>Port(default:443)</code></li><li>加密方式<code>encryption(default:aes-256-cfb)</code></li></ul><h2 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h2><p>无论是<code>google chrome</code>还是<code>firefox</code>，都有相应的代理插件，最常用的是<code>SwitchyOmega</code>。下载该插件并安装后，需要打开插件的<strong>选项</strong>，进行一定的配置操作：</p><ol><li>新建<strong>情景模式</strong>（<code>profile</code>），命名随意，如：<strong>SS</strong>;</li><li>在默认(<code>default</code>)选项中选择<code>SOCK5</code>，服务器(<code>Server</code>)设为<code>127.0.0.1</code>，端口(<code>port</code>)设为<code>1080</code>;</li><li>点击左侧的应用修改(<code>Apply changes</code>);</li><li>点击<code>auto switch</code>，页面上的条件栏(<code>condition</code>)不用管，点击下面的添加规则，在情景模式（<code>profile</code>）一列中选择之前创建的<code>SS</code>，默认选项分两种情况：<ul><li>普通网络，没有额外代理的情况，默认设为直连(<code>direct</code>);</li><li>如果是公司网设了代理，则默认设为代理<code>proxy</code>，并在代理<code>proxy</code>中设置好公司的代理服务器<code>IP</code>和端口号<code>port</code>.</li></ul></li><li>在下面的规则列表配置中，选择<code>AutoProxy</code>,添加网址<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，</a> 然后点击下方按钮更新列表信息，网址无误的话会提示成功更新规则列表；</li><li>点击左侧应用修改<code>Apply changes</code>，在插件中选择<code>auto switch</code>选项即可开启自动切换代理模式。</li></ol><p>经过以上配置后，启动已配置好服务器信息的<code>Shadowsocks</code>客户端，正常情况下就可以访问<code>Google</code>, <code>youtube</code>等国外网站了。</p><h2 id="配置全局代理"><a href="#配置全局代理" class="headerlink" title="配置全局代理"></a>配置全局代理</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>在<code>Ubuntu</code>中，可以打开 Settings-&gt;Network-&gt;Network Proxy ，在<code>Socks Host</code>一栏中设置<code>IP</code>为<code>127.0.0.1</code>，代理端口为<code>1080</code>。这样便设置好了全局代理。<code>firefox</code>的网络设置选项中有单独一项用于选择系统代理设置，对应的就是这个。</p><h3 id="安装polipo"><a href="#安装polipo" class="headerlink" title="安装polipo"></a>安装polipo</h3><p><code>polipo</code>是一个小型的代理服务器软件，用于二次转发数据包，使用它可以配合系统设置里的全局代理实现真正的全局代理，让终端等应用都可以翻越<code>GFW</code>，这样在<code>shell</code>中下载软件就方便快速多了，亲测效果很是明显。</p><p>下面是安装配置步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install polipo</span><br><span class="line">$ sudo vim /etc/polipo/config</span><br><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span></span><br><span class="line"><span class="comment"># and "polipo -v" for variables you can tweak and further information.</span></span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line">proxyAddress = <span class="string">"0.0.0.0"</span></span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1080"</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br></pre></td></tr></table></figure><p>修改<code>config</code>文件后需要重启一下<code>polipo</code>，然后测试是否代理是否成功开启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/polipo restart</span><br><span class="line">$ <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8123/"</span> curl ifconfig.me</span><br><span class="line">***.***.***.*** <span class="comment"># return your VPS-IP_ADDR if success</span></span><br></pre></td></tr></table></figure><p>到此就可以愉快的使用谷歌了，但是目前晚上的网速略慢，看<code>youtube</code>经常只能到<code>360P</code>。</p>]]></content>
    
    <summary type="html">
    
      Shadowsocks简称SS或$$，这段时间在搬瓦工买了个VPS，配合SS以及各种代理插件成功翻越GFW，期间遇到各种问题，谨以此文记录之。
    
    </summary>
    
      <category term="杂物柜" scheme="http://www.litreily.top/categories/%E6%9D%82%E7%89%A9%E6%9F%9C/"/>
    
    
      <category term="ubuntu" scheme="http://www.litreily.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>远程服务器中编译安装tmux</title>
    <link href="http://www.litreily.top/2017/08/23/tmux-install/"/>
    <id>http://www.litreily.top/2017/08/23/tmux-install/</id>
    <published>2017-08-23T00:28:22.000Z</published>
    <updated>2018-10-12T13:34:06.409Z</updated>
    
    <content type="html"><![CDATA[<p>在工作当中，公司出于安全考虑，部署的远程Linux服务器总有一些限制（没网，Shell指令有限），而且员工作为普通用户，无法安装软件到除用户目录以外的目录。当我们需要下载安装一些常用工具时，因为没网，所以无法使用<code>apt-get</code>等下载指令，只能先在本地PC下载软件源码，然后传入服务器进行编译安装。本文以<code>tmux</code>为例说明服务器中编译安装软件的流程。</p><p>安装路径：<code>~/lib/software/tmux</code></p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><code>tmux</code>的下载地址 : <a href="https://github.com/tmux/tmux/releases/download/2.5/tmux-2.5.tar.gz" target="_blank" rel="noopener">https://github.com/tmux/tmux/releases/download/2.5/tmux-2.5.tar.gz</a></p><p>依赖库<code>libevent</code>：<a href="https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz" target="_blank" rel="noopener">https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz</a></p><p>下载后的文件通过一定方式(scp，共享服务，…)可以传入服务器中。</p><h2 id="Move-files-optional"><a href="#Move-files-optional" class="headerlink" title="Move files (optional)"></a>Move files (optional)</h2><p>在服务器中执行以下指令，将文件放入<code>~/lib</code>文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">mkdir lib</span><br><span class="line">cp sharedir.git/*.tar.gz lib/</span><br></pre></td></tr></table></figure><h2 id="Edit-profile"><a href="#Edit-profile" class="headerlink" title="Edit .profile"></a>Edit .profile</h2><p>编辑<code>.profile</code>，添加全局变量<code>SWDIR</code>（存放用户手动编译安装的软件）；更新依赖库<code>LD_LIBRARY_PATH</code>和环境变量<code>PATH</code>，分别添加<code>tmux</code>的依赖路径和安装路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.profile</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="built_in">export</span> SWDIR=/home/&lt;username&gt;/lib/software</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY</span>:<span class="variable">$SWDIR</span>/libevent/lib</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;SWDIR&#125;</span>/tmux/:<span class="variable">$&#123;SWDIR&#125;</span>/tmux/bin/</span><br></pre></td></tr></table></figure><h2 id="Complie-libevent"><a href="#Complie-libevent" class="headerlink" title="Complie libevent"></a>Complie libevent</h2><p>配置好环境变量后，首先编译<code>tmux</code>的依赖库<code>libevent</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/lib</span><br><span class="line">tar -xvzf libevent-2.1.8-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libevent-2.1.8-stable</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=<span class="variable">$SWDIR</span>/libevent &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>默认安装路径是没有访问权限的，所以需要使用<code>--prefix</code>选项手动指定安装路径至用户目录中的某个文件夹。</p><h2 id="Complie-tmux"><a href="#Complie-tmux" class="headerlink" title="Complie tmux"></a>Complie tmux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/lib</span><br><span class="line">tar -xvzf tmux-2.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tmux-2.5</span><br><span class="line">./configure --prefix=<span class="variable">$SWDIR</span>/tmux CFLAGS=<span class="string">"-I<span class="variable">$SWDIR</span>/libevent/include"</span> LDFLAGS=<span class="string">"-L<span class="variable">$SWDIR</span>/libevent/lib"</span> &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>说明：</strong><code>CFLAGS</code>和<code>LDFLAGS</code>用于指定编译<code>tmux</code>所需的依赖库文件。</p><p>至此，<code>tmux</code>便安装完成了。在<code>shell</code>中输入<code>tmux</code>即可启动，通过<code>man tmux</code>可以查看帮助文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在工作当中，公司出于安全考虑，部署的远程Linux服务器总有一些限制（没网，Shell指令有限），而且员工作为普通用户，无法安装软件到除用户目录以外的目录。当我们需要下载安装一些常用工具时，因为没网，所以无法使用&lt;code&gt;apt-get&lt;/code&gt;等下载指令，只能先在本
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://www.litreily.top/tags/ubuntu/"/>
    
      <category term="tmux" scheme="http://www.litreily.top/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Telnet中使用smtp发送邮件</title>
    <link href="http://www.litreily.top/2017/08/17/telnet-smtp/"/>
    <id>http://www.litreily.top/2017/08/17/telnet-smtp/</id>
    <published>2017-08-17T13:18:44.000Z</published>
    <updated>2018-10-12T13:34:06.409Z</updated>
    
    <content type="html"><![CDATA[<p><code>Telnet</code>是远程登录服务的标准协议和主要方式，工作于<code>TCP/IP</code>协议族的应用层，常用于远程登录<code>web</code>服务器，其中便包括<code>SMTP</code>，<code>POP3</code>等邮件服务器。</p><p>这几天参考书籍《计算机网络-自顶向下方法》学习计算机网络知识，顺便尝试了如何使用<code>Telnet</code>登录<code>smtp</code>发送邮件，下面通过一个简单示例介绍具体的发送过程。</p><h2 id="Telnet-smtp-163-com-25"><a href="#Telnet-smtp-163-com-25" class="headerlink" title="Telnet smtp.163.com 25"></a>Telnet smtp.163.com 25</h2><p><code>smtp</code>对应的端口号为<code>25</code>，以163邮箱为例，下面是邮件发送过程。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">→ ~ telnet smtp.163.com 25</span><br><span class="line">Trying 220.181.12.15...</span><br><span class="line">Connected to smtp.163.com.</span><br><span class="line">Escape character is ^].</span><br><span class="line">220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[20141201])</span><br><span class="line">helo 163.com</span><br><span class="line">250 OK</span><br><span class="line">auth login</span><br><span class="line">334 dXNlcm5hbWU6</span><br><span class="line">MTgyNjY2MzI4NzJAMTYzLmNvbQ==</span><br><span class="line">334 UGFzc3dvcmQ6</span><br><span class="line">****************</span><br><span class="line">235 Authentication successful</span><br><span class="line">mail from:&lt;182****2872@163.com&gt;</span><br><span class="line">250 Mail OK</span><br><span class="line">rcpt to:&lt;707***098@qq.com&gt;</span><br><span class="line">250 Mail OK</span><br><span class="line">data</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">From: 182****2872@163.com</span><br><span class="line">To: 707***098@qq.com</span><br><span class="line">Subject: Test the use of smtp</span><br><span class="line"></span><br><span class="line">  Hello, litreily.                          </span><br><span class="line">  This is a message edit with telnet.</span><br><span class="line"></span><br><span class="line">Best wish to you.</span><br><span class="line">Litreily</span><br><span class="line">.</span><br><span class="line">250 Mail OK queued as smtp11,D8CowAAnjlqKlZVZXa4QAQ--.18342S2 1502975693</span><br><span class="line">quit</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">→ ~</span><br></pre></td></tr></table></figure><p>下面分开对每个过程进行解析，<code>C</code>代表客户端，即本机，<code>S</code>代表远程服务器端。整个过程分为以下几步：</p><ul><li>打招呼</li><li>账户认证</li><li>声明邮箱地址</li><li>书写邮件内容</li><li>退出<code>Telnet</code></li></ul><h3 id="招呼语"><a href="#招呼语" class="headerlink" title="招呼语"></a>招呼语</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S 220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[20141201])</span><br><span class="line">C helo 163.com</span><br><span class="line">S 250 OK</span><br></pre></td></tr></table></figure><p><code>220</code>代表服务器已准备好，客户端首先向服务器打一声招呼<code>helo</code>，服务器接收到后返回一个<code>250</code>应答信号，代表打招呼成功，下面可以进行账户的密码认证。</p><h3 id="账户认证"><a href="#账户认证" class="headerlink" title="账户认证"></a>账户认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C auth login</span><br><span class="line">S 334 dXNlcm5hbWU6</span><br><span class="line">C MTgyNjY2MzI4NzJAMTYzLmNvbQ==</span><br><span class="line">S 334 UGFzc3dvcmQ6</span><br><span class="line">C ****************</span><br><span class="line">S 235 Authentication successful</span><br></pre></td></tr></table></figure><p>客户端发送<code>auth login</code>声明自己将进行邮箱账户的用户名认证和密码认证。服务器端返回一个以<code>334</code>代码开头的提示信息，不必追究其语义，而后用户依次输入通过<code>Base64</code>加密的邮箱名和密码，加密网址见后续参考资料。当输入的账号密码无误时，服务端将返回认证成功的提示语。</p><h3 id="声明邮箱地址"><a href="#声明邮箱地址" class="headerlink" title="声明邮箱地址"></a>声明邮箱地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C mail from:&lt;182****2872@163.com&gt;</span><br><span class="line">S 250 Mail OK</span><br><span class="line">C rcpt to:&lt;707***098@qq.com&gt;</span><br><span class="line">S 250 Mail OK</span><br></pre></td></tr></table></figure><p>账户密码认证结束后，客户端通过<code>mail from:&lt;emailName&gt;</code>以及<code>rcpt to:&lt;nameEmail&gt;</code>声明邮箱的源地址和目的地址。</p><h3 id="书写邮件内容"><a href="#书写邮件内容" class="headerlink" title="书写邮件内容"></a>书写邮件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C data</span><br><span class="line">S 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">C From: 182****2872@163.com</span><br><span class="line">C To: 707***098@qq.com</span><br><span class="line">C Subject: Test the use of smtp</span><br><span class="line">C </span><br><span class="line">C   Hello, litreily.                          </span><br><span class="line">C   This is a message edit with telnet.</span><br><span class="line">C </span><br><span class="line">C Best wish to you.</span><br><span class="line">C Litreily</span><br><span class="line">C .</span><br><span class="line">S 250 Mail OK queued as smtp11,D8CowAAnjlqKlZVZXa4QAQ--.18342S2 1502975693</span><br></pre></td></tr></table></figure><p>写明邮件地址后，使用指令<code>data</code>进入邮件编辑状态，服务器端会提示当输入<code>&lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</code>时退出编辑状态。</p><p>邮件内容有一定的格式要求，不按要求随意书写有可能被当成垃圾邮件或不合法邮件而退信。通常需要指定邮件主题<code>Subject</code>，其它相关信息包括时间<code>Date</code>，邮件地址<code>From</code>，<code>To</code>等，然后再书写邮件主体内容，更详细的格式可以参考文档<strong>【RFC 821】</strong>。编辑结束后，以单行的点号<code>.</code>结束。如果一切正常，服务器端将返回以<code>250</code>开头的应答信息，并提示邮件以进入<code>smtp</code>的发送队列。此时便可以查收邮件予以验证了。</p><h3 id="退出Telnet"><a href="#退出Telnet" class="headerlink" title="退出Telnet"></a>退出Telnet</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C quit</span><br><span class="line">S Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>当邮件发送结束后，客户端通过<code>quit</code>退出<code>Telnet</code>。</p><h2 id="SMTP-Code"><a href="#SMTP-Code" class="headerlink" title="SMTP Code"></a>SMTP Code</h2><ul><li><code>211</code> 系统状态或系统帮助响应</li><li><code>214</code> 帮助信息</li><li><code>220</code> 服务就绪</li><li><code>221</code> 服务关闭传输信道</li><li><code>235</code> 用户验证成功</li><li><code>250</code> 要求的邮件操作完成</li><li><code>251</code> 用户非本地，将转发向</li><li><code>334</code> 等待用户输入验证信息</li><li><code>354</code> 开始邮件输入，以单行<strong>.</strong>结束</li><li><code>421</code> 服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）</li><li><code>450</code> 要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）</li><li><code>451</code> 放弃要求的操作；处理过程中出错</li><li><code>452</code> 系统存储不足，要求的操作未执行</li><li><code>500</code> 格式错误，命令不可识别（此错误也包括命令行过长）</li><li><code>501</code> 参数格式错误</li><li><code>502</code> 命令不可实现</li><li><code>503</code> 错误的命令序列</li><li><code>504</code> 命令参数不可实现</li><li><code>535</code> 用户验证失败</li><li><code>550</code> 要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）</li><li><code>551</code> 用户非本地，请尝试</li><li><code>552</code> 过量的存储分配，要求的操作未执行</li><li><code>553</code> 邮箱名不可用，要求的操作未执行（例如邮箱格式错误）</li><li><code>554</code> 操作失败</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><code>SMTP</code>文档(<code>RFC 821</code>) : <a href="https://tools.ietf.org/pdf/rfc821.pdf" target="_blank" rel="noopener">https://tools.ietf.org/pdf/rfc821.pdf</a></li><li><code>SMTP Code</code> : <a href="http://bbs.csdn.net/topics/80275246" target="_blank" rel="noopener">http://bbs.csdn.net/topics/80275246</a></li><li><code>163.com</code> 邮件退信代码 : <a href="http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html" target="_blank" rel="noopener">http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      Telnet是远程登录服务的标准协议和主要方式，工作于TCP/IP协议族的应用层，常用于远程登录web服务器，其中便包括SMTP，POP3等邮件服务器。
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="telnet" scheme="http://www.litreily.top/tags/telnet/"/>
    
      <category term="smtp" scheme="http://www.litreily.top/tags/smtp/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下解决wireshark没有权限的问题</title>
    <link href="http://www.litreily.top/2017/07/28/chmod-wireshark/"/>
    <id>http://www.litreily.top/2017/07/28/chmod-wireshark/</id>
    <published>2017-07-28T03:24:49.000Z</published>
    <updated>2018-10-12T13:34:06.409Z</updated>
    
    <content type="html"><![CDATA[<p><code>wireshark</code>是常用的网络抓包工具，在<code>ubuntu</code>中安装方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install wireshark</span><br></pre></td></tr></table></figure><p>安装以后，打开软件后，在选择网络接口进行抓包时会提示没有权限，为此，可以通过以下方法解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户组，命名为wireshark</span></span><br><span class="line">sudo groupadd wireshark  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将dumpcap更改为刚添加的用户组</span></span><br><span class="line">sudo chgrp wireshark /usr/bin/dumpcap  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 为wireshark用户组添加使用dumpcap的root权限</span></span><br><span class="line">sudo chmod 4755 /usr/bin/dumpcap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将自己的用户(本人litreily)添加到wireshark用户组</span></span><br><span class="line">sudo gpasswd -a litreily wireshark</span><br></pre></td></tr></table></figure><p>执行完成以后便可以使用<code>wireshark</code>正常抓包了。</p>]]></content>
    
    <summary type="html">
    
      wireshark是常用的抓包工具，在Ubuntu下安装后默认会有权限不够的问题，为此可以通过添加用户组并更改dumpcap使用权限的方法予以解决。
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://www.litreily.top/tags/ubuntu/"/>
    
      <category term="wireshark" scheme="http://www.litreily.top/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>C程序与Shell脚本混合编程</title>
    <link href="http://www.litreily.top/2017/07/27/mixwith-shell/"/>
    <id>http://www.litreily.top/2017/07/27/mixwith-shell/</id>
    <published>2017-07-27T01:21:24.000Z</published>
    <updated>2018-10-12T13:34:06.409Z</updated>
    
    <content type="html"><![CDATA[<p>对于嵌入式软件开发，有时候需要在使用<code>C</code>语言进行开发的同时，嵌入<code>shell</code>脚本指令，以完成一些特定的任务。</p><p>本文结合上一篇博文“初探makefile”的程序代码，加上一个简单的<code>shell</code>脚本，说明两者混合编程的方法。</p><h2 id="编写-shell-脚本"><a href="#编写-shell-脚本" class="headerlink" title="编写 shell 脚本"></a>编写 shell 脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shell.sh</span><br></pre></td></tr></table></figure><p>使用<code>vim</code>编辑器新建<code>shell.sh</code>脚本文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please input your strings"</span></span><br><span class="line"><span class="built_in">read</span> input_string</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"input_string=<span class="variable">$input_string</span>"</span></span><br></pre></td></tr></table></figure><p>脚本首先输出一个“Hello world!”，然后输出一个字符串输入提示语，等待用户输入后，打印出相应的信息。</p><h2 id="在-main-c-中调用-shell-脚本"><a href="#在-main-c-中调用-shell-脚本" class="headerlink" title="在 main.c 中调用 shell 脚本"></a>在 main.c 中调用 shell 脚本</h2><p>为了在<code>C</code>文件中调用<code>shell</code>脚本，可以使用<code>stdlib.h</code>库中的<code>system</code>函数，调用方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"bash ./&lt;script-filename&gt;.sh"</span>);</span><br><span class="line">    <span class="comment">// bash为默认shell，也可改用诸如"zsh"类的shell</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据该用法修改原有的<code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a,b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>,a,b,c);</span><br><span class="line">    system(<span class="string">"zsh ./shell.sh"</span>);     <span class="comment">// 调用 shell 脚本</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Infos:File-%s, Func-%s, Line-%d\n"</span>,__FILE__,__func__,__LINE__);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    __FILE__ : 文件名</span></span><br><span class="line"><span class="comment">    __func__ : 函数名</span></span><br><span class="line"><span class="comment">    __LINE__ : 所在行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译链接并执行"><a href="#编译链接并执行" class="headerlink" title="编译链接并执行"></a>编译链接并执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ make clean                <span class="comment"># 清除目标文件</span></span><br><span class="line">rm <span class="built_in">test</span> main.o add.o</span><br><span class="line"></span><br><span class="line">$ make                      <span class="comment"># 生成可执行文件</span></span><br><span class="line">cc    -c -o main.o main.c</span><br><span class="line">cc    -c -o add.o add.c</span><br><span class="line">cc -o <span class="built_in">test</span> main.o add.o</span><br><span class="line"></span><br><span class="line">$ ./<span class="built_in">test</span>                    <span class="comment"># 执行可执行文件</span></span><br><span class="line">10 + 1 = 11                 <span class="comment"># 加法运算结果</span></span><br><span class="line">Hello world!                <span class="comment"># shell 脚本欢迎语</span></span><br><span class="line">Please input your strings   <span class="comment"># 提示语</span></span><br><span class="line">whatever                    <span class="comment"># 手动输入的信息  </span></span><br><span class="line">input_string=whatever       <span class="comment"># 显示信息</span></span><br><span class="line">Infos:File-main.c, Func-main, Line-14   <span class="comment"># 显示打印程序所在文件、函数及对应行数</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：当使用<code>printf</code>函数时，如果不在输出信息后添加<code>\n</code>换行符的话，其输出信息有可能与<code>shell</code>脚本执行结果发生错位。为避免该情况的发生，应习惯在<code>printf</code>函数调用过程中加入换行符。</p><h2 id="显示脚本指令"><a href="#显示脚本指令" class="headerlink" title="显示脚本指令"></a>显示脚本指令</h2><p>为了追踪每个脚本指令的执行过程，可以修改<code>system</code>函数调用方式，在<code>bash</code>,<code>zsh</code>后添加选项<code>-x</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">"zsh -x ./shell.sh"</span>);</span><br></pre></td></tr></table></figure><p>修改后重新执行make，执行<code>./test</code>得到以下结果</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">10 + 1 = 11</span><br><span class="line">+/etc/zsh/zshenv:15&gt; [[ -z /usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin || /usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin == /bin:/usr/bin ]]</span><br><span class="line"></span><br><span class="line">+./shell.sh:3&gt; <span class="built_in">echo</span> <span class="string">'Hello world!'</span></span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">+./shell.sh:4&gt; <span class="built_in">echo</span> <span class="string">'Please input your strings'</span></span><br><span class="line">Please input your strings</span><br><span class="line"></span><br><span class="line">+./shell.sh:5&gt; <span class="built_in">read</span> input_string</span><br><span class="line">what</span><br><span class="line"></span><br><span class="line">+./shell.sh:6&gt; <span class="built_in">echo</span> <span class="string">'input_string=what'</span></span><br><span class="line">input_string=what</span><br><span class="line"></span><br><span class="line">Infos:File-main.c, Func-main, Line-14</span><br></pre></td></tr></table></figure><p>使用不同的<code>shell</code>，其显示效果不大一致，下面是使用<code>bash</code>执行后的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">10 + 1 = 11</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Hello world!'</span></span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Please input your strings'</span></span><br><span class="line">Please input your strings</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">read</span> input_string</span><br><span class="line">what</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">echo</span> input_string=what</span><br><span class="line">input_string=what</span><br><span class="line"></span><br><span class="line">Infos:File-main.c, Func-main, Line-14</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：上述执行过程中显示的空行是为了清楚显示执行过程手动添加的，实际执行过程中并无空行。</p>]]></content>
    
    <summary type="html">
    
      简单的C语言与shell脚本混合使用方法介绍
    
    </summary>
    
      <category term="Linux" scheme="http://www.litreily.top/categories/Linux/"/>
    
    
      <category term="C/C++" scheme="http://www.litreily.top/tags/C-C/"/>
    
      <category term="ubuntu" scheme="http://www.litreily.top/tags/ubuntu/"/>
    
      <category term="shell" scheme="http://www.litreily.top/tags/shell/"/>
    
      <category term="makefile" scheme="http://www.litreily.top/tags/makefile/"/>
    
  </entry>
  
</feed>
